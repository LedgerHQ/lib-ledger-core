name: "Nix Release builds"
on:
  pull_request:
    branches:
      - release/4.0.0
      - release/4.1.0
      - release/4.2.0
      - develop
  push:
    branches:
      - release/4.0.0
      - release/4.1.0
      - release/4.2.0
      - develop
    tags:
      - '*'
jobs:
  libcore_version:
    name: Compute libcore version
    runs-on: ubuntu-latest
    outputs:
      lib_version: ${{ steps.lib_version.outputs.lib_version }}
      deploy_jar: ${{ steps.lib_version.outputs.deploy_jar }}
      deploy_dynlibs: ${{ steps.lib_version.outputs.deploy_dynlibs }}
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Set version slug and push_to_S3 flags
        id: lib_version
        run: bash nix/scripts/export_libcore_version.sh
  Ubuntu_jni:
    name: Linux (with JNI)
    needs: libcore_version
    runs-on: ubuntu-latest
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/checkout@v2.3.4
      with:
        submodules: 'recursive'
    - uses: cachix/install-nix-action@v13
      with:
        nix_path: nixpkgs=https://github.com/NixOS/nixpkgs/archive/5f746317f10f7206f1dbb8dfcfc2257b04507eee.tar.gz
    - run: nix-build
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ needs.libcore_version.outputs.lib_version }}-linux-libledgercore
        path: result/lib/libledger-core.so
        retention-days: 5
  MacOS_jni:
    name: MacOS (with JNI)
    needs: libcore_version
    runs-on: macos-latest
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/checkout@v2.3.4
      with:
        submodules: 'recursive'
    - uses: cachix/install-nix-action@v13
      with:
        nix_path: nixpkgs=https://github.com/NixOS/nixpkgs/archive/5f746317f10f7206f1dbb8dfcfc2257b04507eee.tar.gz
    - run: nix-build
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ needs.libcore_version.outputs.lib_version }}-macos-libledgercore
        path: result/lib/libledger-core.dylib
        retention-days: 5
  JAR:
    name: Jar build (MacOS + Linux)
    needs: [Ubuntu_jni, MacOS_jni, libcore_version]
    runs-on: ubuntu-latest
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/checkout@v2.3.4
      with:
        submodules: 'recursive'
    - uses: cachix/install-nix-action@v13
      with:
        nix_path: nixpkgs=https://github.com/NixOS/nixpkgs/archive/5f746317f10f7206f1dbb8dfcfc2257b04507eee.tar.gz
    - run: mkdir -p jar_build/src/main/resources/resources/djinni_native_libs
    - name: Fetch Linux so
      uses: actions/download-artifact@v2
      with:
        name: ${{ needs.libcore_version.outputs.lib_version }}-linux-libledgercore
        path: jar_build/src/main/resources/resources/djinni_native_libs
    - name: Fetch MacOS dylib
      uses: actions/download-artifact@v2
      with:
        name: ${{ needs.libcore_version.outputs.lib_version }}-macos-libledgercore
        path: jar_build/src/main/resources/resources/djinni_native_libs
    - run: nix-shell --run "bash nix/scripts/build_jar.sh" nix/libcore-jar.nix
      env:
        LIB_VERSION: ${{ needs.libcore_version.outputs.lib_version }}
        DEPLOY_JAR: ${{ needs.libcore_version.outputs.deploy_jar }}
    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: ${{ needs.libcore_version.outputs.lib_version }}-ledger-lib-core.jar
        path: jar_build/artifact/ledger-lib-core.jar
  Windows_no_jni:
    name: Windows (no JNI)
    needs: libcore_version
    runs-on: [self-hosted, windows, X64, Coin-Integration]
    env:
      source_path: 'libcore_source'
      build_path: 'libcore_build'
    steps:
      - name: Check runner environment
        run: |
          git --version
          cmake --version
          msbuild /help
          cl
          ctest --version
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: ${{env.source_path}}
          clean: true
          submodules: true
      - name: Build - Cmake
        run: |
          Remove-Item -LiteralPath "${{env.build_path}}" -Force -Recurse -ErrorAction Ignore
          mkdir ${{env.build_path}}
          cd ${{env.build_path}}
          cmake `
            -DBUILD_TESTS=OFF `
            -DSYS_OPENSSL=ON `
            -DOPENSSL_USE_STATIC_LIBS=TRUE `
            ..\${{env.source_path}}
      - name: Build - Make
        run: |
          cmake `
            --build . `
            --config Release `
            -- /m:1
        working-directory: ${{env.build_path}}
      - name : Upload build files
        uses: actions/upload-artifact@v2
        with:
          name: ${{ needs.libcore_version.outputs.lib_version }}-windows-nojni-libledgercore
          path: |
            ${{env.build_path}}\core\src\build\Release\ledger-core.dll
      - name: Clean workspace
        if: ${{ always() }}
        run: |
          echo "Cleaning up previous run"
          Remove-Item -LiteralPath "${{github.workspace}}\${{env.build_path}}" -Force -Recurse
        continue-on-error: true
