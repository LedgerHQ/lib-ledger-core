// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#include "NJSBitcoinLikeTransactionBuilderCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSBitcoinLikeTransactionBuilder::addInput) {

    //Check if method called with right number of arguments
    if(info.Length() != 3)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::addInput needs 3 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    auto arg_1 = Nan::To<int32_t>(info[1]).FromJust();
    auto arg_2 = Nan::To<int32_t>(info[2]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::addInput : implementation of BitcoinLikeTransactionBuilder is not valid");
    }

    auto result = cpp_impl->addInput(arg_0,arg_1,arg_2);

    //Wrap result in node object
    auto arg_3_wrap = NJSBitcoinLikeTransactionBuilder::wrap(result);
    auto arg_3 = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(arg_3_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_3);
}
NAN_METHOD(NJSBitcoinLikeTransactionBuilder::addOutput) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::addOutput needs 2 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    if(!njs_ptr_arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSAmount failed");
    }
    auto arg_0 = njs_ptr_arg_0->getCppImpl();

    Local<Object> njs_arg_1 = info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    NJSBitcoinLikeScript *njs_ptr_arg_1 = static_cast<NJSBitcoinLikeScript *>(Nan::GetInternalFieldPointer(njs_arg_1,0));
    if(!njs_ptr_arg_1)
    {
        return Nan::ThrowError("NodeJs Object to NJSBitcoinLikeScript failed");
    }
    auto arg_1 = njs_ptr_arg_1->getCppImpl();


    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::addOutput : implementation of BitcoinLikeTransactionBuilder is not valid");
    }

    auto result = cpp_impl->addOutput(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2_wrap = NJSBitcoinLikeTransactionBuilder::wrap(result);
    auto arg_2 = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(arg_2_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSBitcoinLikeTransactionBuilder::addChangePath) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::addChangePath needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::addChangePath : implementation of BitcoinLikeTransactionBuilder is not valid");
    }

    auto result = cpp_impl->addChangePath(arg_0);

    //Wrap result in node object
    auto arg_1_wrap = NJSBitcoinLikeTransactionBuilder::wrap(result);
    auto arg_1 = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(arg_1_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSBitcoinLikeTransactionBuilder::excludeUtxo) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::excludeUtxo needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    auto arg_1 = Nan::To<int32_t>(info[1]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::excludeUtxo : implementation of BitcoinLikeTransactionBuilder is not valid");
    }

    auto result = cpp_impl->excludeUtxo(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2_wrap = NJSBitcoinLikeTransactionBuilder::wrap(result);
    auto arg_2 = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(arg_2_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSBitcoinLikeTransactionBuilder::setNumberOfChangeAddresses) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::setNumberOfChangeAddresses needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int32_t>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::setNumberOfChangeAddresses : implementation of BitcoinLikeTransactionBuilder is not valid");
    }

    auto result = cpp_impl->setNumberOfChangeAddresses(arg_0);

    //Wrap result in node object
    auto arg_1_wrap = NJSBitcoinLikeTransactionBuilder::wrap(result);
    auto arg_1 = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(arg_1_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSBitcoinLikeTransactionBuilder::setMaxAmountOnChange) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::setMaxAmountOnChange needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    if(!njs_ptr_arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSAmount failed");
    }
    auto arg_0 = njs_ptr_arg_0->getCppImpl();


    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::setMaxAmountOnChange : implementation of BitcoinLikeTransactionBuilder is not valid");
    }

    auto result = cpp_impl->setMaxAmountOnChange(arg_0);

    //Wrap result in node object
    auto arg_1_wrap = NJSBitcoinLikeTransactionBuilder::wrap(result);
    auto arg_1 = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(arg_1_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSBitcoinLikeTransactionBuilder::setMinAmountOnChange) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::setMinAmountOnChange needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    if(!njs_ptr_arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSAmount failed");
    }
    auto arg_0 = njs_ptr_arg_0->getCppImpl();


    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::setMinAmountOnChange : implementation of BitcoinLikeTransactionBuilder is not valid");
    }

    auto result = cpp_impl->setMinAmountOnChange(arg_0);

    //Wrap result in node object
    auto arg_1_wrap = NJSBitcoinLikeTransactionBuilder::wrap(result);
    auto arg_1 = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(arg_1_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSBitcoinLikeTransactionBuilder::pickInputs) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::pickInputs needs 2 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = (ledger::core::api::BitcoinLikePickingStrategy)Nan::To<int>(info[0]).FromJust();
    auto arg_1 = Nan::To<int32_t>(info[1]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::pickInputs : implementation of BitcoinLikeTransactionBuilder is not valid");
    }

    auto result = cpp_impl->pickInputs(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2_wrap = NJSBitcoinLikeTransactionBuilder::wrap(result);
    auto arg_2 = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(arg_2_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSBitcoinLikeTransactionBuilder::sendToAddress) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::sendToAddress needs 2 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    if(!njs_ptr_arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSAmount failed");
    }
    auto arg_0 = njs_ptr_arg_0->getCppImpl();

    String::Utf8Value string_arg_1(info[1]->ToString());
    auto arg_1 = std::string(*string_arg_1);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::sendToAddress : implementation of BitcoinLikeTransactionBuilder is not valid");
    }

    auto result = cpp_impl->sendToAddress(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2_wrap = NJSBitcoinLikeTransactionBuilder::wrap(result);
    auto arg_2 = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(arg_2_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSBitcoinLikeTransactionBuilder::setFeesPerByte) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::setFeesPerByte needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    if(!njs_ptr_arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSAmount failed");
    }
    auto arg_0 = njs_ptr_arg_0->getCppImpl();


    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::setFeesPerByte : implementation of BitcoinLikeTransactionBuilder is not valid");
    }

    auto result = cpp_impl->setFeesPerByte(arg_0);

    //Wrap result in node object
    auto arg_1_wrap = NJSBitcoinLikeTransactionBuilder::wrap(result);
    auto arg_1 = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(arg_1_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSBitcoinLikeTransactionBuilder::build) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::build needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callcack
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSBitcoinLikeTransactionCallback *njs_ptr_arg_0 = new NJSBitcoinLikeTransactionCallback(arg_0_resolver);
    std::shared_ptr<NJSBitcoinLikeTransactionCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::build : implementation of BitcoinLikeTransactionBuilder is not valid");
    }
    cpp_impl->build(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSBitcoinLikeTransactionBuilder::clone) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::clone needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::clone : implementation of BitcoinLikeTransactionBuilder is not valid");
    }

    auto result = cpp_impl->clone();

    //Wrap result in node object
    auto arg_0_wrap = NJSBitcoinLikeTransactionBuilder::wrap(result);
    auto arg_0 = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(arg_0_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeTransactionBuilder::reset) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::reset needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::reset : implementation of BitcoinLikeTransactionBuilder is not valid");
    }
    cpp_impl->reset();
}
NAN_METHOD(NJSBitcoinLikeTransactionBuilder::parseRawUnsignedTransaction) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::parseRawUnsignedTransaction needs 2 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(), Nan::New<String>("walletType").ToLocalChecked()).ToLocalChecked();
    auto arg_0_1 = (ledger::core::api::WalletType)Nan::To<int>(field_arg_0_1).FromJust();

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
    String::Utf8Value string_arg_0_2(field_arg_0_2->ToString());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(), Nan::New<String>("bip44CoinType").ToLocalChecked()).ToLocalChecked();
    auto arg_0_3 = Nan::To<int32_t>(field_arg_0_3).FromJust();

    auto field_arg_0_4 = Nan::Get(info[0]->ToObject(), Nan::New<String>("paymentUriScheme").ToLocalChecked()).ToLocalChecked();
    String::Utf8Value string_arg_0_4(field_arg_0_4->ToString());
    auto arg_0_4 = std::string(*string_arg_0_4);

    auto field_arg_0_5 = Nan::Get(info[0]->ToObject(), Nan::New<String>("units").ToLocalChecked()).ToLocalChecked();
    vector<CurrencyUnit> arg_0_5;
    Local<Array> arg_0_5_container = Local<Array>::Cast(field_arg_0_5);
    for(uint32_t arg_0_5_id = 0; arg_0_5_id < arg_0_5_container->Length(); arg_0_5_id++)
    {
        if(arg_0_5_container->Get(arg_0_5_id)->IsObject())
        {

            auto field_arg_0_5_elem_1 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
            String::Utf8Value string_arg_0_5_elem_1(field_arg_0_5_elem_1->ToString());
            auto arg_0_5_elem_1 = std::string(*string_arg_0_5_elem_1);

            auto field_arg_0_5_elem_2 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("symbol").ToLocalChecked()).ToLocalChecked();
            String::Utf8Value string_arg_0_5_elem_2(field_arg_0_5_elem_2->ToString());
            auto arg_0_5_elem_2 = std::string(*string_arg_0_5_elem_2);

            auto field_arg_0_5_elem_3 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("code").ToLocalChecked()).ToLocalChecked();
            String::Utf8Value string_arg_0_5_elem_3(field_arg_0_5_elem_3->ToString());
            auto arg_0_5_elem_3 = std::string(*string_arg_0_5_elem_3);

            auto field_arg_0_5_elem_4 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("numberOfDecimal").ToLocalChecked()).ToLocalChecked();
            auto arg_0_5_elem_4 = Nan::To<int32_t>(field_arg_0_5_elem_4).FromJust();
            CurrencyUnit arg_0_5_elem(arg_0_5_elem_1, arg_0_5_elem_2, arg_0_5_elem_3, arg_0_5_elem_4);

            arg_0_5.emplace_back(arg_0_5_elem);
        }
    }


    auto field_arg_0_6 = Nan::Get(info[0]->ToObject(), Nan::New<String>("bitcoinLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_0_6 = std::experimental::optional<BitcoinLikeNetworkParameters>();
    if(!field_arg_0_6->IsNull())
    {

        auto field_opt_arg_0_6_1 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        String::Utf8Value string_opt_arg_0_6_1(field_opt_arg_0_6_1->ToString());
        auto opt_arg_0_6_1 = std::string(*string_opt_arg_0_6_1);

        auto field_opt_arg_0_6_2 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("P2PKHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_2;
        Local<Array> opt_arg_0_6_2_container = Local<Array>::Cast(field_opt_arg_0_6_2);
        for(uint32_t opt_arg_0_6_2_id = 0; opt_arg_0_6_2_id < opt_arg_0_6_2_container->Length(); opt_arg_0_6_2_id++)
        {
            if(opt_arg_0_6_2_container->Get(opt_arg_0_6_2_id)->IsUint32())
            {
                auto opt_arg_0_6_2_elem = Nan::To<uint32_t>(opt_arg_0_6_2_container->Get(opt_arg_0_6_2_id)).FromJust();
                opt_arg_0_6_2.emplace_back(opt_arg_0_6_2_elem);
            }
        }


        auto field_opt_arg_0_6_3 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("P2SHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_3;
        Local<Array> opt_arg_0_6_3_container = Local<Array>::Cast(field_opt_arg_0_6_3);
        for(uint32_t opt_arg_0_6_3_id = 0; opt_arg_0_6_3_id < opt_arg_0_6_3_container->Length(); opt_arg_0_6_3_id++)
        {
            if(opt_arg_0_6_3_container->Get(opt_arg_0_6_3_id)->IsUint32())
            {
                auto opt_arg_0_6_3_elem = Nan::To<uint32_t>(opt_arg_0_6_3_container->Get(opt_arg_0_6_3_id)).FromJust();
                opt_arg_0_6_3.emplace_back(opt_arg_0_6_3_elem);
            }
        }


        auto field_opt_arg_0_6_4 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_4;
        Local<Array> opt_arg_0_6_4_container = Local<Array>::Cast(field_opt_arg_0_6_4);
        for(uint32_t opt_arg_0_6_4_id = 0; opt_arg_0_6_4_id < opt_arg_0_6_4_container->Length(); opt_arg_0_6_4_id++)
        {
            if(opt_arg_0_6_4_container->Get(opt_arg_0_6_4_id)->IsUint32())
            {
                auto opt_arg_0_6_4_elem = Nan::To<uint32_t>(opt_arg_0_6_4_container->Get(opt_arg_0_6_4_id)).FromJust();
                opt_arg_0_6_4.emplace_back(opt_arg_0_6_4_elem);
            }
        }


        auto field_opt_arg_0_6_5 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("FeePolicy").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_5 = (ledger::core::api::BitcoinLikeFeePolicy)Nan::To<int>(field_opt_arg_0_6_5).FromJust();

        auto field_opt_arg_0_6_6 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("DustAmount").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_6 = Nan::To<int64_t>(field_opt_arg_0_6_6).FromJust();

        auto field_opt_arg_0_6_7 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        String::Utf8Value string_opt_arg_0_6_7(field_opt_arg_0_6_7->ToString());
        auto opt_arg_0_6_7 = std::string(*string_opt_arg_0_6_7);

        auto field_opt_arg_0_6_8 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("UsesTimestampedTransaction").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_8 = Nan::To<bool>(field_opt_arg_0_6_8).FromJust();

        auto field_opt_arg_0_6_9 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("SigHash").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_9;
        Local<Array> opt_arg_0_6_9_container = Local<Array>::Cast(field_opt_arg_0_6_9);
        for(uint32_t opt_arg_0_6_9_id = 0; opt_arg_0_6_9_id < opt_arg_0_6_9_container->Length(); opt_arg_0_6_9_id++)
        {
            if(opt_arg_0_6_9_container->Get(opt_arg_0_6_9_id)->IsUint32())
            {
                auto opt_arg_0_6_9_elem = Nan::To<uint32_t>(opt_arg_0_6_9_container->Get(opt_arg_0_6_9_id)).FromJust();
                opt_arg_0_6_9.emplace_back(opt_arg_0_6_9_elem);
            }
        }

        BitcoinLikeNetworkParameters opt_arg_0_6(opt_arg_0_6_1, opt_arg_0_6_2, opt_arg_0_6_3, opt_arg_0_6_4, opt_arg_0_6_5, opt_arg_0_6_6, opt_arg_0_6_7, opt_arg_0_6_8, opt_arg_0_6_9);

        arg_0_6.emplace(opt_arg_0_6);
    }

    Currency arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4, arg_0_5, arg_0_6);

    vector<uint8_t> arg_1;
    Local<Array> arg_1_container = Local<Array>::Cast(info[1]);
    for(uint32_t arg_1_id = 0; arg_1_id < arg_1_container->Length(); arg_1_id++)
    {
        if(arg_1_container->Get(arg_1_id)->IsUint32())
        {
            auto arg_1_elem = Nan::To<uint32_t>(arg_1_container->Get(arg_1_id)).FromJust();
            arg_1.emplace_back(arg_1_elem);
        }
    }


    auto result = BitcoinLikeTransactionBuilder::parseRawUnsignedTransaction(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2_wrap = NJSBitcoinLikeTransaction::wrap(result);
    auto arg_2 = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransaction>(arg_2_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_2);
}

NAN_METHOD(NJSBitcoinLikeTransactionBuilder::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionBuilder function can only be called as constructor (use New)");
    }
    NJSBitcoinLikeTransactionBuilder *node_instance = new NJSBitcoinLikeTransactionBuilder(nullptr);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSBitcoinLikeTransactionBuilder::BitcoinLikeTransactionBuilder_prototype;

Handle<Object> NJSBitcoinLikeTransactionBuilder::wrap(const std::shared_ptr<ledger::core::api::BitcoinLikeTransactionBuilder> &object) {
    Nan::HandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(BitcoinLikeTransactionBuilder_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSBitcoinLikeTransactionBuilder *new_obj = new NJSBitcoinLikeTransactionBuilder(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
            new_obj->Ref();
        }
    }
    else
    {
        Nan::ThrowError("NJSBitcoinLikeTransactionBuilder::wrap: object template not valid");
    }
    return obj;
}

NAN_METHOD(NJSBitcoinLikeTransactionBuilder::isNull) {
    NJSBitcoinLikeTransactionBuilder* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionBuilder>(info.This());
    auto cpp_implementation = obj->getCppImpl();
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSBitcoinLikeTransactionBuilder::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSBitcoinLikeTransactionBuilder::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSBitcoinLikeTransactionBuilder").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"addInput", addInput);
    Nan::SetPrototypeMethod(func_template,"addOutput", addOutput);
    Nan::SetPrototypeMethod(func_template,"addChangePath", addChangePath);
    Nan::SetPrototypeMethod(func_template,"excludeUtxo", excludeUtxo);
    Nan::SetPrototypeMethod(func_template,"setNumberOfChangeAddresses", setNumberOfChangeAddresses);
    Nan::SetPrototypeMethod(func_template,"setMaxAmountOnChange", setMaxAmountOnChange);
    Nan::SetPrototypeMethod(func_template,"setMinAmountOnChange", setMinAmountOnChange);
    Nan::SetPrototypeMethod(func_template,"pickInputs", pickInputs);
    Nan::SetPrototypeMethod(func_template,"sendToAddress", sendToAddress);
    Nan::SetPrototypeMethod(func_template,"setFeesPerByte", setFeesPerByte);
    Nan::SetPrototypeMethod(func_template,"build", build);
    Nan::SetPrototypeMethod(func_template,"clone", clone);
    Nan::SetPrototypeMethod(func_template,"reset", reset);
    Nan::SetPrototypeMethod(func_template,"parseRawUnsignedTransaction", parseRawUnsignedTransaction);
    //Set object prototype
    BitcoinLikeTransactionBuilder_prototype.Reset(objectTemplate);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);

    //Add template to target
    target->Set(Nan::New<String>("NJSBitcoinLikeTransactionBuilder").ToLocalChecked(), func_template->GetFunction());
}
