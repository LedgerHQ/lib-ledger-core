// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from amount.djinni

#include "NJSAmountCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSAmount::toBigInt) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAmount::toBigInt needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSAmount* obj = Nan::ObjectWrap::Unwrap<NJSAmount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAmount::toBigInt : implementation of Amount is not valid");
    }

    auto result = cpp_impl->toBigInt();

    //Wrap result in node object
    auto arg_0_wrap = NJSBigInt::wrap(result);
    auto arg_0 = Nan::ObjectWrap::Unwrap<NJSBigInt>(arg_0_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAmount::getCurrency) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAmount::getCurrency needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSAmount* obj = Nan::ObjectWrap::Unwrap<NJSAmount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAmount::getCurrency : implementation of Amount is not valid");
    }

    auto result = cpp_impl->getCurrency();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<Integer>((int)result.walletType);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("walletType").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<String>(result.name).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("name").ToLocalChecked(), arg_0_2);
    auto arg_0_3 = Nan::New<Int32>(result.bip44CoinType);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("bip44CoinType").ToLocalChecked(), arg_0_3);
    auto arg_0_4 = Nan::New<String>(result.paymentUriScheme).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("paymentUriScheme").ToLocalChecked(), arg_0_4);
    Local<Array> arg_0_5 = Nan::New<Array>();
    for(size_t arg_0_5_id = 0; arg_0_5_id < result.units.size(); arg_0_5_id++)
    {
        auto arg_0_5_elem = Nan::New<Object>();
        auto arg_0_5_elem_1 = Nan::New<String>(result.units[arg_0_5_id].name).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_5_elem, Nan::New<String>("name").ToLocalChecked(), arg_0_5_elem_1);
        auto arg_0_5_elem_2 = Nan::New<String>(result.units[arg_0_5_id].symbol).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_5_elem, Nan::New<String>("symbol").ToLocalChecked(), arg_0_5_elem_2);
        auto arg_0_5_elem_3 = Nan::New<String>(result.units[arg_0_5_id].code).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_5_elem, Nan::New<String>("code").ToLocalChecked(), arg_0_5_elem_3);
        auto arg_0_5_elem_4 = Nan::New<Int32>(result.units[arg_0_5_id].numberOfDecimal);
        Nan::DefineOwnProperty(arg_0_5_elem, Nan::New<String>("numberOfDecimal").ToLocalChecked(), arg_0_5_elem_4);

        arg_0_5->Set((int)arg_0_5_id,arg_0_5_elem);
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("units").ToLocalChecked(), arg_0_5);
    Local<Value> arg_0_6;
    if(result.bitcoinLikeNetworkParameters)
    {
        auto arg_0_6_optional = (result.bitcoinLikeNetworkParameters).value();
        auto arg_0_6_tmp = Nan::New<Object>();
        auto arg_0_6_tmp_1 = Nan::New<String>(arg_0_6_optional.Identifier).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("Identifier").ToLocalChecked(), arg_0_6_tmp_1);
        Local<Array> arg_0_6_tmp_2 = Nan::New<Array>();
        for(size_t arg_0_6_tmp_2_id = 0; arg_0_6_tmp_2_id < arg_0_6_optional.P2PKHVersion.size(); arg_0_6_tmp_2_id++)
        {
            auto arg_0_6_tmp_2_elem = Nan::New<Uint32>(arg_0_6_optional.P2PKHVersion[arg_0_6_tmp_2_id]);
            arg_0_6_tmp_2->Set((int)arg_0_6_tmp_2_id,arg_0_6_tmp_2_elem);
        }

        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("P2PKHVersion").ToLocalChecked(), arg_0_6_tmp_2);
        Local<Array> arg_0_6_tmp_3 = Nan::New<Array>();
        for(size_t arg_0_6_tmp_3_id = 0; arg_0_6_tmp_3_id < arg_0_6_optional.P2SHVersion.size(); arg_0_6_tmp_3_id++)
        {
            auto arg_0_6_tmp_3_elem = Nan::New<Uint32>(arg_0_6_optional.P2SHVersion[arg_0_6_tmp_3_id]);
            arg_0_6_tmp_3->Set((int)arg_0_6_tmp_3_id,arg_0_6_tmp_3_elem);
        }

        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("P2SHVersion").ToLocalChecked(), arg_0_6_tmp_3);
        Local<Array> arg_0_6_tmp_4 = Nan::New<Array>();
        for(size_t arg_0_6_tmp_4_id = 0; arg_0_6_tmp_4_id < arg_0_6_optional.XPUBVersion.size(); arg_0_6_tmp_4_id++)
        {
            auto arg_0_6_tmp_4_elem = Nan::New<Uint32>(arg_0_6_optional.XPUBVersion[arg_0_6_tmp_4_id]);
            arg_0_6_tmp_4->Set((int)arg_0_6_tmp_4_id,arg_0_6_tmp_4_elem);
        }

        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("XPUBVersion").ToLocalChecked(), arg_0_6_tmp_4);
        auto arg_0_6_tmp_5 = Nan::New<Integer>((int)arg_0_6_optional.FeePolicy);
        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("FeePolicy").ToLocalChecked(), arg_0_6_tmp_5);
        auto arg_0_6_tmp_6 = Nan::New<Number>(arg_0_6_optional.DustAmount);
        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("DustAmount").ToLocalChecked(), arg_0_6_tmp_6);
        auto arg_0_6_tmp_7 = Nan::New<String>(arg_0_6_optional.MessagePrefix).ToLocalChecked();
        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("MessagePrefix").ToLocalChecked(), arg_0_6_tmp_7);
        auto arg_0_6_tmp_8 = Nan::New<Boolean>(arg_0_6_optional.UsesTimestampedTransaction);
        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("UsesTimestampedTransaction").ToLocalChecked(), arg_0_6_tmp_8);
        auto arg_0_6_tmp_9 = Nan::New<Number>(arg_0_6_optional.TimestampDelay);
        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("TimestampDelay").ToLocalChecked(), arg_0_6_tmp_9);
        Local<Array> arg_0_6_tmp_10 = Nan::New<Array>();
        for(size_t arg_0_6_tmp_10_id = 0; arg_0_6_tmp_10_id < arg_0_6_optional.SigHash.size(); arg_0_6_tmp_10_id++)
        {
            auto arg_0_6_tmp_10_elem = Nan::New<Uint32>(arg_0_6_optional.SigHash[arg_0_6_tmp_10_id]);
            arg_0_6_tmp_10->Set((int)arg_0_6_tmp_10_id,arg_0_6_tmp_10_elem);
        }

        Nan::DefineOwnProperty(arg_0_6_tmp, Nan::New<String>("SigHash").ToLocalChecked(), arg_0_6_tmp_10);

        arg_0_6 = arg_0_6_tmp;
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("bitcoinLikeNetworkParameters").ToLocalChecked(), arg_0_6);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAmount::getUnit) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAmount::getUnit needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSAmount* obj = Nan::ObjectWrap::Unwrap<NJSAmount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAmount::getUnit : implementation of Amount is not valid");
    }

    auto result = cpp_impl->getUnit();

    //Wrap result in node object
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<String>(result.name).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("name").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<String>(result.symbol).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("symbol").ToLocalChecked(), arg_0_2);
    auto arg_0_3 = Nan::New<String>(result.code).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("code").ToLocalChecked(), arg_0_3);
    auto arg_0_4 = Nan::New<Int32>(result.numberOfDecimal);
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("numberOfDecimal").ToLocalChecked(), arg_0_4);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAmount::toUnit) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSAmount::toUnit needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
    String::Utf8Value string_arg_0_1(field_arg_0_1->ToString());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(), Nan::New<String>("symbol").ToLocalChecked()).ToLocalChecked();
    String::Utf8Value string_arg_0_2(field_arg_0_2->ToString());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(), Nan::New<String>("code").ToLocalChecked()).ToLocalChecked();
    String::Utf8Value string_arg_0_3(field_arg_0_3->ToString());
    auto arg_0_3 = std::string(*string_arg_0_3);

    auto field_arg_0_4 = Nan::Get(info[0]->ToObject(), Nan::New<String>("numberOfDecimal").ToLocalChecked()).ToLocalChecked();
    auto arg_0_4 = Nan::To<int32_t>(field_arg_0_4).FromJust();
    CurrencyUnit arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSAmount* obj = Nan::ObjectWrap::Unwrap<NJSAmount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAmount::toUnit : implementation of Amount is not valid");
    }

    auto result = cpp_impl->toUnit(arg_0);

    //Wrap result in node object
    auto arg_1_wrap = NJSAmount::wrap(result);
    auto arg_1 = Nan::ObjectWrap::Unwrap<NJSAmount>(arg_1_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSAmount::toMagnitude) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSAmount::toMagnitude needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int32_t>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSAmount* obj = Nan::ObjectWrap::Unwrap<NJSAmount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAmount::toMagnitude : implementation of Amount is not valid");
    }

    auto result = cpp_impl->toMagnitude(arg_0);

    //Wrap result in node object
    auto arg_1_wrap = NJSAmount::wrap(result);
    auto arg_1 = Nan::ObjectWrap::Unwrap<NJSAmount>(arg_1_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSAmount::toString) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAmount::toString needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSAmount* obj = Nan::ObjectWrap::Unwrap<NJSAmount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAmount::toString : implementation of Amount is not valid");
    }

    auto result = cpp_impl->toString();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAmount::toLong) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAmount::toLong needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSAmount* obj = Nan::ObjectWrap::Unwrap<NJSAmount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAmount::toLong : implementation of Amount is not valid");
    }

    auto result = cpp_impl->toLong();

    //Wrap result in node object
    auto arg_0 = Nan::New<Number>(result);

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAmount::toDouble) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSAmount::toDouble needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSAmount* obj = Nan::ObjectWrap::Unwrap<NJSAmount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAmount::toDouble : implementation of Amount is not valid");
    }

    auto result = cpp_impl->toDouble();

    //Wrap result in node object
    auto arg_0 = Nan::New<Number>(result);

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSAmount::format) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSAmount::format needs 2 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(), Nan::New<String>("DecimalSeparator").ToLocalChecked()).ToLocalChecked();
    String::Utf8Value string_arg_0_1(field_arg_0_1->ToString());
    auto arg_0_1 = std::string(*string_arg_0_1);

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(), Nan::New<String>("ThousandsSeparator").ToLocalChecked()).ToLocalChecked();
    String::Utf8Value string_arg_0_2(field_arg_0_2->ToString());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(), Nan::New<String>("IsPrefixedByCurrencySymbol").ToLocalChecked()).ToLocalChecked();
    auto arg_0_3 = Nan::To<bool>(field_arg_0_3).FromJust();
    Locale arg_0(arg_0_1, arg_0_2, arg_0_3);

    auto arg_1 = std::experimental::optional<FormatRules>();
    if(!info[1]->IsNull())
    {

        auto field_opt_arg_1_1 = Nan::Get(info[1]->ToObject(), Nan::New<String>("roundingMode").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_1 = (ledger::core::api::RoundingMode)Nan::To<int>(field_opt_arg_1_1).FromJust();

        auto field_opt_arg_1_2 = Nan::Get(info[1]->ToObject(), Nan::New<String>("maxNumberOfDecimals").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_1_2 = Nan::To<int32_t>(field_opt_arg_1_2).FromJust();
        FormatRules opt_arg_1(opt_arg_1_1, opt_arg_1_2);

        arg_1.emplace(opt_arg_1);
    }


    //Unwrap current object and retrieve its Cpp Implementation
    NJSAmount* obj = Nan::ObjectWrap::Unwrap<NJSAmount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSAmount::format : implementation of Amount is not valid");
    }

    auto result = cpp_impl->format(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSAmount::fromHex) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSAmount::fromHex needs 2 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(), Nan::New<String>("walletType").ToLocalChecked()).ToLocalChecked();
    auto arg_0_1 = (ledger::core::api::WalletType)Nan::To<int>(field_arg_0_1).FromJust();

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
    String::Utf8Value string_arg_0_2(field_arg_0_2->ToString());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(), Nan::New<String>("bip44CoinType").ToLocalChecked()).ToLocalChecked();
    auto arg_0_3 = Nan::To<int32_t>(field_arg_0_3).FromJust();

    auto field_arg_0_4 = Nan::Get(info[0]->ToObject(), Nan::New<String>("paymentUriScheme").ToLocalChecked()).ToLocalChecked();
    String::Utf8Value string_arg_0_4(field_arg_0_4->ToString());
    auto arg_0_4 = std::string(*string_arg_0_4);

    auto field_arg_0_5 = Nan::Get(info[0]->ToObject(), Nan::New<String>("units").ToLocalChecked()).ToLocalChecked();
    vector<CurrencyUnit> arg_0_5;
    Local<Array> arg_0_5_container = Local<Array>::Cast(field_arg_0_5);
    for(uint32_t arg_0_5_id = 0; arg_0_5_id < arg_0_5_container->Length(); arg_0_5_id++)
    {
        if(arg_0_5_container->Get(arg_0_5_id)->IsObject())
        {

            auto field_arg_0_5_elem_1 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
            String::Utf8Value string_arg_0_5_elem_1(field_arg_0_5_elem_1->ToString());
            auto arg_0_5_elem_1 = std::string(*string_arg_0_5_elem_1);

            auto field_arg_0_5_elem_2 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("symbol").ToLocalChecked()).ToLocalChecked();
            String::Utf8Value string_arg_0_5_elem_2(field_arg_0_5_elem_2->ToString());
            auto arg_0_5_elem_2 = std::string(*string_arg_0_5_elem_2);

            auto field_arg_0_5_elem_3 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("code").ToLocalChecked()).ToLocalChecked();
            String::Utf8Value string_arg_0_5_elem_3(field_arg_0_5_elem_3->ToString());
            auto arg_0_5_elem_3 = std::string(*string_arg_0_5_elem_3);

            auto field_arg_0_5_elem_4 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("numberOfDecimal").ToLocalChecked()).ToLocalChecked();
            auto arg_0_5_elem_4 = Nan::To<int32_t>(field_arg_0_5_elem_4).FromJust();
            CurrencyUnit arg_0_5_elem(arg_0_5_elem_1, arg_0_5_elem_2, arg_0_5_elem_3, arg_0_5_elem_4);

            arg_0_5.emplace_back(arg_0_5_elem);
        }
    }


    auto field_arg_0_6 = Nan::Get(info[0]->ToObject(), Nan::New<String>("bitcoinLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_0_6 = std::experimental::optional<BitcoinLikeNetworkParameters>();
    if(!field_arg_0_6->IsNull())
    {

        auto field_opt_arg_0_6_1 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        String::Utf8Value string_opt_arg_0_6_1(field_opt_arg_0_6_1->ToString());
        auto opt_arg_0_6_1 = std::string(*string_opt_arg_0_6_1);

        auto field_opt_arg_0_6_2 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("P2PKHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_2;
        Local<Array> opt_arg_0_6_2_container = Local<Array>::Cast(field_opt_arg_0_6_2);
        for(uint32_t opt_arg_0_6_2_id = 0; opt_arg_0_6_2_id < opt_arg_0_6_2_container->Length(); opt_arg_0_6_2_id++)
        {
            if(opt_arg_0_6_2_container->Get(opt_arg_0_6_2_id)->IsUint32())
            {
                auto opt_arg_0_6_2_elem = Nan::To<uint32_t>(opt_arg_0_6_2_container->Get(opt_arg_0_6_2_id)).FromJust();
                opt_arg_0_6_2.emplace_back(opt_arg_0_6_2_elem);
            }
        }


        auto field_opt_arg_0_6_3 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("P2SHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_3;
        Local<Array> opt_arg_0_6_3_container = Local<Array>::Cast(field_opt_arg_0_6_3);
        for(uint32_t opt_arg_0_6_3_id = 0; opt_arg_0_6_3_id < opt_arg_0_6_3_container->Length(); opt_arg_0_6_3_id++)
        {
            if(opt_arg_0_6_3_container->Get(opt_arg_0_6_3_id)->IsUint32())
            {
                auto opt_arg_0_6_3_elem = Nan::To<uint32_t>(opt_arg_0_6_3_container->Get(opt_arg_0_6_3_id)).FromJust();
                opt_arg_0_6_3.emplace_back(opt_arg_0_6_3_elem);
            }
        }


        auto field_opt_arg_0_6_4 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_4;
        Local<Array> opt_arg_0_6_4_container = Local<Array>::Cast(field_opt_arg_0_6_4);
        for(uint32_t opt_arg_0_6_4_id = 0; opt_arg_0_6_4_id < opt_arg_0_6_4_container->Length(); opt_arg_0_6_4_id++)
        {
            if(opt_arg_0_6_4_container->Get(opt_arg_0_6_4_id)->IsUint32())
            {
                auto opt_arg_0_6_4_elem = Nan::To<uint32_t>(opt_arg_0_6_4_container->Get(opt_arg_0_6_4_id)).FromJust();
                opt_arg_0_6_4.emplace_back(opt_arg_0_6_4_elem);
            }
        }


        auto field_opt_arg_0_6_5 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("FeePolicy").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_5 = (ledger::core::api::BitcoinLikeFeePolicy)Nan::To<int>(field_opt_arg_0_6_5).FromJust();

        auto field_opt_arg_0_6_6 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("DustAmount").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_6 = Nan::To<int64_t>(field_opt_arg_0_6_6).FromJust();

        auto field_opt_arg_0_6_7 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        String::Utf8Value string_opt_arg_0_6_7(field_opt_arg_0_6_7->ToString());
        auto opt_arg_0_6_7 = std::string(*string_opt_arg_0_6_7);

        auto field_opt_arg_0_6_8 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("UsesTimestampedTransaction").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_8 = Nan::To<bool>(field_opt_arg_0_6_8).FromJust();

        auto field_opt_arg_0_6_9 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_9 = Nan::To<int64_t>(field_opt_arg_0_6_9).FromJust();

        auto field_opt_arg_0_6_10 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("SigHash").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_10;
        Local<Array> opt_arg_0_6_10_container = Local<Array>::Cast(field_opt_arg_0_6_10);
        for(uint32_t opt_arg_0_6_10_id = 0; opt_arg_0_6_10_id < opt_arg_0_6_10_container->Length(); opt_arg_0_6_10_id++)
        {
            if(opt_arg_0_6_10_container->Get(opt_arg_0_6_10_id)->IsUint32())
            {
                auto opt_arg_0_6_10_elem = Nan::To<uint32_t>(opt_arg_0_6_10_container->Get(opt_arg_0_6_10_id)).FromJust();
                opt_arg_0_6_10.emplace_back(opt_arg_0_6_10_elem);
            }
        }

        BitcoinLikeNetworkParameters opt_arg_0_6(opt_arg_0_6_1, opt_arg_0_6_2, opt_arg_0_6_3, opt_arg_0_6_4, opt_arg_0_6_5, opt_arg_0_6_6, opt_arg_0_6_7, opt_arg_0_6_8, opt_arg_0_6_9, opt_arg_0_6_10);

        arg_0_6.emplace(opt_arg_0_6);
    }

    Currency arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4, arg_0_5, arg_0_6);

    String::Utf8Value string_arg_1(info[1]->ToString());
    auto arg_1 = std::string(*string_arg_1);

    auto result = Amount::fromHex(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2_wrap = NJSAmount::wrap(result);
    auto arg_2 = Nan::ObjectWrap::Unwrap<NJSAmount>(arg_2_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSAmount::fromLong) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSAmount::fromLong needs 2 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(), Nan::New<String>("walletType").ToLocalChecked()).ToLocalChecked();
    auto arg_0_1 = (ledger::core::api::WalletType)Nan::To<int>(field_arg_0_1).FromJust();

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
    String::Utf8Value string_arg_0_2(field_arg_0_2->ToString());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(), Nan::New<String>("bip44CoinType").ToLocalChecked()).ToLocalChecked();
    auto arg_0_3 = Nan::To<int32_t>(field_arg_0_3).FromJust();

    auto field_arg_0_4 = Nan::Get(info[0]->ToObject(), Nan::New<String>("paymentUriScheme").ToLocalChecked()).ToLocalChecked();
    String::Utf8Value string_arg_0_4(field_arg_0_4->ToString());
    auto arg_0_4 = std::string(*string_arg_0_4);

    auto field_arg_0_5 = Nan::Get(info[0]->ToObject(), Nan::New<String>("units").ToLocalChecked()).ToLocalChecked();
    vector<CurrencyUnit> arg_0_5;
    Local<Array> arg_0_5_container = Local<Array>::Cast(field_arg_0_5);
    for(uint32_t arg_0_5_id = 0; arg_0_5_id < arg_0_5_container->Length(); arg_0_5_id++)
    {
        if(arg_0_5_container->Get(arg_0_5_id)->IsObject())
        {

            auto field_arg_0_5_elem_1 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
            String::Utf8Value string_arg_0_5_elem_1(field_arg_0_5_elem_1->ToString());
            auto arg_0_5_elem_1 = std::string(*string_arg_0_5_elem_1);

            auto field_arg_0_5_elem_2 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("symbol").ToLocalChecked()).ToLocalChecked();
            String::Utf8Value string_arg_0_5_elem_2(field_arg_0_5_elem_2->ToString());
            auto arg_0_5_elem_2 = std::string(*string_arg_0_5_elem_2);

            auto field_arg_0_5_elem_3 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("code").ToLocalChecked()).ToLocalChecked();
            String::Utf8Value string_arg_0_5_elem_3(field_arg_0_5_elem_3->ToString());
            auto arg_0_5_elem_3 = std::string(*string_arg_0_5_elem_3);

            auto field_arg_0_5_elem_4 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("numberOfDecimal").ToLocalChecked()).ToLocalChecked();
            auto arg_0_5_elem_4 = Nan::To<int32_t>(field_arg_0_5_elem_4).FromJust();
            CurrencyUnit arg_0_5_elem(arg_0_5_elem_1, arg_0_5_elem_2, arg_0_5_elem_3, arg_0_5_elem_4);

            arg_0_5.emplace_back(arg_0_5_elem);
        }
    }


    auto field_arg_0_6 = Nan::Get(info[0]->ToObject(), Nan::New<String>("bitcoinLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_0_6 = std::experimental::optional<BitcoinLikeNetworkParameters>();
    if(!field_arg_0_6->IsNull())
    {

        auto field_opt_arg_0_6_1 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        String::Utf8Value string_opt_arg_0_6_1(field_opt_arg_0_6_1->ToString());
        auto opt_arg_0_6_1 = std::string(*string_opt_arg_0_6_1);

        auto field_opt_arg_0_6_2 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("P2PKHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_2;
        Local<Array> opt_arg_0_6_2_container = Local<Array>::Cast(field_opt_arg_0_6_2);
        for(uint32_t opt_arg_0_6_2_id = 0; opt_arg_0_6_2_id < opt_arg_0_6_2_container->Length(); opt_arg_0_6_2_id++)
        {
            if(opt_arg_0_6_2_container->Get(opt_arg_0_6_2_id)->IsUint32())
            {
                auto opt_arg_0_6_2_elem = Nan::To<uint32_t>(opt_arg_0_6_2_container->Get(opt_arg_0_6_2_id)).FromJust();
                opt_arg_0_6_2.emplace_back(opt_arg_0_6_2_elem);
            }
        }


        auto field_opt_arg_0_6_3 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("P2SHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_3;
        Local<Array> opt_arg_0_6_3_container = Local<Array>::Cast(field_opt_arg_0_6_3);
        for(uint32_t opt_arg_0_6_3_id = 0; opt_arg_0_6_3_id < opt_arg_0_6_3_container->Length(); opt_arg_0_6_3_id++)
        {
            if(opt_arg_0_6_3_container->Get(opt_arg_0_6_3_id)->IsUint32())
            {
                auto opt_arg_0_6_3_elem = Nan::To<uint32_t>(opt_arg_0_6_3_container->Get(opt_arg_0_6_3_id)).FromJust();
                opt_arg_0_6_3.emplace_back(opt_arg_0_6_3_elem);
            }
        }


        auto field_opt_arg_0_6_4 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_4;
        Local<Array> opt_arg_0_6_4_container = Local<Array>::Cast(field_opt_arg_0_6_4);
        for(uint32_t opt_arg_0_6_4_id = 0; opt_arg_0_6_4_id < opt_arg_0_6_4_container->Length(); opt_arg_0_6_4_id++)
        {
            if(opt_arg_0_6_4_container->Get(opt_arg_0_6_4_id)->IsUint32())
            {
                auto opt_arg_0_6_4_elem = Nan::To<uint32_t>(opt_arg_0_6_4_container->Get(opt_arg_0_6_4_id)).FromJust();
                opt_arg_0_6_4.emplace_back(opt_arg_0_6_4_elem);
            }
        }


        auto field_opt_arg_0_6_5 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("FeePolicy").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_5 = (ledger::core::api::BitcoinLikeFeePolicy)Nan::To<int>(field_opt_arg_0_6_5).FromJust();

        auto field_opt_arg_0_6_6 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("DustAmount").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_6 = Nan::To<int64_t>(field_opt_arg_0_6_6).FromJust();

        auto field_opt_arg_0_6_7 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        String::Utf8Value string_opt_arg_0_6_7(field_opt_arg_0_6_7->ToString());
        auto opt_arg_0_6_7 = std::string(*string_opt_arg_0_6_7);

        auto field_opt_arg_0_6_8 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("UsesTimestampedTransaction").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_8 = Nan::To<bool>(field_opt_arg_0_6_8).FromJust();

        auto field_opt_arg_0_6_9 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_9 = Nan::To<int64_t>(field_opt_arg_0_6_9).FromJust();

        auto field_opt_arg_0_6_10 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("SigHash").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_10;
        Local<Array> opt_arg_0_6_10_container = Local<Array>::Cast(field_opt_arg_0_6_10);
        for(uint32_t opt_arg_0_6_10_id = 0; opt_arg_0_6_10_id < opt_arg_0_6_10_container->Length(); opt_arg_0_6_10_id++)
        {
            if(opt_arg_0_6_10_container->Get(opt_arg_0_6_10_id)->IsUint32())
            {
                auto opt_arg_0_6_10_elem = Nan::To<uint32_t>(opt_arg_0_6_10_container->Get(opt_arg_0_6_10_id)).FromJust();
                opt_arg_0_6_10.emplace_back(opt_arg_0_6_10_elem);
            }
        }

        BitcoinLikeNetworkParameters opt_arg_0_6(opt_arg_0_6_1, opt_arg_0_6_2, opt_arg_0_6_3, opt_arg_0_6_4, opt_arg_0_6_5, opt_arg_0_6_6, opt_arg_0_6_7, opt_arg_0_6_8, opt_arg_0_6_9, opt_arg_0_6_10);

        arg_0_6.emplace(opt_arg_0_6);
    }

    Currency arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4, arg_0_5, arg_0_6);

    auto arg_1 = Nan::To<int64_t>(info[1]).FromJust();

    auto result = Amount::fromLong(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2_wrap = NJSAmount::wrap(result);
    auto arg_2 = Nan::ObjectWrap::Unwrap<NJSAmount>(arg_2_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_2);
}

NAN_METHOD(NJSAmount::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSAmount function can only be called as constructor (use New)");
    }

    //Check if NJSAmount::New called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSAmount::New needs same number of arguments as ledger::core::api::Amount::fromHex method");
    }

    //Unwrap objects to get C++ classes

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(), Nan::New<String>("walletType").ToLocalChecked()).ToLocalChecked();
    auto arg_0_1 = (ledger::core::api::WalletType)Nan::To<int>(field_arg_0_1).FromJust();

    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
    String::Utf8Value string_arg_0_2(field_arg_0_2->ToString());
    auto arg_0_2 = std::string(*string_arg_0_2);

    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(), Nan::New<String>("bip44CoinType").ToLocalChecked()).ToLocalChecked();
    auto arg_0_3 = Nan::To<int32_t>(field_arg_0_3).FromJust();

    auto field_arg_0_4 = Nan::Get(info[0]->ToObject(), Nan::New<String>("paymentUriScheme").ToLocalChecked()).ToLocalChecked();
    String::Utf8Value string_arg_0_4(field_arg_0_4->ToString());
    auto arg_0_4 = std::string(*string_arg_0_4);

    auto field_arg_0_5 = Nan::Get(info[0]->ToObject(), Nan::New<String>("units").ToLocalChecked()).ToLocalChecked();
    vector<CurrencyUnit> arg_0_5;
    Local<Array> arg_0_5_container = Local<Array>::Cast(field_arg_0_5);
    for(uint32_t arg_0_5_id = 0; arg_0_5_id < arg_0_5_container->Length(); arg_0_5_id++)
    {
        if(arg_0_5_container->Get(arg_0_5_id)->IsObject())
        {

            auto field_arg_0_5_elem_1 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("name").ToLocalChecked()).ToLocalChecked();
            String::Utf8Value string_arg_0_5_elem_1(field_arg_0_5_elem_1->ToString());
            auto arg_0_5_elem_1 = std::string(*string_arg_0_5_elem_1);

            auto field_arg_0_5_elem_2 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("symbol").ToLocalChecked()).ToLocalChecked();
            String::Utf8Value string_arg_0_5_elem_2(field_arg_0_5_elem_2->ToString());
            auto arg_0_5_elem_2 = std::string(*string_arg_0_5_elem_2);

            auto field_arg_0_5_elem_3 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("code").ToLocalChecked()).ToLocalChecked();
            String::Utf8Value string_arg_0_5_elem_3(field_arg_0_5_elem_3->ToString());
            auto arg_0_5_elem_3 = std::string(*string_arg_0_5_elem_3);

            auto field_arg_0_5_elem_4 = Nan::Get(arg_0_5_container->Get(arg_0_5_id)->ToObject(), Nan::New<String>("numberOfDecimal").ToLocalChecked()).ToLocalChecked();
            auto arg_0_5_elem_4 = Nan::To<int32_t>(field_arg_0_5_elem_4).FromJust();
            CurrencyUnit arg_0_5_elem(arg_0_5_elem_1, arg_0_5_elem_2, arg_0_5_elem_3, arg_0_5_elem_4);

            arg_0_5.emplace_back(arg_0_5_elem);
        }
    }


    auto field_arg_0_6 = Nan::Get(info[0]->ToObject(), Nan::New<String>("bitcoinLikeNetworkParameters").ToLocalChecked()).ToLocalChecked();
    auto arg_0_6 = std::experimental::optional<BitcoinLikeNetworkParameters>();
    if(!field_arg_0_6->IsNull())
    {

        auto field_opt_arg_0_6_1 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("Identifier").ToLocalChecked()).ToLocalChecked();
        String::Utf8Value string_opt_arg_0_6_1(field_opt_arg_0_6_1->ToString());
        auto opt_arg_0_6_1 = std::string(*string_opt_arg_0_6_1);

        auto field_opt_arg_0_6_2 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("P2PKHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_2;
        Local<Array> opt_arg_0_6_2_container = Local<Array>::Cast(field_opt_arg_0_6_2);
        for(uint32_t opt_arg_0_6_2_id = 0; opt_arg_0_6_2_id < opt_arg_0_6_2_container->Length(); opt_arg_0_6_2_id++)
        {
            if(opt_arg_0_6_2_container->Get(opt_arg_0_6_2_id)->IsUint32())
            {
                auto opt_arg_0_6_2_elem = Nan::To<uint32_t>(opt_arg_0_6_2_container->Get(opt_arg_0_6_2_id)).FromJust();
                opt_arg_0_6_2.emplace_back(opt_arg_0_6_2_elem);
            }
        }


        auto field_opt_arg_0_6_3 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("P2SHVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_3;
        Local<Array> opt_arg_0_6_3_container = Local<Array>::Cast(field_opt_arg_0_6_3);
        for(uint32_t opt_arg_0_6_3_id = 0; opt_arg_0_6_3_id < opt_arg_0_6_3_container->Length(); opt_arg_0_6_3_id++)
        {
            if(opt_arg_0_6_3_container->Get(opt_arg_0_6_3_id)->IsUint32())
            {
                auto opt_arg_0_6_3_elem = Nan::To<uint32_t>(opt_arg_0_6_3_container->Get(opt_arg_0_6_3_id)).FromJust();
                opt_arg_0_6_3.emplace_back(opt_arg_0_6_3_elem);
            }
        }


        auto field_opt_arg_0_6_4 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("XPUBVersion").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_4;
        Local<Array> opt_arg_0_6_4_container = Local<Array>::Cast(field_opt_arg_0_6_4);
        for(uint32_t opt_arg_0_6_4_id = 0; opt_arg_0_6_4_id < opt_arg_0_6_4_container->Length(); opt_arg_0_6_4_id++)
        {
            if(opt_arg_0_6_4_container->Get(opt_arg_0_6_4_id)->IsUint32())
            {
                auto opt_arg_0_6_4_elem = Nan::To<uint32_t>(opt_arg_0_6_4_container->Get(opt_arg_0_6_4_id)).FromJust();
                opt_arg_0_6_4.emplace_back(opt_arg_0_6_4_elem);
            }
        }


        auto field_opt_arg_0_6_5 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("FeePolicy").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_5 = (ledger::core::api::BitcoinLikeFeePolicy)Nan::To<int>(field_opt_arg_0_6_5).FromJust();

        auto field_opt_arg_0_6_6 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("DustAmount").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_6 = Nan::To<int64_t>(field_opt_arg_0_6_6).FromJust();

        auto field_opt_arg_0_6_7 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("MessagePrefix").ToLocalChecked()).ToLocalChecked();
        String::Utf8Value string_opt_arg_0_6_7(field_opt_arg_0_6_7->ToString());
        auto opt_arg_0_6_7 = std::string(*string_opt_arg_0_6_7);

        auto field_opt_arg_0_6_8 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("UsesTimestampedTransaction").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_8 = Nan::To<bool>(field_opt_arg_0_6_8).FromJust();

        auto field_opt_arg_0_6_9 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("TimestampDelay").ToLocalChecked()).ToLocalChecked();
        auto opt_arg_0_6_9 = Nan::To<int64_t>(field_opt_arg_0_6_9).FromJust();

        auto field_opt_arg_0_6_10 = Nan::Get(field_arg_0_6->ToObject(), Nan::New<String>("SigHash").ToLocalChecked()).ToLocalChecked();
        vector<uint8_t> opt_arg_0_6_10;
        Local<Array> opt_arg_0_6_10_container = Local<Array>::Cast(field_opt_arg_0_6_10);
        for(uint32_t opt_arg_0_6_10_id = 0; opt_arg_0_6_10_id < opt_arg_0_6_10_container->Length(); opt_arg_0_6_10_id++)
        {
            if(opt_arg_0_6_10_container->Get(opt_arg_0_6_10_id)->IsUint32())
            {
                auto opt_arg_0_6_10_elem = Nan::To<uint32_t>(opt_arg_0_6_10_container->Get(opt_arg_0_6_10_id)).FromJust();
                opt_arg_0_6_10.emplace_back(opt_arg_0_6_10_elem);
            }
        }

        BitcoinLikeNetworkParameters opt_arg_0_6(opt_arg_0_6_1, opt_arg_0_6_2, opt_arg_0_6_3, opt_arg_0_6_4, opt_arg_0_6_5, opt_arg_0_6_6, opt_arg_0_6_7, opt_arg_0_6_8, opt_arg_0_6_9, opt_arg_0_6_10);

        arg_0_6.emplace(opt_arg_0_6);
    }

    Currency arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4, arg_0_5, arg_0_6);

    String::Utf8Value string_arg_1(info[1]->ToString());
    auto arg_1 = std::string(*string_arg_1);

    //Call factory
    auto cpp_instance = ledger::core::api::Amount::fromHex(arg_0,arg_1);
    NJSAmount *node_instance = new NJSAmount(cpp_instance);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSAmount::Amount_prototype;

Handle<Object> NJSAmount::wrap(const std::shared_ptr<ledger::core::api::Amount> &object) {
    Nan::HandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(Amount_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSAmount *new_obj = new NJSAmount(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
            new_obj->Ref();
        }
    }
    else
    {
        Nan::ThrowError("NJSAmount::wrap: object template not valid");
    }
    return obj;
}

NAN_METHOD(NJSAmount::isNull) {
    NJSAmount* obj = Nan::ObjectWrap::Unwrap<NJSAmount>(info.This());
    auto cpp_implementation = obj->getCppImpl();
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSAmount::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSAmount::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSAmount").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"toBigInt", toBigInt);
    Nan::SetPrototypeMethod(func_template,"getCurrency", getCurrency);
    Nan::SetPrototypeMethod(func_template,"getUnit", getUnit);
    Nan::SetPrototypeMethod(func_template,"toUnit", toUnit);
    Nan::SetPrototypeMethod(func_template,"toMagnitude", toMagnitude);
    Nan::SetPrototypeMethod(func_template,"toString", toString);
    Nan::SetPrototypeMethod(func_template,"toLong", toLong);
    Nan::SetPrototypeMethod(func_template,"toDouble", toDouble);
    Nan::SetPrototypeMethod(func_template,"format", format);
    Nan::SetPrototypeMethod(func_template,"fromHex", fromHex);
    Nan::SetPrototypeMethod(func_template,"fromLong", fromLong);
    //Set object prototype
    Amount_prototype.Reset(objectTemplate);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);

    //Add template to target
    target->Set(Nan::New<String>("NJSAmount").ToLocalChecked(), func_template->GetFunction());
}
