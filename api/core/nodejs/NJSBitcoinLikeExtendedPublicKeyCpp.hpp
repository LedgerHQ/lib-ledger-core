// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from addresses.djinni

#ifndef DJINNI_GENERATED_NJSBITCOINLIKEEXTENDEDPUBLICKEY_HPP
#define DJINNI_GENERATED_NJSBITCOINLIKEEXTENDEDPUBLICKEY_HPP


#include "NJSBitcoinLikeAddressCpp.hpp"
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../../../core/src/api/BitcoinLikeExtendedPublicKey.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSBitcoinLikeExtendedPublicKey: public Nan::ObjectWrap {
public:

    static void Initialize(Local<Object> target);
    virtual ~NJSBitcoinLikeExtendedPublicKey() {};
    NJSBitcoinLikeExtendedPublicKey(const std::shared_ptr<ledger::core::api::BitcoinLikeExtendedPublicKey> &iBitcoinLikeExtendedPublicKey):_BitcoinLikeExtendedPublicKey(iBitcoinLikeExtendedPublicKey){};

    static Handle<Object> wrap(const std::shared_ptr<ledger::core::api::BitcoinLikeExtendedPublicKey> &object);
    static Nan::Persistent<ObjectTemplate> BitcoinLikeExtendedPublicKey_prototype;
    std::shared_ptr<ledger::core::api::BitcoinLikeExtendedPublicKey> getCppImpl(){return _BitcoinLikeExtendedPublicKey;};

private:
    static NAN_METHOD(derive);

    static NAN_METHOD(derivePublicKey);

    static NAN_METHOD(deriveHash160);

    static NAN_METHOD(toBase58);

    static NAN_METHOD(getRootPath);

    static NAN_METHOD(New);

    static NAN_METHOD(isNull);
    std::shared_ptr<ledger::core::api::BitcoinLikeExtendedPublicKey> _BitcoinLikeExtendedPublicKey;
};
#endif //DJINNI_GENERATED_NJSBITCOINLIKEEXTENDEDPUBLICKEY_HPP
