// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#import "RCTCoreLGBitcoinLikeTransactionRequest.h"
#import "LGBitcoinLikeTransactionRequest.h"

@implementation RCTCoreLGBitcoinLikeTransactionRequest

//Export module
RCT_EXPORT_MODULE(RCTCoreLGBitcoinLikeTransactionRequest)

@synthesize bridge = _bridge;
-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImplementations = [[NSMutableDictionary alloc] init];
        self.implementationsData = [[NSMutableDictionary alloc] init];
    }
    return self;
}

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGBitcoinLikeTransactionRequest::release, first argument should be an instance of LGBitcoinLikeTransactionRequest", nil);
    }
    [self.objcImplementations removeObjectForKey:currentInstance[@"uid"]];
    resolve(@(YES));
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    NSMutableArray *uuids = [[NSMutableArray alloc] init];
    for (id key in self.objcImplementations)
    {
        [uuids addObject:key];
    }
    NSDictionary *result = @{@"value" : uuids};
    resolve(result);
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self.objcImplementations removeAllObjects];
    resolve(@(YES));
}
RCT_REMAP_METHOD(init, initWithUtxo:(NSArray <NSDictionary *> *)utxo
                            outputs:(NSArray <NSDictionary *> *)outputs
                           baseFees:(nullable NSDictionary *)baseFees
                          totalFees:(nullable NSDictionary *)totalFees
                           lockTime:(nullable NSNumber *)lockTime withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    NSMutableDictionary *implementationsData = [[NSMutableDictionary alloc] init];
    NSMutableArray *field_0 = [[NSMutableArray alloc] init];

    NSMutableArray *field_0_data = [[NSMutableArray alloc] init];

    for (id utxo_elem in utxo)
    {
        RCTCoreLGBitcoinLikeOutput *rctParam_utxo_elem = (RCTCoreLGBitcoinLikeOutput *)[self.bridge moduleForName:@"CoreLGBitcoinLikeOutput"];
        LGBitcoinLikeOutput *field_0_elem = (LGBitcoinLikeOutput *)[rctParam_utxo_elem.objcImplementations objectForKey:utxo_elem[@"uid"]];
        [field_0_data addObject:utxo_elem[@"uid"]];
        [field_0 addObject:field_0_elem];

    }
    [implementationsData setObject:field_0_data forKey:@"utxo"];

    NSMutableArray *field_1 = [[NSMutableArray alloc] init];

    NSMutableArray *field_1_data = [[NSMutableArray alloc] init];

    for (id outputs_elem in outputs)
    {
        RCTCoreLGBitcoinLikeOutput *rctParam_outputs_elem = (RCTCoreLGBitcoinLikeOutput *)[self.bridge moduleForName:@"CoreLGBitcoinLikeOutput"];
        LGBitcoinLikeOutput *field_1_elem = (LGBitcoinLikeOutput *)[rctParam_outputs_elem.objcImplementations objectForKey:outputs_elem[@"uid"]];
        [field_1_data addObject:outputs_elem[@"uid"]];
        [field_1 addObject:field_1_elem];

    }
    [implementationsData setObject:field_1_data forKey:@"outputs"];

    RCTCoreLGAmount *rctParam_baseFees = (RCTCoreLGAmount *)[self.bridge moduleForName:@"CoreLGAmount"];
    LGAmount *field_2 = (LGAmount *)[rctParam_baseFees.objcImplementations objectForKey:baseFees[@"uid"]];
    [implementationsData setObject:baseFees[@"uid"] forKey:@"baseFees"];
    RCTCoreLGAmount *rctParam_totalFees = (RCTCoreLGAmount *)[self.bridge moduleForName:@"CoreLGAmount"];
    LGAmount *field_3 = (LGAmount *)[rctParam_totalFees.objcImplementations objectForKey:totalFees[@"uid"]];
    [implementationsData setObject:totalFees[@"uid"] forKey:@"totalFees"];


    LGBitcoinLikeTransactionRequest * finalResult = [[LGBitcoinLikeTransactionRequest alloc] initWithUtxo:field_0 outputs:field_1 baseFees:field_2 totalFees:field_3 lockTime:lockTime];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGBitcoinLikeTransactionRequest *rctImpl = (RCTCoreLGBitcoinLikeTransactionRequest *)[self.bridge moduleForName:@"CoreLGBitcoinLikeTransactionRequest"];
    [rctImpl.objcImplementations setObject:finalResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreLGBitcoinLikeTransactionRequest", @"uid" : uuid };
    if (result)
    {
        [self.implementationsData setObject:implementationsData forKey:uuid];
        resolve(result);
    }
}

RCT_REMAP_METHOD(getUtxo, getUtxo:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGBitcoinLikeTransactionRequest *objcImpl = (LGBitcoinLikeTransactionRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    NSString *returnUuid = [data objectForKey:@"utxo"];
    NSDictionary *result = @{@"type" : @"CoreNSArray<LGBitcoinLikeOutput *>", @"uid" : returnUuid };
    resolve(result);
}

RCT_REMAP_METHOD(getOutputs, getOutputs:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGBitcoinLikeTransactionRequest *objcImpl = (LGBitcoinLikeTransactionRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    NSString *returnUuid = [data objectForKey:@"outputs"];
    NSDictionary *result = @{@"type" : @"CoreNSArray<LGBitcoinLikeOutput *>", @"uid" : returnUuid };
    resolve(result);
}

RCT_REMAP_METHOD(getBaseFees, getBaseFees:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGBitcoinLikeTransactionRequest *objcImpl = (LGBitcoinLikeTransactionRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    NSString *returnUuid = [data objectForKey:@"baseFees"];
    NSDictionary *result = @{@"type" : @"CoreLGAmount", @"uid" : returnUuid };
    resolve(result);
}

RCT_REMAP_METHOD(getTotalFees, getTotalFees:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGBitcoinLikeTransactionRequest *objcImpl = (LGBitcoinLikeTransactionRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    NSString *returnUuid = [data objectForKey:@"totalFees"];
    NSDictionary *result = @{@"type" : @"CoreLGAmount", @"uid" : returnUuid };
    resolve(result);
}

RCT_REMAP_METHOD(getLockTime, getLockTime:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGBitcoinLikeTransactionRequest *objcImpl = (LGBitcoinLikeTransactionRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.lockTime};
    resolve(result);
}

@end
