// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from addresses.djinni

#import "RCTCoreLGBitcoinLikeAddress.h"


@implementation RCTCoreLGBitcoinLikeAddress
//Export module
RCT_EXPORT_MODULE(RCTCoreLGBitcoinLikeAddress)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGBitcoinLikeAddress alloc] init];
    }
    return self;
}

/**
 * Gets the version of the address (P2SH or P2PKH)
 * @return The version of the address
 */
RCT_REMAP_METHOD(getVersion,getVersionWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getVersion]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeAddress::getVersion", nil);
    }
}

/**
 * Gets the raw hash160 of the public key
 * @return The 20 bytes of the public key hash160
 */
RCT_REMAP_METHOD(getHash160,getHash160WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getHash160]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeAddress::getHash160", nil);
    }
}

/**
 * Gets the network parameters used for serializing the address
 * @return The network parameters of the address
 */
RCT_REMAP_METHOD(getNetworkParameters,getNetworkParametersWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getNetworkParameters]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeAddress::getNetworkParameters", nil);
    }
}

/**
 * Serializes the hash160 into a Base58 encoded address (with checksum)
 * @return The Base58 serialization
 */
RCT_REMAP_METHOD(toBase58,toBase58WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl toBase58]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeAddress::toBase58", nil);
    }
}

/**
 * Serializes the hash160 to a payment uri (i.e bitcoin:16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM)
 * @return A payment uri to this address
 * toPaymentUri(): string;
 * Checks if the given address is a P2SH address
 * @return True if the version byte matches the P2SH byte version of the address network parameters
 */
RCT_REMAP_METHOD(isP2SH,isP2SHWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :@([self.objcImpl isP2SH])};if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeAddress::isP2SH", nil);
    }
}

/**
 * Checks if the given address is a P2PKH address
 * @return True if the version byte matches the P2PKH byte version of the address network parameters
 */
RCT_REMAP_METHOD(isP2PKH,isP2PKHWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :@([self.objcImpl isP2PKH])};if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeAddress::isP2PKH", nil);
    }
}
@end
