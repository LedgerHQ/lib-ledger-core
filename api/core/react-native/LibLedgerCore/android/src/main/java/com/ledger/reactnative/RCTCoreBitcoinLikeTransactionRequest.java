// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.Amount;
import co.ledger.core.BitcoinLikeOutput;
import co.ledger.core.BitcoinLikeTransactionRequest;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

/**Structure representing a bitcoin transaction request */
public class RCTCoreBitcoinLikeTransactionRequest extends ReactContextBaseJavaModule {
    private final ReactApplicationContext reactContext;
    private Map<String, BitcoinLikeTransactionRequest> javaObjects;
    private Map<String, Map<String, ArrayList<String>>> implementationsData;
    public Map<String, BitcoinLikeTransactionRequest> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreBitcoinLikeTransactionRequest(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, BitcoinLikeTransactionRequest>();
        this.implementationsData = new HashMap<String, Map<String, ArrayList<String>>>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreBitcoinLikeTransactionRequest";
    }
    @ReactMethod
    public void release(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreBitcoinLikeTransactionRequest", "First parameter of RCTCoreBitcoinLikeTransactionRequest::release should be an instance of RCTCoreBitcoinLikeTransactionRequest");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, BitcoinLikeTransactionRequest> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }

    @ReactMethod
    public void init(ArrayList <HashMap <String, String>> utxo, ArrayList <HashMap <String, String>> outputs, Optional<HashMap <String, String>> baseFees, Optional<HashMap <String, String>> totalFees, Integer lockTime, Promise promise) {
        Map<String, ArrayList<String>> implementationsData = new HashMap<String, ArrayList<String>>();
        ArrayList<BitcoinLikeOutput> javaParam_0 = new ArrayList<BitcoinLikeOutput>();
        ArrayList<String> javaParam_0_data = new ArrayList<String>();

        for (HashMap <String, String> utxo_elem : utxo)
        {
            RCTCoreBitcoinLikeOutput rctParam_utxo_elem = this.reactContext.getNativeModule(RCTCoreBitcoinLikeOutput.class);
            BitcoinLikeOutput javaParam_0_elem = rctParam_utxo_elem.getJavaObjects().get(utxo_elem.get("uid"));
            javaParam_0_data.add(utxo_elem.get("uid"));
            javaParam_0.add(javaParam_0_elem);
        }
        implementationsData.put("utxo", javaParam_0_data);

        ArrayList<BitcoinLikeOutput> javaParam_1 = new ArrayList<BitcoinLikeOutput>();
        ArrayList<String> javaParam_1_data = new ArrayList<String>();

        for (HashMap <String, String> outputs_elem : outputs)
        {
            RCTCoreBitcoinLikeOutput rctParam_outputs_elem = this.reactContext.getNativeModule(RCTCoreBitcoinLikeOutput.class);
            BitcoinLikeOutput javaParam_1_elem = rctParam_outputs_elem.getJavaObjects().get(outputs_elem.get("uid"));
            javaParam_1_data.add(outputs_elem.get("uid"));
            javaParam_1.add(javaParam_1_elem);
        }
        implementationsData.put("outputs", javaParam_1_data);

        RCTCoreAmount rctParam_baseFees = this.reactContext.getNativeModule(RCTCoreAmount.class);
        Amount javaParam_2 = rctParam_baseFees.getJavaObjects().get(baseFees.get().get("uid"));
        ArrayList<String> javaParam_2_tmp = new ArrayList<String>();
        javaParam_2_tmp.add(baseFees.get().get("uid"));
        implementationsData.put("baseFees", javaParam_2_tmp);
        RCTCoreAmount rctParam_totalFees = this.reactContext.getNativeModule(RCTCoreAmount.class);
        Amount javaParam_3 = rctParam_totalFees.getJavaObjects().get(totalFees.get().get("uid"));
        ArrayList<String> javaParam_3_tmp = new ArrayList<String>();
        javaParam_3_tmp.add(totalFees.get().get("uid"));
        implementationsData.put("totalFees", javaParam_3_tmp);
        BitcoinLikeTransactionRequest javaResult = new BitcoinLikeTransactionRequest(javaParam_0, javaParam_1, javaParam_2, javaParam_3, lockTime);

        String uuid = UUID.randomUUID().toString();
        this.javaObjects.put(uuid, javaResult);
        WritableNativeMap finalResult = new WritableNativeMap();
        finalResult.putString("type","RCTCoreBitcoinLikeTransactionRequest");
        finalResult.putString("uid",uuid);
        this.implementationsData.put(uuid, implementationsData);
        promise.resolve(finalResult);
    }
    @ReactMethod
    public void getUtxo(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            BitcoinLikeTransactionRequest javaObj = this.javaObjects.get(uid);
            Map<String, ArrayList<String>> data = this.implementationsData.get(uid);
            ArrayList<String> fieldData = data.get("utxo");
            WritableNativeArray nativeFieldData = new WritableNativeArray();
            for (String elem : fieldData)
            {
                nativeFieldData.pushString(elem);
            }
            WritableNativeMap result = new WritableNativeMap();
            result.putArray(uid,nativeFieldData);
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreBitcoinLikeTransactionRequest::getUtxo", "First parameter of RCTCoreBitcoinLikeTransactionRequest::getUtxo should be an instance of RCTCoreBitcoinLikeTransactionRequest");
        }
    }

    @ReactMethod
    public void getOutputs(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            BitcoinLikeTransactionRequest javaObj = this.javaObjects.get(uid);
            Map<String, ArrayList<String>> data = this.implementationsData.get(uid);
            ArrayList<String> fieldData = data.get("outputs");
            WritableNativeArray nativeFieldData = new WritableNativeArray();
            for (String elem : fieldData)
            {
                nativeFieldData.pushString(elem);
            }
            WritableNativeMap result = new WritableNativeMap();
            result.putArray(uid,nativeFieldData);
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreBitcoinLikeTransactionRequest::getOutputs", "First parameter of RCTCoreBitcoinLikeTransactionRequest::getOutputs should be an instance of RCTCoreBitcoinLikeTransactionRequest");
        }
    }

    @ReactMethod
    public void getBaseFees(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            BitcoinLikeTransactionRequest javaObj = this.javaObjects.get(uid);
            Map<String, ArrayList<String>> data = this.implementationsData.get(uid);
            ArrayList<String> fieldData = data.get("baseFees");
            WritableNativeArray nativeFieldData = new WritableNativeArray();
            for (String elem : fieldData)
            {
                nativeFieldData.pushString(elem);
            }
            WritableNativeMap result = new WritableNativeMap();
            result.putArray(uid,nativeFieldData);
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreBitcoinLikeTransactionRequest::getBaseFees", "First parameter of RCTCoreBitcoinLikeTransactionRequest::getBaseFees should be an instance of RCTCoreBitcoinLikeTransactionRequest");
        }
    }

    @ReactMethod
    public void getTotalFees(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            BitcoinLikeTransactionRequest javaObj = this.javaObjects.get(uid);
            Map<String, ArrayList<String>> data = this.implementationsData.get(uid);
            ArrayList<String> fieldData = data.get("totalFees");
            WritableNativeArray nativeFieldData = new WritableNativeArray();
            for (String elem : fieldData)
            {
                nativeFieldData.pushString(elem);
            }
            WritableNativeMap result = new WritableNativeMap();
            result.putArray(uid,nativeFieldData);
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreBitcoinLikeTransactionRequest::getTotalFees", "First parameter of RCTCoreBitcoinLikeTransactionRequest::getTotalFees should be an instance of RCTCoreBitcoinLikeTransactionRequest");
        }
    }

    @ReactMethod
    public void getLockTime(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            BitcoinLikeTransactionRequest javaObj = this.javaObjects.get(uid);
            Integer result = javaObj.getLockTime();
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreBitcoinLikeTransactionRequest::getLockTime", "First parameter of RCTCoreBitcoinLikeTransactionRequest::getLockTime should be an instance of RCTCoreBitcoinLikeTransactionRequest");
        }
    }

}
