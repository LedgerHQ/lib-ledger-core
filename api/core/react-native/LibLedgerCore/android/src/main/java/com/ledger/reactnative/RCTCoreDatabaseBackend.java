// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

package com.ledger.reactnative;

import co.ledger.core.DatabaseBackend;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.ledger.java.NativeLibLoader;

import java.io.IOException;
import java.net.URISyntaxException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import com.ledger.java.NativeLibLoader;
/**Class representing a database */
public class RCTCoreDatabaseBackend extends ReactContextBaseJavaModule {



    private final ReactApplicationContext reactContext;
    private Map<String, DatabaseBackend> javaObjects;
    public Map<String, DatabaseBackend> getJavaObjects()
    {
        return javaObjects;
    }

    //System.loadLibrary("lib-binding‚Äù)

    static {
        try {
            //WORKS BUT JNI error not finding "ThreadDispatcher" class looking into /data/app/com.ledgerlivemobile-F3jjcPWZS9MZ1-CBys0GkA==/base.apk"],
            // nativeLibraryDirectories=[/data/app/com.ledgerlivemobile-F3jjcPWZS9MZ1-CBys0GkA==/lib/x86,
            // /data/app/com.ledgerlivemobile-F3jjcPWZS9MZ1-CBys0GkA==/base.apk!/lib/x86, /system/lib, /vendor/lib]

            System.loadLibrary("-binding");
            //System.load("/Users/elkhalilbellakrid/Desktop/Playground_15/lib-ledger-core/api/core/react-native/LibLedgerCore/android/binding/android/libs/x86/lib-binding.so");
        } catch (UnsatisfiedLinkError e) {
            System.err.println("###### Native Library failed to load.\n" + e);
            System.exit(1);
        }
    }

    public RCTCoreDatabaseBackend(ReactApplicationContext reactContext) throws URISyntaxException, IOException
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, DatabaseBackend>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreDatabaseBackend";
    }
    @ReactMethod
    public void release(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreDatabaseBackend", "First parameter of RCTCoreDatabaseBackend::release should be an instance of RCTCoreDatabaseBackend");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, DatabaseBackend> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }

    /**
     *Set database's user name
     *@param username, string
     *@return DatabaseBackend object, databse with user name set
     */
    @ReactMethod
    public void setUsername(Map<String, String> currentInstance, String username, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseBackend javaResult = currentInstanceObj.setUsername(username);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Set database's password
     *@param password, string
     *@return DatabaseBackend object, database with password set
     */
    @ReactMethod
    public void setPassword(Map<String, String> currentInstance, String pwd, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseBackend javaResult = currentInstanceObj.setPassword(pwd);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Set database's host which storing database
     *@param host, string
     *@return DatabaseBackend object, database with host set
     */
    @ReactMethod
    public void setHost(Map<String, String> currentInstance, String host, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseBackend javaResult = currentInstanceObj.setHost(host);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Set database's host's address
     *@param hostAddr, string, host's address
     *@return DatabaseBackend object, database with host's address set
     */
    @ReactMethod
    public void setHostAddr(Map<String, String> currentInstance, String hostAddr, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseBackend javaResult = currentInstanceObj.setHostAddr(hostAddr);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Set database's port on which it connects to host
     *@param port, string
     *@return DatabaseBackend object, database with port set
     */
    @ReactMethod
    public void setPort(Map<String, String> currentInstance, String port, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseBackend javaResult = currentInstanceObj.setPort(port);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Set database's specific options
     *@param opts, string
     *@return DatabaseBackend object, database with options set
     */
    @ReactMethod
    public void setOptions(Map<String, String> currentInstance, String opts, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseBackend javaResult = currentInstanceObj.setOptions(opts);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Set database's mode (SSL) of security interaction of type databse/server
     *@param mode, string
     *@return DatabaseBackend object, database with mode set
     */
    @ReactMethod
    public void setSslMode(Map<String, String> currentInstance, String mode, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseBackend javaResult = currentInstanceObj.setSslMode(mode);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Set database's Kerberos name used to secure (authentication) user/databse interaction
     *@param name, string
     *@return DatabaseBackend object, database with Kerberos name set
     */
    @ReactMethod
    public void setKerberosName(Map<String, String> currentInstance, String name, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseBackend javaResult = currentInstanceObj.setKerberosName(name);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**TODO */
    @ReactMethod
    public void setService(Map<String, String> currentInstance, String service, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseBackend javaResult = currentInstanceObj.setService(service);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void setConnectionPoolSize(Map<String, String> currentInstance, int size, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseBackend javaResult = currentInstanceObj.setConnectionPoolSize(size);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void enableQueryLogging(Map<String, String> currentInstance, boolean enable, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseBackend javaResult = currentInstanceObj.enableQueryLogging(enable);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Return database's name
     *@return string
     */
    @ReactMethod
    public void getUsername(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getUsername();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Return database's password
     *@return string
     */
    @ReactMethod
    public void getPassword(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getPassword();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Return database's host
     *@return string
     */
    @ReactMethod
    public void getHost(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getHost();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Return database's host's address
     *@return string
     */
    @ReactMethod
    public void getHostAddr(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getHostAddr();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Return database's port
     *@return string
     */
    @ReactMethod
    public void getPort(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getPort();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Return database's options
     *@return string
     */
    @ReactMethod
    public void getOptions(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getOptions();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Return database's SSL mode
     *@return string
     */
    @ReactMethod
    public void getSslMode(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getSslMode();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Return database's Kerberos name
     *@return string
     */
    @ReactMethod
    public void getKerberosName(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getKerberosName();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**TODO */
    @ReactMethod
    public void getService(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getService();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getConnectionPoolSize(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            int javaResult = currentInstanceObj.getConnectionPoolSize();
            WritableNativeMap result = new WritableNativeMap();
            result.putInt("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void isLoggingEnabled(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.isLoggingEnabled();
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Create an instance of SQLite3 database
     *@return DatabaseBackend object
     */
    @ReactMethod
    public void getSqlite3Backend(Promise promise) {
        try
        {
            DatabaseBackend javaResult = DatabaseBackend.getSqlite3Backend();

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     *Create an instance of PostgreSQL database
     *@return DatabaseBackend object
     */
    @ReactMethod
    public void getPostgreSQLBackend(Promise promise) {
        try
        {
            DatabaseBackend javaResult = DatabaseBackend.getPostgreSQLBackend();

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
