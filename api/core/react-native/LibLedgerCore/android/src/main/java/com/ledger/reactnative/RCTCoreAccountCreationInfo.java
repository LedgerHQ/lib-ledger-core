// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.AccountCreationInfo;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

/**Structure of informations needed for account creation */
public class RCTCoreAccountCreationInfo extends ReactContextBaseJavaModule {
    private final ReactApplicationContext reactContext;
    private Map<String, AccountCreationInfo> javaObjects;
    public Map<String, AccountCreationInfo> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreAccountCreationInfo(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, AccountCreationInfo>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreAccountCreationInfo";
    }
    @ReactMethod
    public void release(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreAccountCreationInfo", "First parameter of RCTCoreAccountCreationInfo::release should be an instance of RCTCoreAccountCreationInfo");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, AccountCreationInfo> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }

    @ReactMethod
    public void init(int index, ArrayList<String> owners, ArrayList<String> derivations, ArrayList<byte[]> publicKeys, ArrayList<byte[]> chainCodes, Promise promise) {
        AccountCreationInfo javaResult = new AccountCreationInfo(index, owners, derivations, publicKeys, chainCodes);

        String uuid = UUID.randomUUID().toString();
        this.javaObjects.put(uuid, javaResult);
        WritableNativeMap finalResult = new WritableNativeMap();
        finalResult.putString("type","RCTCoreAccountCreationInfo");
        finalResult.putString("uid",uuid);
        promise.resolve(finalResult);
    }
    @ReactMethod
    public void getIndex(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            AccountCreationInfo javaObj = this.javaObjects.get(uid);
            int result = javaObj.getIndex();
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAccountCreationInfo::getIndex", "First parameter of RCTCoreAccountCreationInfo::getIndex should be an instance of RCTCoreAccountCreationInfo");
        }
    }

    @ReactMethod
    public void getOwners(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            AccountCreationInfo javaObj = this.javaObjects.get(uid);
            ArrayList<String> result = javaObj.getOwners();
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAccountCreationInfo::getOwners", "First parameter of RCTCoreAccountCreationInfo::getOwners should be an instance of RCTCoreAccountCreationInfo");
        }
    }

    @ReactMethod
    public void getDerivations(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            AccountCreationInfo javaObj = this.javaObjects.get(uid);
            ArrayList<String> result = javaObj.getDerivations();
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAccountCreationInfo::getDerivations", "First parameter of RCTCoreAccountCreationInfo::getDerivations should be an instance of RCTCoreAccountCreationInfo");
        }
    }

    @ReactMethod
    public void getPublicKeys(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            AccountCreationInfo javaObj = this.javaObjects.get(uid);
            ArrayList<byte[]> result = javaObj.getPublicKeys();
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAccountCreationInfo::getPublicKeys", "First parameter of RCTCoreAccountCreationInfo::getPublicKeys should be an instance of RCTCoreAccountCreationInfo");
        }
    }

    @ReactMethod
    public void getChainCodes(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            AccountCreationInfo javaObj = this.javaObjects.get(uid);
            ArrayList<byte[]> result = javaObj.getChainCodes();
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAccountCreationInfo::getChainCodes", "First parameter of RCTCoreAccountCreationInfo::getChainCodes should be an instance of RCTCoreAccountCreationInfo");
        }
    }

}
