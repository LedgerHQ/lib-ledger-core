// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from preferences.djinni

#ifndef DJINNI_GENERATED_PREFERENCES_HPP
#define DJINNI_GENERATED_PREFERENCES_HPP

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace ledger { namespace core { namespace api {

class PreferencesEditor;

/**
 * Interface for accessing and modifying custom preferences. Preferences are key - value data which will be persisted to
 * the filesystem. They can be local or stored with the Ledger API backend (encrypted by a user secret). This can be used to
 * attach application data to the libledger-core modules (i.e. a wallet pool, a wallet, an account, an operation). This interface
 * is highly inspired by Android SharedPreferences.
 */
class Preferences {
public:
    virtual ~Preferences() {}

    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    virtual std::string getString(const std::string & key, const std::string & fallbackValue) = 0;

    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    virtual int32_t getInt(const std::string & key, int32_t fallbackValue) = 0;

    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    virtual int64_t getLong(const std::string & key, int64_t fallbackValue) = 0;

    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    virtual bool getBoolean(const std::string & key, bool fallbackValue) = 0;

    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    virtual std::vector<std::string> getStringArray(const std::string & key, const std::vector<std::string> & fallbackValue) = 0;

    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    virtual std::vector<uint8_t> getData(const std::string & key, const std::vector<uint8_t> & fallbackValue) = 0;

    /**
     * Checks whether the Preferences contains the given key.
     * @return true the preferences contains the key, false otherwise.
     */
    virtual bool contains(const std::string & key) = 0;

    /**
     * Get a preferences editor in order to add/modify/remove data.
     * @return An interface for editting preferences.
     */
    virtual std::shared_ptr<PreferencesEditor> edit() = 0;
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_PREFERENCES_HPP
