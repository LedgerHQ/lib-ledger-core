// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from http_client.djinni

#include "HttpReadBodyResult.hpp"  // my header
#include "Error.hpp"
#include "Marshal.hpp"

namespace djinni_generated {

HttpReadBodyResult::HttpReadBodyResult() = default;

HttpReadBodyResult::~HttpReadBodyResult() = default;

auto HttpReadBodyResult::fromCpp(JNIEnv* jniEnv, const CppType& c) -> ::djinni::LocalRef<JniType> {
    const auto& data = ::djinni::JniClass<HttpReadBodyResult>::get();
    auto r = ::djinni::LocalRef<JniType>{jniEnv->NewObject(data.clazz.get(), data.jconstructor,
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni_generated::Error>::fromCpp(jniEnv, c.error)),
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni::Binary>::fromCpp(jniEnv, c.data)))};
    ::djinni::jniExceptionCheck(jniEnv);
    return r;
}

auto HttpReadBodyResult::toCpp(JNIEnv* jniEnv, JniType j) -> CppType {
    ::djinni::JniLocalScope jscope(jniEnv, 3);
    assert(j != nullptr);
    const auto& data = ::djinni::JniClass<HttpReadBodyResult>::get();
    return {::djinni::Optional<std::experimental::optional, ::djinni_generated::Error>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_error)),
            ::djinni::Optional<std::experimental::optional, ::djinni::Binary>::toCpp(jniEnv, (jbyteArray)jniEnv->GetObjectField(j, data.field_data))};
}

}  // namespace djinni_generated
