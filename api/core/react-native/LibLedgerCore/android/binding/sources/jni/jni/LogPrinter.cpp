// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from logger.djinni

#include "LogPrinter.hpp"  // my header
#include "ExecutionContext.hpp"
#include "Marshal.hpp"

namespace djinni_generated {

LogPrinter::LogPrinter() : ::djinni::JniInterface<::ledger::core::api::LogPrinter, LogPrinter>() {}

LogPrinter::~LogPrinter() = default;

LogPrinter::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

LogPrinter::JavaProxy::~JavaProxy() = default;

void LogPrinter::JavaProxy::printError(const std::string & c_message) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::LogPrinter>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_printError,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_message)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void LogPrinter::JavaProxy::printInfo(const std::string & c_message) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::LogPrinter>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_printInfo,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_message)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void LogPrinter::JavaProxy::printDebug(const std::string & c_message) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::LogPrinter>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_printDebug,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_message)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void LogPrinter::JavaProxy::printWarning(const std::string & c_message) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::LogPrinter>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_printWarning,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_message)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void LogPrinter::JavaProxy::printApdu(const std::string & c_message) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::LogPrinter>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_printApdu,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_message)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void LogPrinter::JavaProxy::printCriticalError(const std::string & c_message) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::LogPrinter>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_printCriticalError,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_message)));
    ::djinni::jniExceptionCheck(jniEnv);
}
std::shared_ptr<::ledger::core::api::ExecutionContext> LogPrinter::JavaProxy::getContext() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::LogPrinter>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getContext);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::ExecutionContext::toCpp(jniEnv, jret);
}

}  // namespace djinni_generated
