// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#ifndef DJINNI_GENERATED_BITCOINLIKETRANSACTIONBUILDER_HPP
#define DJINNI_GENERATED_BITCOINLIKETRANSACTIONBUILDER_HPP

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace ledger { namespace core { namespace api {

class Amount;
class BitcoinLikeScript;
class BitcoinLikeTransaction;
class BitcoinLikeTransactionCallback;
enum class BitcoinLikePickingStrategy;
struct Currency;

class BitcoinLikeTransactionBuilder {
public:
    virtual ~BitcoinLikeTransactionBuilder() {}

    /**
     * Add the given input to the final transaction.
     * @param transactionhash The hash of the transaction in where the UTXO can be located.
     * @params index Index of the UTXO in the previous transaction
     * @params sequence Sequence number to add at the end of the input serialization. This can be used for RBF transaction
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> addInput(const std::string & transactionHash, int32_t index, int32_t sequence) = 0;

    /**
     * Add the given output to the final transaction
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> addOutput(const std::shared_ptr<Amount> & amount, const std::shared_ptr<BitcoinLikeScript> & script) = 0;

    /**
     * If needed the transaction will send its change to the given path. It is possible to add multiple change path.
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> addChangePath(const std::string & path) = 0;

    /**
     * Exclude UTXO from the coin selection (alias UTXO picking). You can call this method multiple times to exclude multiple
     * UTXO.
     * @param transactionHash The hash of the transaction in which this UTXO can be found.
     * @param outputIndex The position of the output in the previous transaction,
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> excludeUtxo(const std::string & transactionHash, int32_t outputIndex) = 0;

    /** @return A reference on the same builder in order to chain calls. */
    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> setNumberOfChangeAddresses(int32_t count) = 0;

    /**
     * Set the maximum amount per change output. By default there is no max amount.
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> setMaxAmountOnChange(const std::shared_ptr<Amount> & amount) = 0;

    /**
     * Set the minimum amount per change output. By default this value is the dust value of the currency.
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> setMinAmountOnChange(const std::shared_ptr<Amount> & amount) = 0;

    /**
     * Set the UTXO picking strategy (see [[BitcoinLikePickingStrategy]]).
     * @param strategy The strategy to adopt in order to select which input to use in the transaction.
     * @param sequence The sequence value serialized at the end of the raw transaction. If you don't know what to put here
     * just use 0xFFFFFF
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> pickInputs(BitcoinLikePickingStrategy strategy, int32_t sequence) = 0;

    /**
     * Send funds to the given address. This method can be called multiple times to send to multiple addresses.
     * @param amount The value to send
     * @param address Address of the recipient
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> sendToAddress(const std::shared_ptr<Amount> & amount, const std::string & address) = 0;

    /**
     * Send all available funds to the given address.
     * @param address Address of the recipient
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> wipeToAddress(const std::string & address) = 0;

    /**
     * Set the amount of fees per byte (of the raw transaction).
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> setFeesPerByte(const std::shared_ptr<Amount> & fees) = 0;

    /** Build a transaction from the given builder parameters. */
    virtual void build(const std::shared_ptr<BitcoinLikeTransactionCallback> & callback) = 0;

    /**
     * Creates a clone of this builder.
     * @return A copy of the current builder instance.
     */
    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> clone() = 0;

    /** Reset the current instance to its initial state */
    virtual void reset() = 0;

    static std::shared_ptr<BitcoinLikeTransaction> parseRawUnsignedTransaction(const Currency & currency, const std::vector<uint8_t> & rawTransaction);
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_BITCOINLIKETRANSACTIONBUILDER_HPP
