// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from locale.djinni

#ifndef DJINNI_GENERATED_LOCALE_HPP
#define DJINNI_GENERATED_LOCALE_HPP

#include <iostream>
#include <string>
#include <utility>

namespace ledger { namespace core { namespace api {

struct Locale final {
    std::string DecimalSeparator;
    std::string ThousandsSeparator;
    bool IsPrefixedByCurrencySymbol;

    Locale(std::string DecimalSeparator_,
           std::string ThousandsSeparator_,
           bool IsPrefixedByCurrencySymbol_)
    : DecimalSeparator(std::move(DecimalSeparator_))
    , ThousandsSeparator(std::move(ThousandsSeparator_))
    , IsPrefixedByCurrencySymbol(std::move(IsPrefixedByCurrencySymbol_))
    {}

    Locale(const Locale& cpy) {
       this->DecimalSeparator = cpy.DecimalSeparator;
       this->ThousandsSeparator = cpy.ThousandsSeparator;
       this->IsPrefixedByCurrencySymbol = cpy.IsPrefixedByCurrencySymbol;
    }

    Locale() = default;


    Locale& operator=(const Locale& cpy) {
       this->DecimalSeparator = cpy.DecimalSeparator;
       this->ThousandsSeparator = cpy.ThousandsSeparator;
       this->IsPrefixedByCurrencySymbol = cpy.IsPrefixedByCurrencySymbol;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(DecimalSeparator, ThousandsSeparator, IsPrefixedByCurrencySymbol);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(DecimalSeparator, ThousandsSeparator, IsPrefixedByCurrencySymbol);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_LOCALE_HPP
