// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#ifndef DJINNI_GENERATED_ACCOUNTCREATIONINFO_HPP
#define DJINNI_GENERATED_ACCOUNTCREATIONINFO_HPP

#include <cstdint>
#include <iostream>
#include <string>
#include <utility>
#include <vector>

namespace ledger { namespace core { namespace api {

/**Structure of informations needed for account creation */
struct AccountCreationInfo final {
    /**32 bits integer, index of account in user's wallet */
    int32_t index;
    /**List of string, account's owners */
    std::vector<std::string> owners;
    /**List of string, list of account's derivations */
    std::vector<std::string> derivations;
    /**List of 32 bytes, list of public keys owning the account */
    std::vector<std::vector<uint8_t>> publicKeys;
    /**TODO */
    std::vector<std::vector<uint8_t>> chainCodes;

    AccountCreationInfo(int32_t index_,
                        std::vector<std::string> owners_,
                        std::vector<std::string> derivations_,
                        std::vector<std::vector<uint8_t>> publicKeys_,
                        std::vector<std::vector<uint8_t>> chainCodes_)
    : index(std::move(index_))
    , owners(std::move(owners_))
    , derivations(std::move(derivations_))
    , publicKeys(std::move(publicKeys_))
    , chainCodes(std::move(chainCodes_))
    {}

    AccountCreationInfo(const AccountCreationInfo& cpy) {
       this->index = cpy.index;
       this->owners = cpy.owners;
       this->derivations = cpy.derivations;
       this->publicKeys = cpy.publicKeys;
       this->chainCodes = cpy.chainCodes;
    }

    AccountCreationInfo() = default;


    AccountCreationInfo& operator=(const AccountCreationInfo& cpy) {
       this->index = cpy.index;
       this->owners = cpy.owners;
       this->derivations = cpy.derivations;
       this->publicKeys = cpy.publicKeys;
       this->chainCodes = cpy.chainCodes;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(index, owners, derivations, publicKeys, chainCodes);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(index, owners, derivations, publicKeys, chainCodes);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_ACCOUNTCREATIONINFO_HPP
