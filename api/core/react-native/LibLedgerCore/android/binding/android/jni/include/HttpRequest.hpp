// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from http_client.djinni

#ifndef DJINNI_GENERATED_HTTPREQUEST_HPP
#define DJINNI_GENERATED_HTTPREQUEST_HPP

#include "../utils/optional.hpp"
#include <cstdint>
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

namespace ledger { namespace core { namespace api {

class HttpUrlConnection;
enum class HttpMethod;
struct Error;

/**Class representing an Http request */
class HttpRequest {
public:
    virtual ~HttpRequest() {}

    /**
     *Get method of request
     *@return HttpMethod enum entry
     */
    virtual HttpMethod getMethod() = 0;

    /**
     *Get headers set in the request
     *@return Map with key and value of type string
     */
    virtual std::unordered_map<std::string, std::string> getHeaders() = 0;

    /**
     *Get body of request
     *@return binary
     */
    virtual std::vector<uint8_t> getBody() = 0;

    /**
     *Get Url of request
     *@return string
     */
    virtual std::string getUrl() = 0;

    /**
     *Method called when reauest is completed
     *@param response, Optional HttpUrlConnection object, response of request if succeed
     *@param error, optional Error structure, error returned in case of request failure
     */
    virtual void complete(const std::shared_ptr<HttpUrlConnection> & response, const std::experimental::optional<Error> & error) = 0;
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_HTTPREQUEST_HPP
