// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#ifndef DJINNI_GENERATED_ADDRESS_HPP
#define DJINNI_GENERATED_ADDRESS_HPP

#include "../utils/optional.hpp"
#include <memory>
#include <string>

namespace ledger { namespace core { namespace api {

class BitcoinLikeAddress;
struct Currency;

class Address {
public:
    virtual ~Address() {}

    /**
     * Gets an optional derivation path (if the address is owned by an account)
     * @return The derivation path of the address
     */
    virtual std::experimental::optional<std::string> getDerivationPath() = 0;

    /**
     * Serialize the address to a string. The serialization method depends of the underlying currency and
     * format (Base58, Bech32, Ethereum...)
     */
    virtual std::string toString() = 0;

    virtual std::shared_ptr<BitcoinLikeAddress> asBitcoinLikeAddress() = 0;

    virtual bool isInstanceOfBitcoinLikeAddress() = 0;

    virtual Currency getCurrency() = 0;

    /**
     * Attempt to parse a string address. If the address can be parse return it otherwise return a NONE
     * (depending on you host this may be a null, nil, None...)
     * @param address The string to parse
     * @param currency The currency used to parse the address
     * @return If successful returns the address object otherwise null.
     */
    static std::shared_ptr<Address> parse(const std::string & address, const Currency & currency);

    /**
     * Checks if the given string formatted address is valid or not.
     * @param address The string to parse
     * @param currency The currency used to parse the address
     * @return If successful returns true, false otherwise.
     */
    static bool isValid(const std::string & address, const Currency & currency);
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_ADDRESS_HPP
