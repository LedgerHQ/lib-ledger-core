// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet_pool.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

/**Class representing a wallet pool builder (to instanciate a wallet pool) */
public abstract class WalletPoolBuilder {
    /**
     *Set http client to be used for wallet pool build
     *@param client, HttpClient
     *@return WalletPoolBuilder object, instance with wallet pool http client set
     */
    public abstract WalletPoolBuilder setHttpClient(HttpClient client);

    /**
     *Set web socket client, through which wallet pool will listen and get notified (by explorers, DBs...)
     *@param client, WebSocketClient object
     *@reutnr WalletPoolBuilder object, instance with wallet pool web socket client set
     */
    public abstract WalletPoolBuilder setWebsocketClient(WebSocketClient client);

    /**
     *Set path resolver that will be used for wallet pool creation to resolve wallet pool's (DB's, logs, preferences ...) paths
     *@param pathResolver, Pathresolver object
     *@param WalletPoolBuilder object, instance with wallet pool path resolver set
     */
    public abstract WalletPoolBuilder setPathResolver(PathResolver pathResolver);

    /**
     *Set log printer that will be used for wallet pool creation to dump wallet pool's logs (for debug purposes)
     *@param printer, LogPrinter object
     *@param WalletPoolBuilder object, instance with wallet pool logger set
     */
    public abstract WalletPoolBuilder setLogPrinter(LogPrinter printer);

    /**
     *Set thread dispatcher that will be used for wallet pool creation to dispatch wallet pool's tasks through different threads
     *@param dispatcher, ThreadDispatcher object
     *@param WalletPoolBuilder object, instance with wallet pool thread dispatcher set
     */
    public abstract WalletPoolBuilder setThreadDispatcher(ThreadDispatcher dispatcher);

    /**
     *Set name that will be used for wallet pool creation
     *@param name, string
     *@return WalletPoolBuilder object, instance with wallet pool name set
     */
    public abstract WalletPoolBuilder setName(String name);

    /**
     *Set password that will be used for wallet pool creation
     *@param password, string
     *@return WalletPoolBuilder object, with wallet pool password set
     */
    public abstract WalletPoolBuilder setPassword(String password);

    /**
     *Set random number generator that will be used for wallet pool creation
     *@param rng, RandomNumberGenerator object
     *@return WalletPoolBuilder object, with wallet pool random number generator set
     */
    public abstract WalletPoolBuilder setRandomNumberGenerator(RandomNumberGenerator rng);

    /**
     *Set database that will be used for wallet pool creation, it will store all wallet pool's data (created wallets, accounts, preferences ...)
     *@param backend, DatabaseBackend object
     *@return WalletPoolBuilder object, with wallet pool database set
     */
    public abstract WalletPoolBuilder setDatabaseBackend(DatabaseBackend backend);

    /**
     *Set configuration that will be used for wallet pool creation
     *@param configuration, DynamicObject object
     *@return WalletPoolBuilder object, with wallet pool configuration set
     */
    public abstract WalletPoolBuilder setConfiguration(DynamicObject configuration);

    /**
     *Create wallet pool
     *@param callback, Callback object returning a WalletPool instance
     */
    public abstract void build(WalletPoolCallback listener);

    /**
     *Create an instance of the wallet pool builder
     *@return WalletPoolBuilder object
     */
    public static native WalletPoolBuilder createInstance();

    private static final class CppProxy extends WalletPoolBuilder
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public WalletPoolBuilder setHttpClient(HttpClient client)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setHttpClient(this.nativeRef, client);
        }
        private native WalletPoolBuilder native_setHttpClient(long _nativeRef, HttpClient client);

        @Override
        public WalletPoolBuilder setWebsocketClient(WebSocketClient client)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setWebsocketClient(this.nativeRef, client);
        }
        private native WalletPoolBuilder native_setWebsocketClient(long _nativeRef, WebSocketClient client);

        @Override
        public WalletPoolBuilder setPathResolver(PathResolver pathResolver)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setPathResolver(this.nativeRef, pathResolver);
        }
        private native WalletPoolBuilder native_setPathResolver(long _nativeRef, PathResolver pathResolver);

        @Override
        public WalletPoolBuilder setLogPrinter(LogPrinter printer)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setLogPrinter(this.nativeRef, printer);
        }
        private native WalletPoolBuilder native_setLogPrinter(long _nativeRef, LogPrinter printer);

        @Override
        public WalletPoolBuilder setThreadDispatcher(ThreadDispatcher dispatcher)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setThreadDispatcher(this.nativeRef, dispatcher);
        }
        private native WalletPoolBuilder native_setThreadDispatcher(long _nativeRef, ThreadDispatcher dispatcher);

        @Override
        public WalletPoolBuilder setName(String name)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setName(this.nativeRef, name);
        }
        private native WalletPoolBuilder native_setName(long _nativeRef, String name);

        @Override
        public WalletPoolBuilder setPassword(String password)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setPassword(this.nativeRef, password);
        }
        private native WalletPoolBuilder native_setPassword(long _nativeRef, String password);

        @Override
        public WalletPoolBuilder setRandomNumberGenerator(RandomNumberGenerator rng)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setRandomNumberGenerator(this.nativeRef, rng);
        }
        private native WalletPoolBuilder native_setRandomNumberGenerator(long _nativeRef, RandomNumberGenerator rng);

        @Override
        public WalletPoolBuilder setDatabaseBackend(DatabaseBackend backend)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setDatabaseBackend(this.nativeRef, backend);
        }
        private native WalletPoolBuilder native_setDatabaseBackend(long _nativeRef, DatabaseBackend backend);

        @Override
        public WalletPoolBuilder setConfiguration(DynamicObject configuration)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setConfiguration(this.nativeRef, configuration);
        }
        private native WalletPoolBuilder native_setConfiguration(long _nativeRef, DynamicObject configuration);

        @Override
        public void build(WalletPoolCallback listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_build(this.nativeRef, listener);
        }
        private native void native_build(long _nativeRef, WalletPoolCallback listener);
    }
}
