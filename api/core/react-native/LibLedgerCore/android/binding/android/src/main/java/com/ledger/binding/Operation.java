// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package co.ledger.core;

import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.atomic.AtomicBoolean;

/**Class representing an operation */
public abstract class Operation {
    /**
     *Get id's operation
     *@return string
     */
    public abstract String getUid();

    /**
     *Get account's index in user's wallet
     *@return 32 bits integer
     */
    public abstract int getAccountIndex();

    /**
     *Get type of operation
     *@return OperationType object (for more details refer to OperationType)
     */
    public abstract OperationType getOperationType();

    /**
     *Return date on which operation was issued
     *@return date object
     */
    public abstract Date getDate();

    /**
     *Get senders of operation
     *@return List of string, list of all senders
     */
    public abstract ArrayList<String> getSenders();

    /**
     *Get recipients of operation
     *@return List of string, list of all recipients
     */
    public abstract ArrayList<String> getRecipients();

    /**
     *Get amount of operation
     *@return Amount object
     */
    public abstract Amount getAmount();

    /**
     *Get fees of operation
     *@return Optional Amount object
     */
    public abstract Amount getFees();

    /**
     *Get preferences of operation
     *@return Prefences object
     */
    public abstract Preferences getPreferences();

    /**
     *Get trust indicator of operation
     *@return TrustIndicator object
     */
    public abstract TrustIndicator getTrust();

    /**
     *Get block height on which operation was included
     *@return Optional 64 bits integer, height of block in which operation was validated
     */
    public abstract Long getBlockHeight();

    /**
     *Convert operation as Bitcoin operation
     *@return BitcoinLikeOperation object
     */
    public abstract BitcoinLikeOperation asBitcoinLikeOperation();

    public abstract boolean isInstanceOfBitcoinLikeOperation();

    /**
     *Same as asBitcoinLikeOperation for ethereum
     *# asEthereumLikeOperation(): Callback<EthereumLikeOperation>;
     *Same as isInstanceOfBitcoinLikeOperation for ethereum
     */
    public abstract boolean isInstanceOfEthereumLikeOperation();

    /**
     *Same as asBitcoinLikeOperation for ripple
     *# asRippleLikeOperation(): Callback<RippleLikeOperation>;
     *Same as isInstanceOfBitcoinLikeOperation for ripple
     */
    public abstract boolean isInstanceOfRippleLikeOperation();

    /**
     *Tells if the operation is complete
     *@return boolean
     */
    public abstract boolean isComplete();

    /**
     *Get type of wallet from which operation was issued
     *@return WalletType object
     */
    public abstract WalletType getWalletType();

    public abstract Currency getCurrency();

    private static final class CppProxy extends Operation
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String getUid()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getUid(this.nativeRef);
        }
        private native String native_getUid(long _nativeRef);

        @Override
        public int getAccountIndex()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAccountIndex(this.nativeRef);
        }
        private native int native_getAccountIndex(long _nativeRef);

        @Override
        public OperationType getOperationType()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getOperationType(this.nativeRef);
        }
        private native OperationType native_getOperationType(long _nativeRef);

        @Override
        public Date getDate()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getDate(this.nativeRef);
        }
        private native Date native_getDate(long _nativeRef);

        @Override
        public ArrayList<String> getSenders()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSenders(this.nativeRef);
        }
        private native ArrayList<String> native_getSenders(long _nativeRef);

        @Override
        public ArrayList<String> getRecipients()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRecipients(this.nativeRef);
        }
        private native ArrayList<String> native_getRecipients(long _nativeRef);

        @Override
        public Amount getAmount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAmount(this.nativeRef);
        }
        private native Amount native_getAmount(long _nativeRef);

        @Override
        public Amount getFees()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFees(this.nativeRef);
        }
        private native Amount native_getFees(long _nativeRef);

        @Override
        public Preferences getPreferences()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPreferences(this.nativeRef);
        }
        private native Preferences native_getPreferences(long _nativeRef);

        @Override
        public TrustIndicator getTrust()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTrust(this.nativeRef);
        }
        private native TrustIndicator native_getTrust(long _nativeRef);

        @Override
        public Long getBlockHeight()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBlockHeight(this.nativeRef);
        }
        private native Long native_getBlockHeight(long _nativeRef);

        @Override
        public BitcoinLikeOperation asBitcoinLikeOperation()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_asBitcoinLikeOperation(this.nativeRef);
        }
        private native BitcoinLikeOperation native_asBitcoinLikeOperation(long _nativeRef);

        @Override
        public boolean isInstanceOfBitcoinLikeOperation()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInstanceOfBitcoinLikeOperation(this.nativeRef);
        }
        private native boolean native_isInstanceOfBitcoinLikeOperation(long _nativeRef);

        @Override
        public boolean isInstanceOfEthereumLikeOperation()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInstanceOfEthereumLikeOperation(this.nativeRef);
        }
        private native boolean native_isInstanceOfEthereumLikeOperation(long _nativeRef);

        @Override
        public boolean isInstanceOfRippleLikeOperation()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInstanceOfRippleLikeOperation(this.nativeRef);
        }
        private native boolean native_isInstanceOfRippleLikeOperation(long _nativeRef);

        @Override
        public boolean isComplete()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isComplete(this.nativeRef);
        }
        private native boolean native_isComplete(long _nativeRef);

        @Override
        public WalletType getWalletType()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getWalletType(this.nativeRef);
        }
        private native WalletType native_getWalletType(long _nativeRef);

        @Override
        public Currency getCurrency()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCurrency(this.nativeRef);
        }
        private native Currency native_getCurrency(long _nativeRef);
    }
}
