// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package co.ledger.core;

import java.util.Date;
import java.util.concurrent.atomic.AtomicBoolean;

/**Class representing a wallet */
public abstract class Wallet {
    /**
     *Get name of wallet
     *@return string
     */
    public abstract String getName();

    /**
     *Get account with specific index
     *@param index, 32 bits integer, index of account in wallet
     *@param callback, Callback returning, if getAccount succeed, an Account object with given index
     */
    public abstract void getAccount(int index, AccountCallback callback);

    /**
     *Get number of accounts instanciated under wallet
     *@param callback, Callback returning, if getAccountCount succeed, a 32 bits integer representing number of accounts
     */
    public abstract void getAccountCount(I32Callback callback);

    /**
     *Get list of accounts instanciated under wallet in a given range
     *@param offset, 32 bits integer from which we retrieve accounts
     *@param count, 32 bits integer, number of accounts to retrieve
     *@param callback, ListCallback returning, if getAccounts succeed, list of Accounts object
     */
    public abstract void getAccounts(int offset, int count, AccountListCallback callback);

    /**
     *Get index of next account to create
     *@return callback, Callback returning a 32 bits integer
     */
    public abstract void getNextAccountIndex(I32Callback callback);

    /**
     *Return event bus through which wallet synchronizes it's accounts and interact with blockchain
     *@return EventBus object
     */
    public abstract EventBus getEventBus();

    /**
     *Return synchronization status wallet, true if at least one of accounts is synchronizing
     *@return bool
     */
    public abstract boolean isSynchronizing();

    /**
     *Start synchronization of all accounts under wallet
     *@return EventBus object through which wallet get notified of account's synchronization status
     */
    public abstract EventBus synchronize();

    /**
     *Get wallet preferences
     *@return Preferences object
     */
    public abstract Preferences getPreferences();

    /**
     *Return account's logger which provides all needed (e.g. database) logs
     *@return Logger Object
     */
    public abstract Logger getLogger();

    /**
     *Get preferences of specific account
     *@param index, 32 bits integer, account's index
     *@return Preferences object
     */
    public abstract Preferences getAccountPreferences(int index);

    /**
     * asBitcoinLikeWallet(): Callback<BitcoinLikeWallet>;
     * asEthereumLikeWallet(): Callback<EthereumLikeWallet>;
     * asRippleLikeWallet(): Callback<RippleLikeWallet>;
     *Convert wallet to a Bitcoin one
     *@return BitcoinWallet object
     */
    public abstract BitcoinLikeWallet asBitcoinLikeWallet();

    /**
     *Get currency of wallet
     *@return Currency object
     */
    public abstract Currency getCurrency();

    /**
     *Know if wallet is a Bitcoin one
     *@return bool
     */
    public abstract boolean isInstanceOfBitcoinLikeWallet();

    /**
     *Know if wallet is a Ethereum one
     *@return bool
     */
    public abstract boolean isInstanceOfEthereumLikeWallet();

    /**
     *Know if wallet is a Ripple one
     *@return bool
     */
    public abstract boolean isInstanceOfRippleLikeWallet();

    /**
     *Get wallet type
     *@return WalletType object
     */
    public abstract WalletType getWalletType();

    /**
     *Get last block of blockchain the wallet operates on
     *@param callback, Callback returning a Block object
     */
    public abstract void getLastBlock(BlockCallback callback);

    /**
     *Return infos about the creation of specific account
     *@param accountIndex, 32 bits account, index of account in wallet
     *@param callback, Callback returning an AccountCreationInfo
     */
    public abstract void getAccountCreationInfo(int accountIndex, AccountCreationInfoCallback callback);

    /**TODO */
    public abstract void getExtendedKeyAccountCreationInfo(int accountIndex, ExtendedKeyAccountCreationInfoCallback callback);

    /**
     *Return infos about the next created account
     *@param callback, Callback returning an AccountCreationInfo
     */
    public abstract void getNextAccountCreationInfo(AccountCreationInfoCallback callback);

    /**TODO */
    public abstract void getNextExtendedKeyAccountCreationInfo(ExtendedKeyAccountCreationInfoCallback callback);

    /**
     *Get account from given account creation infos
     *@param accountCreationInfo, AccountCreationInfo object
     *@param callback, Callback returning an Account object with given creation infos
     */
    public abstract void newAccountWithInfo(AccountCreationInfo accountCreationInfo, AccountCallback callback);

    /**TODO */
    public abstract void newAccountWithExtendedKeyInfo(ExtendedKeyAccountCreationInfo extendedKeyAccountCreationInfo, AccountCallback callback);

    /**
     *Erase data (in user's DB) relative to wallet since given date
     *@param date, start date of data deletion
     */
    public abstract void eraseDataSince(Date date, ErrorCodeCallback callback);

    private static final class CppProxy extends Wallet
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String getName()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getName(this.nativeRef);
        }
        private native String native_getName(long _nativeRef);

        @Override
        public void getAccount(int index, AccountCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getAccount(this.nativeRef, index, callback);
        }
        private native void native_getAccount(long _nativeRef, int index, AccountCallback callback);

        @Override
        public void getAccountCount(I32Callback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getAccountCount(this.nativeRef, callback);
        }
        private native void native_getAccountCount(long _nativeRef, I32Callback callback);

        @Override
        public void getAccounts(int offset, int count, AccountListCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getAccounts(this.nativeRef, offset, count, callback);
        }
        private native void native_getAccounts(long _nativeRef, int offset, int count, AccountListCallback callback);

        @Override
        public void getNextAccountIndex(I32Callback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getNextAccountIndex(this.nativeRef, callback);
        }
        private native void native_getNextAccountIndex(long _nativeRef, I32Callback callback);

        @Override
        public EventBus getEventBus()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getEventBus(this.nativeRef);
        }
        private native EventBus native_getEventBus(long _nativeRef);

        @Override
        public boolean isSynchronizing()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isSynchronizing(this.nativeRef);
        }
        private native boolean native_isSynchronizing(long _nativeRef);

        @Override
        public EventBus synchronize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_synchronize(this.nativeRef);
        }
        private native EventBus native_synchronize(long _nativeRef);

        @Override
        public Preferences getPreferences()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPreferences(this.nativeRef);
        }
        private native Preferences native_getPreferences(long _nativeRef);

        @Override
        public Logger getLogger()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLogger(this.nativeRef);
        }
        private native Logger native_getLogger(long _nativeRef);

        @Override
        public Preferences getAccountPreferences(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAccountPreferences(this.nativeRef, index);
        }
        private native Preferences native_getAccountPreferences(long _nativeRef, int index);

        @Override
        public BitcoinLikeWallet asBitcoinLikeWallet()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_asBitcoinLikeWallet(this.nativeRef);
        }
        private native BitcoinLikeWallet native_asBitcoinLikeWallet(long _nativeRef);

        @Override
        public Currency getCurrency()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCurrency(this.nativeRef);
        }
        private native Currency native_getCurrency(long _nativeRef);

        @Override
        public boolean isInstanceOfBitcoinLikeWallet()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInstanceOfBitcoinLikeWallet(this.nativeRef);
        }
        private native boolean native_isInstanceOfBitcoinLikeWallet(long _nativeRef);

        @Override
        public boolean isInstanceOfEthereumLikeWallet()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInstanceOfEthereumLikeWallet(this.nativeRef);
        }
        private native boolean native_isInstanceOfEthereumLikeWallet(long _nativeRef);

        @Override
        public boolean isInstanceOfRippleLikeWallet()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInstanceOfRippleLikeWallet(this.nativeRef);
        }
        private native boolean native_isInstanceOfRippleLikeWallet(long _nativeRef);

        @Override
        public WalletType getWalletType()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getWalletType(this.nativeRef);
        }
        private native WalletType native_getWalletType(long _nativeRef);

        @Override
        public void getLastBlock(BlockCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getLastBlock(this.nativeRef, callback);
        }
        private native void native_getLastBlock(long _nativeRef, BlockCallback callback);

        @Override
        public void getAccountCreationInfo(int accountIndex, AccountCreationInfoCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getAccountCreationInfo(this.nativeRef, accountIndex, callback);
        }
        private native void native_getAccountCreationInfo(long _nativeRef, int accountIndex, AccountCreationInfoCallback callback);

        @Override
        public void getExtendedKeyAccountCreationInfo(int accountIndex, ExtendedKeyAccountCreationInfoCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getExtendedKeyAccountCreationInfo(this.nativeRef, accountIndex, callback);
        }
        private native void native_getExtendedKeyAccountCreationInfo(long _nativeRef, int accountIndex, ExtendedKeyAccountCreationInfoCallback callback);

        @Override
        public void getNextAccountCreationInfo(AccountCreationInfoCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getNextAccountCreationInfo(this.nativeRef, callback);
        }
        private native void native_getNextAccountCreationInfo(long _nativeRef, AccountCreationInfoCallback callback);

        @Override
        public void getNextExtendedKeyAccountCreationInfo(ExtendedKeyAccountCreationInfoCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getNextExtendedKeyAccountCreationInfo(this.nativeRef, callback);
        }
        private native void native_getNextExtendedKeyAccountCreationInfo(long _nativeRef, ExtendedKeyAccountCreationInfoCallback callback);

        @Override
        public void newAccountWithInfo(AccountCreationInfo accountCreationInfo, AccountCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_newAccountWithInfo(this.nativeRef, accountCreationInfo, callback);
        }
        private native void native_newAccountWithInfo(long _nativeRef, AccountCreationInfo accountCreationInfo, AccountCallback callback);

        @Override
        public void newAccountWithExtendedKeyInfo(ExtendedKeyAccountCreationInfo extendedKeyAccountCreationInfo, AccountCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_newAccountWithExtendedKeyInfo(this.nativeRef, extendedKeyAccountCreationInfo, callback);
        }
        private native void native_newAccountWithExtendedKeyInfo(long _nativeRef, ExtendedKeyAccountCreationInfo extendedKeyAccountCreationInfo, AccountCallback callback);

        @Override
        public void eraseDataSince(Date date, ErrorCodeCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_eraseDataSince(this.nativeRef, date, callback);
        }
        private native void native_eraseDataSince(long _nativeRef, Date date, ErrorCodeCallback callback);
    }
}
