// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package co.ledger.core;

import java.util.Date;
import java.util.concurrent.atomic.AtomicBoolean;

/**TODO */
public abstract class QueryFilter {
    public abstract QueryFilter opAnd(QueryFilter filter);

    public abstract QueryFilter opOr(QueryFilter filter);

    public abstract QueryFilter opAndNot(QueryFilter filter);

    public abstract QueryFilter opOrNot(QueryFilter filter);

    public static native QueryFilter accountEq(String accountUid);

    public static native QueryFilter accountNeq(String accountUid);

    public static native QueryFilter dateLte(Date time);

    public static native QueryFilter dateLt(Date time);

    public static native QueryFilter dateGt(Date time);

    public static native QueryFilter dateGte(Date time);

    public static native QueryFilter dateEq(Date time);

    public static native QueryFilter dateNeq(Date time);

    public static native QueryFilter containsRecipient(String recipientAddress);

    public static native QueryFilter containsSender(String senderAddress);

    public static native QueryFilter currencyEq(String currencyName);

    public static native QueryFilter operationUidEq(String operationUid);

    public static native QueryFilter operationUidNeq(String operationUid);

    public static native QueryFilter trustEq(TrustLevel trust);

    public static native QueryFilter trustNeq(TrustLevel trust);

    public static native QueryFilter feesEq(Amount amount);

    public static native QueryFilter feesNeq(Amount amount);

    public static native QueryFilter feesGte(Amount amount);

    public static native QueryFilter feesGt(Amount amount);

    public static native QueryFilter feesLte(Amount amount);

    public static native QueryFilter feesLt(Amount amount);

    public static native QueryFilter amountEq(Amount amount);

    public static native QueryFilter amountNeq(Amount amount);

    public static native QueryFilter amountGte(Amount amount);

    public static native QueryFilter amountGt(Amount amount);

    public static native QueryFilter amountLte(Amount amount);

    public static native QueryFilter amountLt(Amount amount);

    public static native QueryFilter blockHeightEq(long blockHeight);

    public static native QueryFilter blockHeightNeq(long blockHeight);

    public static native QueryFilter blockHeightGte(long blockHeight);

    public static native QueryFilter blockHeightGt(long blockHeight);

    public static native QueryFilter blockHeightLte(long blockHeight);

    public static native QueryFilter blockHeightLt(long blockHeight);

    public static native QueryFilter blockHeightIsNull();

    public static native QueryFilter operationTypeEq(OperationType operationType);

    public static native QueryFilter operationTypeNeq(OperationType operationType);

    private static final class CppProxy extends QueryFilter
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public QueryFilter opAnd(QueryFilter filter)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_opAnd(this.nativeRef, filter);
        }
        private native QueryFilter native_opAnd(long _nativeRef, QueryFilter filter);

        @Override
        public QueryFilter opOr(QueryFilter filter)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_opOr(this.nativeRef, filter);
        }
        private native QueryFilter native_opOr(long _nativeRef, QueryFilter filter);

        @Override
        public QueryFilter opAndNot(QueryFilter filter)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_opAndNot(this.nativeRef, filter);
        }
        private native QueryFilter native_opAndNot(long _nativeRef, QueryFilter filter);

        @Override
        public QueryFilter opOrNot(QueryFilter filter)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_opOrNot(this.nativeRef, filter);
        }
        private native QueryFilter native_opOrNot(long _nativeRef, QueryFilter filter);
    }
}
