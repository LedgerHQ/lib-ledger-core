// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from websocket_client.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class WebSocketConnection {
    public abstract void onConnect(int connectionId);

    public abstract void onClose();

    public abstract void onMessage(String data);

    public abstract void onError(ErrorCode code, String message);

    public abstract int getConnectionId();

    private static final class CppProxy extends WebSocketConnection
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void onConnect(int connectionId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onConnect(this.nativeRef, connectionId);
        }
        private native void native_onConnect(long _nativeRef, int connectionId);

        @Override
        public void onClose()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onClose(this.nativeRef);
        }
        private native void native_onClose(long _nativeRef);

        @Override
        public void onMessage(String data)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onMessage(this.nativeRef, data);
        }
        private native void native_onMessage(long _nativeRef, String data);

        @Override
        public void onError(ErrorCode code, String message)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onError(this.nativeRef, code, message);
        }
        private native void native_onError(long _nativeRef, ErrorCode code, String message);

        @Override
        public int getConnectionId()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getConnectionId(this.nativeRef);
        }
        private native int native_getConnectionId(long _nativeRef);
    }
}
