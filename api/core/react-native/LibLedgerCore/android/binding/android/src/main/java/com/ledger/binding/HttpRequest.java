// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from http_client.djinni

package co.ledger.core;

import java.util.HashMap;
import java.util.concurrent.atomic.AtomicBoolean;

/**Class representing an Http request */
public abstract class HttpRequest {
    /**
     *Get method of request
     *@return HttpMethod enum entry
     */
    public abstract HttpMethod getMethod();

    /**
     *Get headers set in the request
     *@return Map with key and value of type string
     */
    public abstract HashMap<String, String> getHeaders();

    /**
     *Get body of request
     *@return binary
     */
    public abstract byte[] getBody();

    /**
     *Get Url of request
     *@return string
     */
    public abstract String getUrl();

    /**
     *Method called when reauest is completed
     *@param response, Optional HttpUrlConnection object, response of request if succeed
     *@param error, optional Error structure, error returned in case of request failure
     */
    public abstract void complete(HttpUrlConnection response, Error error);

    private static final class CppProxy extends HttpRequest
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public HttpMethod getMethod()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMethod(this.nativeRef);
        }
        private native HttpMethod native_getMethod(long _nativeRef);

        @Override
        public HashMap<String, String> getHeaders()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getHeaders(this.nativeRef);
        }
        private native HashMap<String, String> native_getHeaders(long _nativeRef);

        @Override
        public byte[] getBody()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBody(this.nativeRef);
        }
        private native byte[] native_getBody(long _nativeRef);

        @Override
        public String getUrl()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getUrl(this.nativeRef);
        }
        private native String native_getUrl(long _nativeRef);

        @Override
        public void complete(HttpUrlConnection response, Error error)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_complete(this.nativeRef, response, error);
        }
        private native void native_complete(long _nativeRef, HttpUrlConnection response, Error error);
    }
}
