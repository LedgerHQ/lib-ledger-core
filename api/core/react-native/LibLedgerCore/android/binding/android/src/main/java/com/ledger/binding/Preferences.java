// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from preferences.djinni

package co.ledger.core;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Interface for accessing and modifying custom preferences. Preferences are key - value data which will be persisted to
 * the filesystem. They can be local or stored with the Ledger API backend (encrypted by a user secret). This can be used to
 * attach application data to the libledger-core modules (i.e. a wallet pool, a wallet, an account, an operation). This interface
 * is highly inspired by Android SharedPreferences.
 */
public abstract class Preferences {
    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    public abstract String getString(String key, String fallbackValue);

    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    public abstract int getInt(String key, int fallbackValue);

    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    public abstract long getLong(String key, long fallbackValue);

    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    public abstract boolean getBoolean(String key, boolean fallbackValue);

    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    public abstract ArrayList<String> getStringArray(String key, ArrayList<String> fallbackValue);

    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    public abstract byte[] getData(String key, byte[] fallbackValue);

    /**
     * Checks whether the Preferences contains the given key.
     * @return true the preferences contains the key, false otherwise.
     */
    public abstract boolean contains(String key);

    /**
     * Get a preferences editor in order to add/modify/remove data.
     * @return An interface for editting preferences.
     */
    public abstract PreferencesEditor edit();

    private static final class CppProxy extends Preferences
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String getString(String key, String fallbackValue)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getString(this.nativeRef, key, fallbackValue);
        }
        private native String native_getString(long _nativeRef, String key, String fallbackValue);

        @Override
        public int getInt(String key, int fallbackValue)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getInt(this.nativeRef, key, fallbackValue);
        }
        private native int native_getInt(long _nativeRef, String key, int fallbackValue);

        @Override
        public long getLong(String key, long fallbackValue)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLong(this.nativeRef, key, fallbackValue);
        }
        private native long native_getLong(long _nativeRef, String key, long fallbackValue);

        @Override
        public boolean getBoolean(String key, boolean fallbackValue)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBoolean(this.nativeRef, key, fallbackValue);
        }
        private native boolean native_getBoolean(long _nativeRef, String key, boolean fallbackValue);

        @Override
        public ArrayList<String> getStringArray(String key, ArrayList<String> fallbackValue)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getStringArray(this.nativeRef, key, fallbackValue);
        }
        private native ArrayList<String> native_getStringArray(long _nativeRef, String key, ArrayList<String> fallbackValue);

        @Override
        public byte[] getData(String key, byte[] fallbackValue)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getData(this.nativeRef, key, fallbackValue);
        }
        private native byte[] native_getData(long _nativeRef, String key, byte[] fallbackValue);

        @Override
        public boolean contains(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_contains(this.nativeRef, key);
        }
        private native boolean native_contains(long _nativeRef, String key);

        @Override
        public PreferencesEditor edit()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_edit(this.nativeRef);
        }
        private native PreferencesEditor native_edit(long _nativeRef);
    }
}
