// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from preferences.djinni

package co.ledger.core;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

/** Interface for editting Preferences. All changes to the editor are persisted to the disk only when comitted. */
public abstract class PreferencesEditor {
    /**
     * Sets the value to the given key in the Preferences.
     * @param key The data key.
     * @param value The value to store
     * @return The reference of self in order to chain the call to the editor.
     */
    public abstract PreferencesEditor putString(String key, String value);

    /**
     * Sets the value to the given key in the Preferences.
     * @param key The data key.
     * @param value The value to store
     * @return The reference of self in order to chain the call to the editor.
     */
    public abstract PreferencesEditor putInt(String key, int value);

    /**
     * Sets the value to the given key in the Preferences.
     * @param key The data key.
     * @param value The value to store
     * @return The reference of self in order to chain the call to the editor.
     */
    public abstract PreferencesEditor putLong(String key, long value);

    /**
     * Sets the value to the given key in the Preferences.
     * @param key The data key.
     * @param value The value to store
     * @return The reference of self in order to chain the call to the editor.
     */
    public abstract PreferencesEditor putBoolean(String key, boolean value);

    /**
     * Sets the value to the given key in the Preferences.
     * @param key The data key.
     * @param value The value to store
     * @return The reference of self in order to chain the call to the editor.
     */
    public abstract PreferencesEditor putStringArray(String key, ArrayList<String> value);

    /**
     * Sets the value to the given key in the Preferences.
     * @param key The data key.
     * @param value The value to store
     * @return The reference of self in order to chain the call to the editor.
     */
    public abstract PreferencesEditor putData(String key, byte[] value);

    /**
     * Removes the data associated with the given key.
     * @param key The key to remove from the Preferences
     * @return The reference of self in order to chain the call to the editor.
     */
    public abstract PreferencesEditor remove(String key);

    /** Persists the changes to the Preferences. */
    public abstract void commit();

    private static final class CppProxy extends PreferencesEditor
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public PreferencesEditor putString(String key, String value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putString(this.nativeRef, key, value);
        }
        private native PreferencesEditor native_putString(long _nativeRef, String key, String value);

        @Override
        public PreferencesEditor putInt(String key, int value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putInt(this.nativeRef, key, value);
        }
        private native PreferencesEditor native_putInt(long _nativeRef, String key, int value);

        @Override
        public PreferencesEditor putLong(String key, long value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putLong(this.nativeRef, key, value);
        }
        private native PreferencesEditor native_putLong(long _nativeRef, String key, long value);

        @Override
        public PreferencesEditor putBoolean(String key, boolean value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putBoolean(this.nativeRef, key, value);
        }
        private native PreferencesEditor native_putBoolean(long _nativeRef, String key, boolean value);

        @Override
        public PreferencesEditor putStringArray(String key, ArrayList<String> value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putStringArray(this.nativeRef, key, value);
        }
        private native PreferencesEditor native_putStringArray(long _nativeRef, String key, ArrayList<String> value);

        @Override
        public PreferencesEditor putData(String key, byte[] value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putData(this.nativeRef, key, value);
        }
        private native PreferencesEditor native_putData(long _nativeRef, String key, byte[] value);

        @Override
        public PreferencesEditor remove(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_remove(this.nativeRef, key);
        }
        private native PreferencesEditor native_remove(long _nativeRef, String key);

        @Override
        public void commit()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_commit(this.nativeRef);
        }
        private native void native_commit(long _nativeRef);
    }
}
