// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from logger.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

/**Class to print logs to console */
public abstract class Logger {
    /**
     *Print debug message to console
     *@param tag, string
     *@param message, string
     */
    public abstract void d(String tag, String message);

    /**
     *Print information message to console
     *@param tag, string
     *@param message, string
     */
    public abstract void i(String tag, String message);

    /**
     *Print error message to console
     *@param tag, string
     *@param message, string
     */
    public abstract void e(String tag, String message);

    /**
     *Print warning message to console
     *@param tag, string
     *@param message, string
     */
    public abstract void w(String tag, String message);

    /**
     *Print critical error message to console
     *@param tag, string
     *@param message, string
     */
    public abstract void c(String tag, String message);

    private static final class CppProxy extends Logger
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void d(String tag, String message)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_d(this.nativeRef, tag, message);
        }
        private native void native_d(long _nativeRef, String tag, String message);

        @Override
        public void i(String tag, String message)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_i(this.nativeRef, tag, message);
        }
        private native void native_i(long _nativeRef, String tag, String message);

        @Override
        public void e(String tag, String message)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_e(this.nativeRef, tag, message);
        }
        private native void native_e(long _nativeRef, String tag, String message);

        @Override
        public void w(String tag, String message)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_w(this.nativeRef, tag, message);
        }
        private native void native_w(long _nativeRef, String tag, String message);

        @Override
        public void c(String tag, String message)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_c(this.nativeRef, tag, message);
        }
        private native void native_c(long _nativeRef, String tag, String message);
    }
}
