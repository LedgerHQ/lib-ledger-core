// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from emitter.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

/**Class representing an event bus through which a receiver gets notified */
public abstract class EventBus {
    /**
     *Subscribe an event receiver to the event bus
     *@param context, ExecutionContext object, execution context in which receiver will be notified
     *@param reveiver, EventReceiver object, receiver that event bu will notify
     */
    public abstract void subscribe(ExecutionContext context, EventReceiver receiver);

    /**
     *Unsubscribe an event receiver from the event bus
     *@param receiver, EventReceiver object, receiver to unsubscribe
     */
    public abstract void unsubscribe(EventReceiver receiver);

    private static final class CppProxy extends EventBus
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void subscribe(ExecutionContext context, EventReceiver receiver)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_subscribe(this.nativeRef, context, receiver);
        }
        private native void native_subscribe(long _nativeRef, ExecutionContext context, EventReceiver receiver);

        @Override
        public void unsubscribe(EventReceiver receiver)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_unsubscribe(this.nativeRef, receiver);
        }
        private native void native_unsubscribe(long _nativeRef, EventReceiver receiver);
    }
}
