// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

#ifndef DJINNI_GENERATED_INTERNALTRANSACTION_HPP
#define DJINNI_GENERATED_INTERNALTRANSACTION_HPP

#include <cstdint>
#include <memory>
#include <string>
#include <vector>
#ifndef LIBCORE_EXPORT
    #if defined(_MSC_VER)
       #include <libcore_export.h>
    #else
       #define LIBCORE_EXPORT
    #endif
#endif

namespace ledger { namespace core { namespace api {

class BigInt;
enum class OperationType;

/** Class representing an Ethereum internal transaction. */
class LIBCORE_EXPORT InternalTransaction {
public:
    virtual ~InternalTransaction() {}

    /** Get start gas (in wei) : maximum amount of gas the originator is willing to pay. */
    virtual std::shared_ptr<BigInt> getGasLimit() = 0;

    /** Used gas (in wei) : used gas during this transaction: */
    virtual std::shared_ptr<BigInt> getUsedGas() = 0;

    /** Get source ETH address. */
    virtual std::string getSender() = 0;

    /** Get destination ETH address. */
    virtual std::string getReceiver() = 0;

    /** Get amount of ether to send. */
    virtual std::shared_ptr<BigInt> getValue() = 0;

    /** Get binary data payload. */
    virtual std::vector<uint8_t> getData() = 0;

    /** Get operation type : whether it is a SEND or RECEIVE. */
    virtual OperationType getOperationType() = 0;
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_INTERNALTRANSACTION_HPP
