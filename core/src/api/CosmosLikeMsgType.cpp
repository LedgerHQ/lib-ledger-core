// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

#include "CosmosLikeMsgType.hpp"  // my header
#include "enum_from_string.hpp"

namespace ledger { namespace core { namespace api {

std::string to_string(const CosmosLikeMsgType& cosmosLikeMsgType) {
    switch (cosmosLikeMsgType) {
        case CosmosLikeMsgType::MSGSEND: return "MSGSEND";
        case CosmosLikeMsgType::MSGDELEGATE: return "MSGDELEGATE";
        case CosmosLikeMsgType::MSGUNDELEGATE: return "MSGUNDELEGATE";
        case CosmosLikeMsgType::MSGREDELEGATE: return "MSGREDELEGATE";
        case CosmosLikeMsgType::MSGSUBMITPROPOSAL: return "MSGSUBMITPROPOSAL";
        case CosmosLikeMsgType::MSGVOTE: return "MSGVOTE";
        case CosmosLikeMsgType::MSGDEPOSIT: return "MSGDEPOSIT";
        case CosmosLikeMsgType::MSGWITHDRAWDELEGATIONREWARD: return "MSGWITHDRAWDELEGATIONREWARD";
        case CosmosLikeMsgType::MSGMULTISEND: return "MSGMULTISEND";
        case CosmosLikeMsgType::MSGCREATEVALIDATOR: return "MSGCREATEVALIDATOR";
        case CosmosLikeMsgType::MSGEDITVALIDATOR: return "MSGEDITVALIDATOR";
        case CosmosLikeMsgType::MSGSETWITHDRAWADDRESS: return "MSGSETWITHDRAWADDRESS";
        case CosmosLikeMsgType::MSGWITHDRAWDELEGATORREWARD: return "MSGWITHDRAWDELEGATORREWARD";
        case CosmosLikeMsgType::MSGWITHDRAWVALIDATORCOMMISSION: return "MSGWITHDRAWVALIDATORCOMMISSION";
        case CosmosLikeMsgType::MSGUNJAIL: return "MSGUNJAIL";
        case CosmosLikeMsgType::UNSUPPORTED: return "UNSUPPORTED";
    };
};
template <>
CosmosLikeMsgType from_string(const std::string& cosmosLikeMsgType) {
    if (cosmosLikeMsgType == "MSGSEND") return CosmosLikeMsgType::MSGSEND;
    else if (cosmosLikeMsgType == "MSGDELEGATE") return CosmosLikeMsgType::MSGDELEGATE;
    else if (cosmosLikeMsgType == "MSGUNDELEGATE") return CosmosLikeMsgType::MSGUNDELEGATE;
    else if (cosmosLikeMsgType == "MSGREDELEGATE") return CosmosLikeMsgType::MSGREDELEGATE;
    else if (cosmosLikeMsgType == "MSGSUBMITPROPOSAL") return CosmosLikeMsgType::MSGSUBMITPROPOSAL;
    else if (cosmosLikeMsgType == "MSGVOTE") return CosmosLikeMsgType::MSGVOTE;
    else if (cosmosLikeMsgType == "MSGDEPOSIT") return CosmosLikeMsgType::MSGDEPOSIT;
    else if (cosmosLikeMsgType == "MSGWITHDRAWDELEGATIONREWARD") return CosmosLikeMsgType::MSGWITHDRAWDELEGATIONREWARD;
    else if (cosmosLikeMsgType == "MSGMULTISEND") return CosmosLikeMsgType::MSGMULTISEND;
    else if (cosmosLikeMsgType == "MSGCREATEVALIDATOR") return CosmosLikeMsgType::MSGCREATEVALIDATOR;
    else if (cosmosLikeMsgType == "MSGEDITVALIDATOR") return CosmosLikeMsgType::MSGEDITVALIDATOR;
    else if (cosmosLikeMsgType == "MSGSETWITHDRAWADDRESS") return CosmosLikeMsgType::MSGSETWITHDRAWADDRESS;
    else if (cosmosLikeMsgType == "MSGWITHDRAWDELEGATORREWARD") return CosmosLikeMsgType::MSGWITHDRAWDELEGATORREWARD;
    else if (cosmosLikeMsgType == "MSGWITHDRAWVALIDATORCOMMISSION") return CosmosLikeMsgType::MSGWITHDRAWVALIDATORCOMMISSION;
    else if (cosmosLikeMsgType == "MSGUNJAIL") return CosmosLikeMsgType::MSGUNJAIL;
    else return CosmosLikeMsgType::UNSUPPORTED;
};

std::ostream &operator<<(std::ostream &os, const CosmosLikeMsgType &o)
{
    switch (o) {
        case CosmosLikeMsgType::MSGSEND:  return os << "MSGSEND";
        case CosmosLikeMsgType::MSGDELEGATE:  return os << "MSGDELEGATE";
        case CosmosLikeMsgType::MSGUNDELEGATE:  return os << "MSGUNDELEGATE";
        case CosmosLikeMsgType::MSGREDELEGATE:  return os << "MSGREDELEGATE";
        case CosmosLikeMsgType::MSGSUBMITPROPOSAL:  return os << "MSGSUBMITPROPOSAL";
        case CosmosLikeMsgType::MSGVOTE:  return os << "MSGVOTE";
        case CosmosLikeMsgType::MSGDEPOSIT:  return os << "MSGDEPOSIT";
        case CosmosLikeMsgType::MSGWITHDRAWDELEGATIONREWARD:  return os << "MSGWITHDRAWDELEGATIONREWARD";
        case CosmosLikeMsgType::MSGMULTISEND:  return os << "MSGMULTISEND";
        case CosmosLikeMsgType::MSGCREATEVALIDATOR:  return os << "MSGCREATEVALIDATOR";
        case CosmosLikeMsgType::MSGEDITVALIDATOR:  return os << "MSGEDITVALIDATOR";
        case CosmosLikeMsgType::MSGSETWITHDRAWADDRESS:  return os << "MSGSETWITHDRAWADDRESS";
        case CosmosLikeMsgType::MSGWITHDRAWDELEGATORREWARD:  return os << "MSGWITHDRAWDELEGATORREWARD";
        case CosmosLikeMsgType::MSGWITHDRAWVALIDATORCOMMISSION:  return os << "MSGWITHDRAWVALIDATORCOMMISSION";
        case CosmosLikeMsgType::MSGUNJAIL:  return os << "MSGUNJAIL";
        case CosmosLikeMsgType::UNSUPPORTED:  return os << "UNSUPPORTED";
    }
}

} } }  // namespace ledger::core::api
