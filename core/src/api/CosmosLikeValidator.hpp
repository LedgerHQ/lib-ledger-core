// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from validators.djinni

#ifndef DJINNI_GENERATED_COSMOSLIKEVALIDATOR_HPP
#define DJINNI_GENERATED_COSMOSLIKEVALIDATOR_HPP

#include "../utils/optional.hpp"
#include "CosmosLikeValidatorCommission.hpp"
#include "CosmosLikeValidatorDescription.hpp"
#include <chrono>
#include <cstdint>
#include <iostream>
#include <string>
#include <utility>
#include <vector>

namespace ledger { namespace core { namespace api {

/** Structure holding Validator related information */
struct CosmosLikeValidator final {
    /** Description of the validator as given at Creation/Edition */
    CosmosLikeValidatorDescription description;
    /** Current commission rates and last commission update */
    CosmosLikeValidatorCommission commission;
    /** Last time an unbonding has been called. 0 if no unbonding called */
    int32_t unbondingHeight;
    /** Timestamp for the end of the last unbonding that happened */
    std::experimental::optional<std::chrono::system_clock::time_point> unbondingTime;
    /** Minimum self delegation (in uatom for CosmosHub) */
    std::string minSelfDelegation;
    /** Jailed status */
    bool jailed;
    /** Voting Power */
    std::string votingPower;
    /** Operator address (cosmosvaloper) */
    std::string operatorAddress;
    /** Consensus public key (cosmosvalconspub) */
    std::string consensusPubkey;
    /** Status (Unbonded - Unbonding - Bonded) Goes from 0 to 2 or 1 to 3 depending on API (see https://github.com/cosmos/cosmos-sdk/commit/53bf2271d5bac054a8f74723732f21055c1b72d4#diff-f54554903608b8b89649f532c8f1a78cL43) */
    int32_t status;
    /** Timestamps of slash events (no option = do not trust the info ; empty list in option = trust that it's clean) */
    std::experimental::optional<std::vector<std::chrono::system_clock::time_point>> slashTimestamps;

    CosmosLikeValidator(CosmosLikeValidatorDescription description_,
                        CosmosLikeValidatorCommission commission_,
                        int32_t unbondingHeight_,
                        std::experimental::optional<std::chrono::system_clock::time_point> unbondingTime_,
                        std::string minSelfDelegation_,
                        bool jailed_,
                        std::string votingPower_,
                        std::string operatorAddress_,
                        std::string consensusPubkey_,
                        int32_t status_,
                        std::experimental::optional<std::vector<std::chrono::system_clock::time_point>> slashTimestamps_)
    : description(std::move(description_))
    , commission(std::move(commission_))
    , unbondingHeight(std::move(unbondingHeight_))
    , unbondingTime(std::move(unbondingTime_))
    , minSelfDelegation(std::move(minSelfDelegation_))
    , jailed(std::move(jailed_))
    , votingPower(std::move(votingPower_))
    , operatorAddress(std::move(operatorAddress_))
    , consensusPubkey(std::move(consensusPubkey_))
    , status(std::move(status_))
    , slashTimestamps(std::move(slashTimestamps_))
    {}

    CosmosLikeValidator(const CosmosLikeValidator& cpy) {
       this->description = cpy.description;
       this->commission = cpy.commission;
       this->unbondingHeight = cpy.unbondingHeight;
       this->unbondingTime = cpy.unbondingTime;
       this->minSelfDelegation = cpy.minSelfDelegation;
       this->jailed = cpy.jailed;
       this->votingPower = cpy.votingPower;
       this->operatorAddress = cpy.operatorAddress;
       this->consensusPubkey = cpy.consensusPubkey;
       this->status = cpy.status;
       this->slashTimestamps = cpy.slashTimestamps;
    }

    CosmosLikeValidator() = default;


    CosmosLikeValidator& operator=(const CosmosLikeValidator& cpy) {
       this->description = cpy.description;
       this->commission = cpy.commission;
       this->unbondingHeight = cpy.unbondingHeight;
       this->unbondingTime = cpy.unbondingTime;
       this->minSelfDelegation = cpy.minSelfDelegation;
       this->jailed = cpy.jailed;
       this->votingPower = cpy.votingPower;
       this->operatorAddress = cpy.operatorAddress;
       this->consensusPubkey = cpy.consensusPubkey;
       this->status = cpy.status;
       this->slashTimestamps = cpy.slashTimestamps;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(description, commission, unbondingHeight, unbondingTime, minSelfDelegation, jailed, votingPower, operatorAddress, consensusPubkey, status, slashTimestamps);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(description, commission, unbondingHeight, unbondingTime, minSelfDelegation, jailed, votingPower, operatorAddress, consensusPubkey, status, slashTimestamps);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_COSMOSLIKEVALIDATOR_HPP
