// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#ifndef DJINNI_GENERATED_BITCOINLIKEACCOUNT_HPP
#define DJINNI_GENERATED_BITCOINLIKEACCOUNT_HPP

#include <cstdint>
#include <memory>
#include <vector>
#ifndef LIBCORE_EXPORT
    #if defined(_MSC_VER)
       #include <libcore_export.h>
    #else
       #define LIBCORE_EXPORT
    #endif
#endif

namespace ledger { namespace core { namespace api {

class Address;
class AddressListCallback;
class BigIntListCallback;
class BitcoinLikeOutputListCallback;
class BitcoinLikeTransaction;
class BitcoinLikeTransactionBuilder;
class I32Callback;
class StringCallback;

/** Class representing a Bitcoin account. */
class LIBCORE_EXPORT BitcoinLikeAccount {
public:
    virtual ~BitcoinLikeAccount() {}

    /**
     * Get UTXOs of account in a given range.
     * @param from, integer, lower bound for account's UTXO's index
     * @param to, integer, upper bound for account's UTXO's index
     * @param callback, ListCallback object which returns a list of BitcoinLikeOutput if getUTXO succeed
     */
    virtual void getUTXO(int32_t from, int32_t to, const std::shared_ptr<BitcoinLikeOutputListCallback> & callback) = 0;

    /**
     * Get UTXOs count of account.
     * @param callback, Callback object which returns number of UTXO owned by this account
     */
    virtual void getUTXOCount(const std::shared_ptr<I32Callback> & callback) = 0;

    virtual void broadcastRawTransaction(const std::vector<uint8_t> & transaction, const std::shared_ptr<StringCallback> & callback) = 0;

    virtual void broadcastTransaction(const std::shared_ptr<BitcoinLikeTransaction> & transaction, const std::shared_ptr<StringCallback> & callback) = 0;

    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> buildTransaction(bool partial) = 0;

    /**
     * Get fees from network, fees are ordered in descending order (i.e. fastest to slowest confirmation)
     * Note: it would have been better to have this method on BitcoinLikeWallet
     * but since BitcoinLikeWallet is not used anywhere, it's better to keep all
     * specific methods under the same specific class so it will be easy to segratate
     * when the right time comes !
     */
    virtual void getFees(const std::shared_ptr<BigIntListCallback> & callback) = 0;

    /**
     * Get addresses given a range of indices
     * Note: this will return public and change addresses
     */
    virtual void getAddresses(int64_t from, int64_t to, const std::shared_ptr<AddressListCallback> & callback) = 0;

    /** get all contained adresses. */
    virtual std::vector<std::shared_ptr<Address>> getAllAddresses() = 0;
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_BITCOINLIKEACCOUNT_HPP
