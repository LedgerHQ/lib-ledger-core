// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from amount.djinni

#ifndef DJINNI_GENERATED_ROUNDINGMODE_HPP
#define DJINNI_GENERATED_ROUNDINGMODE_HPP

#include <functional>
#include <iostream>
#include <string>
#ifndef LIBCORE_EXPORT
    #if defined(_MSC_VER)
       #include <libcore_export.h>
    #else
       #define LIBCORE_EXPORT
    #endif
#endif

namespace ledger { namespace core { namespace api {

enum class RoundingMode : int {
    /** The extra decimals are just dropped. */
    TRUNCATED,
    /** The extra decimals are dropped and the new last decimal is rounded half down (x.0). */
    ROUND_HALF_DOWN,
    /**
     * The extra decimals are dropped and the new last decimal is rounded half down or middle
     * according to the fractional part (x.0 or (x+1).0).
     */
    ROUND_HALF_EVEN,
    /** The extra decimals are dropped and the new last decimal is rounded half up ((x+1).0). */
    ROUND_HALF_UP,
};
LIBCORE_EXPORT  std::string to_string(const RoundingMode& roundingMode);
LIBCORE_EXPORT  std::ostream &operator<<(std::ostream &os, const RoundingMode &o);

} } }  // namespace ledger::core::api

namespace std {

template <>
struct hash<::ledger::core::api::RoundingMode> {
    size_t operator()(::ledger::core::api::RoundingMode type) const {
        return std::hash<int>()(static_cast<int>(type));
    }
};

}  // namespace std
#endif //DJINNI_GENERATED_ROUNDINGMODE_HPP
