// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#include "BitcoinLikeSignatureState.hpp"  // my header
#include "enum_from_string.hpp"

namespace ledger { namespace core { namespace api {

std::string to_string(const BitcoinLikeSignatureState& bitcoinLikeSignatureState) {
    switch (bitcoinLikeSignatureState) {
        case BitcoinLikeSignatureState::ALREADY_SIGNED: return "ALREADY_SIGNED";
        case BitcoinLikeSignatureState::MISSING_DATA: return "MISSING_DATA";
        case BitcoinLikeSignatureState::SIGNING_SUCCEED: return "SIGNING_SUCCEED";
    };
};
template <>
BitcoinLikeSignatureState from_string(const std::string& bitcoinLikeSignatureState) {
    if (bitcoinLikeSignatureState == "ALREADY_SIGNED") return BitcoinLikeSignatureState::ALREADY_SIGNED;
    else if (bitcoinLikeSignatureState == "MISSING_DATA") return BitcoinLikeSignatureState::MISSING_DATA;
    else return BitcoinLikeSignatureState::SIGNING_SUCCEED;
};

std::ostream &operator<<(std::ostream &os, const BitcoinLikeSignatureState &o)
{
    switch (o) {
        case BitcoinLikeSignatureState::ALREADY_SIGNED:  return os << "ALREADY_SIGNED";
        case BitcoinLikeSignatureState::MISSING_DATA:  return os << "MISSING_DATA";
        case BitcoinLikeSignatureState::SIGNING_SUCCEED:  return os << "SIGNING_SUCCEED";
    }
}

} } }  // namespace ledger::core::api
