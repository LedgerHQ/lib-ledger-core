// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from addresses.djinni

#ifndef DJINNI_GENERATED_TEZOSLIKENETWORKPARAMETERS_HPP
#define DJINNI_GENERATED_TEZOSLIKENETWORKPARAMETERS_HPP

#include <cstdint>
#include <iostream>
#include <string>
#include <utility>
#include <vector>

namespace ledger { namespace core { namespace api {

struct TezosLikeNetworkParameters final {
    /** Name of the network. */
    std::string Identifier;
    /** Constant prefix to prepend all signature messages. */
    std::string MessagePrefix;
    /** Version of the Extended Public Key standard. */
    std::vector<uint8_t> XPUBVersion;
    /** Prefix useful during implicit address construction from pubKey hash */
    std::vector<uint8_t> ImplicitPrefix;
    /** Prefix useful during originated address construction from pubKey hash */
    std::vector<uint8_t> OriginatedPrefix;
    /** Addition TIPs enabled for this network. */
    std::vector<std::string> AdditionalTIPs;
    /** Delay applied to all timestamps. Used to debounce transactions. */
    int64_t TimestampDelay;

    TezosLikeNetworkParameters(std::string Identifier_,
                               std::string MessagePrefix_,
                               std::vector<uint8_t> XPUBVersion_,
                               std::vector<uint8_t> ImplicitPrefix_,
                               std::vector<uint8_t> OriginatedPrefix_,
                               std::vector<std::string> AdditionalTIPs_,
                               int64_t TimestampDelay_)
    : Identifier(std::move(Identifier_))
    , MessagePrefix(std::move(MessagePrefix_))
    , XPUBVersion(std::move(XPUBVersion_))
    , ImplicitPrefix(std::move(ImplicitPrefix_))
    , OriginatedPrefix(std::move(OriginatedPrefix_))
    , AdditionalTIPs(std::move(AdditionalTIPs_))
    , TimestampDelay(std::move(TimestampDelay_))
    {}

    TezosLikeNetworkParameters(const TezosLikeNetworkParameters& cpy) {
       this->Identifier = cpy.Identifier;
       this->MessagePrefix = cpy.MessagePrefix;
       this->XPUBVersion = cpy.XPUBVersion;
       this->ImplicitPrefix = cpy.ImplicitPrefix;
       this->OriginatedPrefix = cpy.OriginatedPrefix;
       this->AdditionalTIPs = cpy.AdditionalTIPs;
       this->TimestampDelay = cpy.TimestampDelay;
    }

    TezosLikeNetworkParameters() = default;


    TezosLikeNetworkParameters& operator=(const TezosLikeNetworkParameters& cpy) {
       this->Identifier = cpy.Identifier;
       this->MessagePrefix = cpy.MessagePrefix;
       this->XPUBVersion = cpy.XPUBVersion;
       this->ImplicitPrefix = cpy.ImplicitPrefix;
       this->OriginatedPrefix = cpy.OriginatedPrefix;
       this->AdditionalTIPs = cpy.AdditionalTIPs;
       this->TimestampDelay = cpy.TimestampDelay;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(Identifier, MessagePrefix, XPUBVersion, ImplicitPrefix, OriginatedPrefix, AdditionalTIPs, TimestampDelay);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(Identifier, MessagePrefix, XPUBVersion, ImplicitPrefix, OriginatedPrefix, AdditionalTIPs, TimestampDelay);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_TEZOSLIKENETWORKPARAMETERS_HPP
