// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from amount.djinni

#ifndef DJINNI_GENERATED_FORMATRULES_HPP
#define DJINNI_GENERATED_FORMATRULES_HPP

#include "RoundingMode.hpp"
#include <cstdint>
#include <iostream>
#include <utility>

namespace ledger { namespace core { namespace api {

/** Formatting rules to format amounts to strings. */
struct FormatRules final {
    /** How should we round decimal values? */
    RoundingMode roundingMode;
    /** The maximum number of decimals formatted decimals will have. */
    int32_t maxNumberOfDecimals;

    FormatRules(RoundingMode roundingMode_,
                int32_t maxNumberOfDecimals_)
    : roundingMode(std::move(roundingMode_))
    , maxNumberOfDecimals(std::move(maxNumberOfDecimals_))
    {}

    FormatRules(const FormatRules& cpy) {
       this->roundingMode = cpy.roundingMode;
       this->maxNumberOfDecimals = cpy.maxNumberOfDecimals;
    }

    FormatRules() = default;


    FormatRules& operator=(const FormatRules& cpy) {
       this->roundingMode = cpy.roundingMode;
       this->maxNumberOfDecimals = cpy.maxNumberOfDecimals;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(roundingMode, maxNumberOfDecimals);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(roundingMode, maxNumberOfDecimals);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_FORMATRULES_HPP
