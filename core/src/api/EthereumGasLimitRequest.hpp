// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

#ifndef DJINNI_GENERATED_ETHEREUMGASLIMITREQUEST_HPP
#define DJINNI_GENERATED_ETHEREUMGASLIMITREQUEST_HPP

#include "../utils/optional.hpp"
#include <iostream>
#include <string>
#include <utility>

namespace ledger { namespace core { namespace api {

/** Class representing a GasLimit request for the Eth explorers */
struct EthereumGasLimitRequest final {
    /** From address used in the contract transaction */
    std::experimental::optional<std::string> from;
    /** To address used in the contract transaction (so the contract address) */
    std::experimental::optional<std::string> to;
    /** Value field of the contract transaction */
    std::experimental::optional<std::string> value;
    /** Data field of the contract transaction */
    std::experimental::optional<std::string> data;
    /** Gas sent to the contract transaction */
    std::experimental::optional<std::string> gas;
    /** Current gas price */
    std::experimental::optional<std::string> gasPrice;
    /** Amplifier coefficient for safety */
    std::experimental::optional<double> amplifier;

    EthereumGasLimitRequest(std::experimental::optional<std::string> from_,
                            std::experimental::optional<std::string> to_,
                            std::experimental::optional<std::string> value_,
                            std::experimental::optional<std::string> data_,
                            std::experimental::optional<std::string> gas_,
                            std::experimental::optional<std::string> gasPrice_,
                            std::experimental::optional<double> amplifier_)
    : from(std::move(from_))
    , to(std::move(to_))
    , value(std::move(value_))
    , data(std::move(data_))
    , gas(std::move(gas_))
    , gasPrice(std::move(gasPrice_))
    , amplifier(std::move(amplifier_))
    {}

    EthereumGasLimitRequest(const EthereumGasLimitRequest& cpy) {
       this->from = cpy.from;
       this->to = cpy.to;
       this->value = cpy.value;
       this->data = cpy.data;
       this->gas = cpy.gas;
       this->gasPrice = cpy.gasPrice;
       this->amplifier = cpy.amplifier;
    }

    EthereumGasLimitRequest() = default;


    EthereumGasLimitRequest& operator=(const EthereumGasLimitRequest& cpy) {
       this->from = cpy.from;
       this->to = cpy.to;
       this->value = cpy.value;
       this->data = cpy.data;
       this->gas = cpy.gas;
       this->gasPrice = cpy.gasPrice;
       this->amplifier = cpy.amplifier;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(from, to, value, data, gas, gasPrice, amplifier);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(from, to, value, data, gas, gasPrice, amplifier);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_ETHEREUMGASLIMITREQUEST_HPP
