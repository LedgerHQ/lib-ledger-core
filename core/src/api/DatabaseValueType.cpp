// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#include "DatabaseValueType.hpp"  // my header
#include "enum_from_string.hpp"

namespace ledger { namespace core { namespace api {

std::string to_string(const DatabaseValueType& databaseValueType) {
    switch (databaseValueType) {
        case DatabaseValueType::STRING: return "STRING";
        case DatabaseValueType::DATE: return "DATE";
        case DatabaseValueType::DOUBLE: return "DOUBLE";
        case DatabaseValueType::INTEGER: return "INTEGER";
        case DatabaseValueType::LONG_LONG: return "LONG_LONG";
        case DatabaseValueType::UNSIGNED_LONG_LONG: return "UNSIGNED_LONG_LONG";
        case DatabaseValueType::BLOB: return "BLOB";
        default: return "UNKNOWN";
    };
};
template <>
DatabaseValueType from_string(const std::string& databaseValueType) {
    if (databaseValueType == "STRING") return DatabaseValueType::STRING;
    else if (databaseValueType == "DATE") return DatabaseValueType::DATE;
    else if (databaseValueType == "DOUBLE") return DatabaseValueType::DOUBLE;
    else if (databaseValueType == "INTEGER") return DatabaseValueType::INTEGER;
    else if (databaseValueType == "LONG_LONG") return DatabaseValueType::LONG_LONG;
    else if (databaseValueType == "UNSIGNED_LONG_LONG") return DatabaseValueType::UNSIGNED_LONG_LONG;
    else return DatabaseValueType::BLOB;
};

std::ostream &operator<<(std::ostream &os, const DatabaseValueType &o)
{
    switch (o) {
        case DatabaseValueType::STRING:  return os << "STRING";
        case DatabaseValueType::DATE:  return os << "DATE";
        case DatabaseValueType::DOUBLE:  return os << "DOUBLE";
        case DatabaseValueType::INTEGER:  return os << "INTEGER";
        case DatabaseValueType::LONG_LONG:  return os << "LONG_LONG";
        case DatabaseValueType::UNSIGNED_LONG_LONG:  return os << "UNSIGNED_LONG_LONG";
        case DatabaseValueType::BLOB:  return os << "BLOB";
    }
}

} } }  // namespace ledger::core::api
