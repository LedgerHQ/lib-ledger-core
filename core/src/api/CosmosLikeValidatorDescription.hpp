// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

#ifndef DJINNI_GENERATED_COSMOSLIKEVALIDATORDESCRIPTION_HPP
#define DJINNI_GENERATED_COSMOSLIKEVALIDATORDESCRIPTION_HPP

#include "../utils/optional.hpp"
#include <iostream>
#include <string>
#include <utility>

namespace ledger { namespace core { namespace api {

struct CosmosLikeValidatorDescription final {
    std::string moniker;
    std::experimental::optional<std::string> identity;
    std::experimental::optional<std::string> website;
    std::experimental::optional<std::string> details;

    CosmosLikeValidatorDescription(std::string moniker_,
                                   std::experimental::optional<std::string> identity_,
                                   std::experimental::optional<std::string> website_,
                                   std::experimental::optional<std::string> details_)
    : moniker(std::move(moniker_))
    , identity(std::move(identity_))
    , website(std::move(website_))
    , details(std::move(details_))
    {}

    CosmosLikeValidatorDescription(const CosmosLikeValidatorDescription& cpy) {
       this->moniker = cpy.moniker;
       this->identity = cpy.identity;
       this->website = cpy.website;
       this->details = cpy.details;
    }

    CosmosLikeValidatorDescription() = default;


    CosmosLikeValidatorDescription& operator=(const CosmosLikeValidatorDescription& cpy) {
       this->moniker = cpy.moniker;
       this->identity = cpy.identity;
       this->website = cpy.website;
       this->details = cpy.details;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(moniker, identity, website, details);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(moniker, identity, website, details);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_COSMOSLIKEVALIDATORDESCRIPTION_HPP
