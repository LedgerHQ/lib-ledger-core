// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stellar_like_wallet.djinni

#ifndef DJINNI_GENERATED_STELLARLIKEFEESTATS_HPP
#define DJINNI_GENERATED_STELLARLIKEFEESTATS_HPP

#include <cstdint>
#include <iostream>
#include <utility>

namespace ledger { namespace core { namespace api {

struct StellarLikeFeeStats final {
    int64_t lastBaseFee;
    int64_t modeAcceptedFee;
    int64_t minAccepted;
    int64_t maxFee;

    StellarLikeFeeStats(int64_t lastBaseFee_,
                        int64_t modeAcceptedFee_,
                        int64_t minAccepted_,
                        int64_t maxFee_)
    : lastBaseFee(std::move(lastBaseFee_))
    , modeAcceptedFee(std::move(modeAcceptedFee_))
    , minAccepted(std::move(minAccepted_))
    , maxFee(std::move(maxFee_))
    {}

    StellarLikeFeeStats(const StellarLikeFeeStats& cpy) {
       this->lastBaseFee = cpy.lastBaseFee;
       this->modeAcceptedFee = cpy.modeAcceptedFee;
       this->minAccepted = cpy.minAccepted;
       this->maxFee = cpy.maxFee;
    }

    StellarLikeFeeStats() = default;


    StellarLikeFeeStats& operator=(const StellarLikeFeeStats& cpy) {
       this->lastBaseFee = cpy.lastBaseFee;
       this->modeAcceptedFee = cpy.modeAcceptedFee;
       this->minAccepted = cpy.minAccepted;
       this->maxFee = cpy.maxFee;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(lastBaseFee, modeAcceptedFee, minAccepted, maxFee);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(lastBaseFee, modeAcceptedFee, minAccepted, maxFee);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_STELLARLIKEFEESTATS_HPP
