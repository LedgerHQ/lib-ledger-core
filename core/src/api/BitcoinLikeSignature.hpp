// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#ifndef DJINNI_GENERATED_BITCOINLIKESIGNATURE_HPP
#define DJINNI_GENERATED_BITCOINLIKESIGNATURE_HPP

#include <cstdint>
#include <iostream>
#include <utility>
#include <vector>

namespace ledger { namespace core { namespace api {

/**
 * Structure representing DER encoded signature
 * DER format :
 * - DER prefix
 * - Length of rest of signature
 * - Marker for r value
 * - Length of r value
 * - r value, Big Endian
 * - Marker for s value
 * - Length of s value
 * - s value, Big Endian
 * - SIGHASH byte (ALL, NONE, SINGLE)
 */
struct BitcoinLikeSignature final {
    /** r data */
    std::vector<uint8_t> r;
    /** s data */
    std::vector<uint8_t> s;
    /** Ignored attribute */
    std::vector<uint8_t> v;

    BitcoinLikeSignature(std::vector<uint8_t> r_,
                         std::vector<uint8_t> s_,
                         std::vector<uint8_t> v_)
    : r(std::move(r_))
    , s(std::move(s_))
    , v(std::move(v_))
    {}

    BitcoinLikeSignature(const BitcoinLikeSignature& cpy) {
       this->r = cpy.r;
       this->s = cpy.s;
       this->v = cpy.v;
    }

    BitcoinLikeSignature() = default;


    BitcoinLikeSignature& operator=(const BitcoinLikeSignature& cpy) {
       this->r = cpy.r;
       this->s = cpy.s;
       this->v = cpy.v;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(r, s, v);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(r, s, v);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_BITCOINLIKESIGNATURE_HPP
