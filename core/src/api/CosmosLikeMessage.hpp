// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

#ifndef DJINNI_GENERATED_COSMOSLIKEMESSAGE_HPP
#define DJINNI_GENERATED_COSMOSLIKEMESSAGE_HPP

#include <memory>
#include <string>
#ifndef LIBCORE_EXPORT
    #if defined(_MSC_VER)
       #include <libcore_export.h>
    #else
       #define LIBCORE_EXPORT
    #endif
#endif

namespace ledger { namespace core { namespace api {

enum class CosmosLikeMsgType;
struct CosmosLikeMsgCreateValidator;
struct CosmosLikeMsgDelegate;
struct CosmosLikeMsgDeposit;
struct CosmosLikeMsgEditValidator;
struct CosmosLikeMsgMultiSend;
struct CosmosLikeMsgRedelegate;
struct CosmosLikeMsgSend;
struct CosmosLikeMsgSetWithdrawAddress;
struct CosmosLikeMsgSubmitProposal;
struct CosmosLikeMsgUndelegate;
struct CosmosLikeMsgUnjail;
struct CosmosLikeMsgVote;
struct CosmosLikeMsgWithdrawDelegationReward;
struct CosmosLikeMsgWithdrawDelegatorReward;
struct CosmosLikeMsgWithdrawValidatorCommission;

class LIBCORE_EXPORT CosmosLikeMessage {
public:
    virtual ~CosmosLikeMessage() {}

    /**
     * Get type
     * @return CosmosLikeMsgType a message type
     */
    virtual CosmosLikeMsgType getMessageType() const = 0;

    /**
     * Get type
     * @return string a message type in string format
     */
    virtual std::string getRawMessageType() const = 0;

    /**
     * Wrap the given CosmosLikeMsgSend into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgSend(const CosmosLikeMsgSend & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgSend
     * @param msg The message to unwrap
     * @return CosmosLikeMsgDelegate the unwrapped message
     */
    static CosmosLikeMsgSend unwrapMsgSend(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgDelegate into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgDelegate(const CosmosLikeMsgDelegate & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgDelegate
     * @param msg The message to unwrap
     * @return CosmosLikeMsgDelegate the unwrapped message
     */
    static CosmosLikeMsgDelegate unwrapMsgDelegate(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgUndelegate into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgUndelegate(const CosmosLikeMsgUndelegate & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgUndelegate
     * @param msg The message to unwrap
     * @return CosmosLikeMsgUndelegate the unwrapped message
     */
    static CosmosLikeMsgUndelegate unwrapMsgUndelegate(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgRedelegate into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgRedelegate(const CosmosLikeMsgRedelegate & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgRedelegate
     * @param msg The message to unwrap
     * @return CosmosLikeMsgRedelegate the unwrapped message
     */
    static CosmosLikeMsgRedelegate unwrapMsgRedelegate(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgSubmitProposal into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgSubmitProposal(const CosmosLikeMsgSubmitProposal & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgSubmitProposal
     * @param msg The message to unwrap
     * @return CosmosLikeMsgSubmitProposal the unwrapped message
     */
    static CosmosLikeMsgSubmitProposal unwrapMsgSubmitProposal(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgVote into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgVote(const CosmosLikeMsgVote & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgVote
     * @param msg The message to unwrap
     * @return CosmosLikeMsgVote the unwrapped message
     */
    static CosmosLikeMsgVote unwrapMsgVote(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgDeposit into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgDeposit(const CosmosLikeMsgDeposit & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgDeposit
     * @param msg The message to unwrap
     * @return CosmosLikeMsgDeposit the unwrapped message
     */
    static CosmosLikeMsgDeposit unwrapMsgDeposit(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgWithdrawDelegationReward into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgWithdrawDelegationReward(const CosmosLikeMsgWithdrawDelegationReward & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgWithdrawDelegationReward
     * @param msg The message to unwrap
     * @return CosmosLikeMsgWithdrawDelegationReward the unwrapped message
     */
    static CosmosLikeMsgWithdrawDelegationReward unwrapMsgWithdrawDelegationReward(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgMultiSend into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgMultiSend(const CosmosLikeMsgMultiSend & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgMultiSend
     * @param msg The message to unwrap
     * @return CosmosLikeMsgMultiSend the unwrapped message
     */
    static CosmosLikeMsgMultiSend unwrapMsgMultiSend(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgCreateValidator into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgCreateValidator(const CosmosLikeMsgCreateValidator & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgCreateValidator
     * @param msg The message to unwrap
     * @return CosmosLikeMsgCreateValidator the unwrapped message
     */
    static CosmosLikeMsgCreateValidator unwrapMsgCreateValidator(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgEditValidator into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgEditValidator(const CosmosLikeMsgEditValidator & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgEditValidator
     * @param msg The message to unwrap
     * @return CosmosLikeMsgEditValidator the unwrapped message
     */
    static CosmosLikeMsgEditValidator unwrapMsgEditValidator(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgSetWithdrawAddress into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgSetWithdrawAddress(const CosmosLikeMsgSetWithdrawAddress & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgSetWithdrawAddress
     * @param msg The message to unwrap
     * @return CosmosLikeMsgSetWithdrawAddress the unwrapped message
     */
    static CosmosLikeMsgSetWithdrawAddress unwrapMsgSetWithdrawAddress(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgWithdrawDelegatorReward into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgWithdrawDelegatorReward(const CosmosLikeMsgWithdrawDelegatorReward & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgWithdrawDelegatorReward
     * @param msg The message to unwrap
     * @return CosmosLikeMsgWithdrawDelegatorReward the unwrapped message
     */
    static CosmosLikeMsgWithdrawDelegatorReward unwrapMsgWithdrawDelegatorReward(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgWithdrawValidatorCommission into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgWithdrawValidatorCommission(const CosmosLikeMsgWithdrawValidatorCommission & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgWithdrawValidatorCommission
     * @param msg The message to unwrap
     * @return CosmosLikeMsgWithdrawValidatorCommission the unwrapped message
     */
    static CosmosLikeMsgWithdrawValidatorCommission unwrapMsgWithdrawValidatorCommission(const std::shared_ptr<CosmosLikeMessage> & msg);

    /**
     * Wrap the given CosmosLikeMsgUnjail into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    static std::shared_ptr<CosmosLikeMessage> wrapMsgUnjail(const CosmosLikeMsgUnjail & msg);

    /**
     * Unwrap a message to a CosmosLikeMsgUnjail
     * @param msg The message to unwrap
     * @return CosmosLikeMsgUnjail the unwrapped message
     */
    static CosmosLikeMsgUnjail unwrapMsgUnjail(const std::shared_ptr<CosmosLikeMessage> & msg);
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_COSMOSLIKEMESSAGE_HPP
