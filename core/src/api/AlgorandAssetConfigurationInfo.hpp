// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

#ifndef DJINNI_GENERATED_ALGORANDASSETCONFIGURATIONINFO_HPP
#define DJINNI_GENERATED_ALGORANDASSETCONFIGURATIONINFO_HPP

#include "../utils/optional.hpp"
#include "AlgorandAssetParams.hpp"
#include <iostream>
#include <string>
#include <utility>

namespace ledger { namespace core { namespace api {

struct AlgorandAssetConfigurationInfo final {
    /** The unique asset ID. Required to re-configure or destroy the asset, set to zero on asset creation. */
    std::experimental::optional<std::string> assetId;
    /** The asset configuration options. Empty when destroying the asset. */
    std::experimental::optional<AlgorandAssetParams> assetParams;

    AlgorandAssetConfigurationInfo(std::experimental::optional<std::string> assetId_,
                                   std::experimental::optional<AlgorandAssetParams> assetParams_)
    : assetId(std::move(assetId_))
    , assetParams(std::move(assetParams_))
    {}

    AlgorandAssetConfigurationInfo(const AlgorandAssetConfigurationInfo& cpy) {
       this->assetId = cpy.assetId;
       this->assetParams = cpy.assetParams;
    }

    AlgorandAssetConfigurationInfo() = default;


    AlgorandAssetConfigurationInfo& operator=(const AlgorandAssetConfigurationInfo& cpy) {
       this->assetId = cpy.assetId;
       this->assetParams = cpy.assetParams;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(assetId, assetParams);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(assetId, assetParams);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_ALGORANDASSETCONFIGURATIONINFO_HPP
