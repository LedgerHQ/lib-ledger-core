// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#ifndef DJINNI_GENERATED_BITCOINLIKETRANSACTION_HPP
#define DJINNI_GENERATED_BITCOINLIKETRANSACTION_HPP

#include "../utils/optional.hpp"
#include <chrono>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>
#ifndef LIBCORE_EXPORT
    #if defined(_MSC_VER)
       #include <libcore_export.h>
    #else
       #define LIBCORE_EXPORT
    #endif
#endif

namespace ledger { namespace core { namespace api {

class Amount;
class BitcoinLikeBlock;
class BitcoinLikeInput;
class BitcoinLikeOutput;
struct EstimatedSize;

/** Class representing a Bitcoin transaction. */
class LIBCORE_EXPORT BitcoinLikeTransaction {
public:
    virtual ~BitcoinLikeTransaction() {}

    /** Get the hash of the transaction. */
    virtual std::string getHash() = 0;

    /** Get the input of the transaction. */
    virtual std::vector<std::shared_ptr<BitcoinLikeInput>> getInputs() = 0;

    /** Get the output of the transaction. */
    virtual std::vector<std::shared_ptr<BitcoinLikeOutput>> getOutputs() = 0;

    /** Get the block in which the transaction is inserted if the transaction is confirmed. */
    virtual std::shared_ptr<BitcoinLikeBlock> getBlock() = 0;

    /** Get the lock time of the transaction. */
    virtual int64_t getLockTime() = 0;

    /** Get the amount of fees of the transaction. */
    virtual std::shared_ptr<Amount> getFees() = 0;

    /**
     * Get the time when the transaction was issued or the time of the block including
     * this transaction.
     */
    virtual std::chrono::system_clock::time_point getTime() = 0;

    /** Get the timestamps serialized in the raw transaction if the underlying currency handles it. */
    virtual std::experimental::optional<int32_t> getTimestamp() = 0;

    /** Get Transaction version. */
    virtual int32_t getVersion() = 0;

    /** Serialize the transaction to its raw format. */
    virtual std::vector<uint8_t> serialize() = 0;

    /** Serialize outputs of the raw transaction into a byte array using the bitcoin transaction format. */
    virtual std::vector<uint8_t> serializeOutputs() = 0;

    /** Get the witness if the underlying transaction is a segwit transaction. */
    virtual std::experimental::optional<std::vector<uint8_t>> getWitness() = 0;

    /**
     * Estimate the size of the raw transaction in bytes. This method returns a minimum estimated size and a maximum estimated
     * size.
     */
    virtual EstimatedSize getEstimatedSize() = 0;

    /** Set signature of transaction, when a signature is set serialize method gives back serialized Tx. */
    virtual void setSignature(const std::vector<uint8_t> & vSignature, const std::vector<uint8_t> & rSignature, const std::vector<uint8_t> & sSignature) = 0;

    virtual void setDERSignature(const std::vector<uint8_t> & signature) = 0;

    virtual void setVSignature(const std::vector<uint8_t> & vSignature) = 0;
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_BITCOINLIKETRANSACTION_HPP
