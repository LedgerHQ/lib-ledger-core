// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

#ifndef DJINNI_GENERATED_ETHEREUMLIKETRANSACTIONBUILDER_HPP
#define DJINNI_GENERATED_ETHEREUMLIKETRANSACTIONBUILDER_HPP

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace ledger { namespace core { namespace api {

class Amount;
class EthereumLikeTransaction;
class EthereumLikeTransactionCallback;
struct Currency;

class EthereumLikeTransactionBuilder {
public:
    virtual ~EthereumLikeTransactionBuilder() {}

    /**
     * Send funds to the given address. This method can be called multiple times to send to multiple addresses.
     * @param amount The value to send
     * @param address Address of the recipient
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<EthereumLikeTransactionBuilder> sendToAddress(const std::shared_ptr<Amount> & amount, const std::string & address) = 0;

    /**
     * Send all available funds to the given address.
     * @param address Address of the recipient
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<EthereumLikeTransactionBuilder> wipeToAddress(const std::string & address) = 0;

    /**
     * Set gas price (in wei) the originator is willing to pay
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<EthereumLikeTransactionBuilder> setGasPrice(const std::shared_ptr<Amount> & gasPrice) = 0;

    /**
     * Set gas limit (in wei) the originator is not willing to exceed
     * @return A reference on the same builder in order to chain calls.
     */
    virtual std::shared_ptr<EthereumLikeTransactionBuilder> setGasLimit(const std::shared_ptr<Amount> & gasLimit) = 0;

    /** Set input data the originator wants to embed in transaction */
    virtual std::shared_ptr<EthereumLikeTransactionBuilder> setInputData(const std::vector<uint8_t> & data) = 0;

    /** Build a transaction from the given builder parameters. */
    virtual void build(const std::shared_ptr<EthereumLikeTransactionCallback> & callback) = 0;

    /**
     * Creates a clone of this builder.
     * @return A copy of the current builder instance.
     */
    virtual std::shared_ptr<EthereumLikeTransactionBuilder> clone() = 0;

    /** Reset the current instance to its initial state */
    virtual void reset() = 0;

    static std::shared_ptr<EthereumLikeTransaction> parseRawUnsignedTransaction(const Currency & currency, const std::vector<uint8_t> & rawTransaction);

    static std::shared_ptr<EthereumLikeTransaction> parseRawSignedTransaction(const Currency & currency, const std::vector<uint8_t> & rawTransaction);
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_ETHEREUMLIKETRANSACTIONBUILDER_HPP
