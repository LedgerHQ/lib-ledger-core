// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#ifndef DJINNI_GENERATED_OPERATIONQUERY_HPP
#define DJINNI_GENERATED_OPERATIONQUERY_HPP

#include <cstdint>
#include <memory>
#ifndef LIBCORE_EXPORT
    #if defined(_MSC_VER) && _MSC_VER <= 1900
       #include <libcore_export.h>
    #else
       #define LIBCORE_EXPORT
    #endif
#endif

namespace ledger { namespace core { namespace api {

class OperationListCallback;
class QueryFilter;
enum class OperationOrderKey;

/** Class respresenting a query for a set of operations. */
class LIBCORE_EXPORT OperationQuery {
public:
    virtual ~OperationQuery() {}

    /**
     * Apply given order to query's operation.
     * @param key, OperationOrderKey object which defines order
     * @param descending, bool
     * @return OperationQuery object, new ordered operation
     */
    virtual std::shared_ptr<OperationQuery> addOrder(OperationOrderKey key, bool descending) = 0;

    /**
     * Get applied filter on operation query.
     * @return QueryFilter object
     */
    virtual std::shared_ptr<QueryFilter> filter() = 0;

    /**
     * Add offset to the operation query.
     * @param from, 64-bit integer
     */
    virtual std::shared_ptr<OperationQuery> offset(int64_t from) = 0;

    /**
     * Add limit to the operation query results.
     * @param count, 64-bit integer
     */
    virtual std::shared_ptr<OperationQuery> limit(int64_t count) = 0;

    /**
     *TODO
     * Complete the operation query.
     */
    virtual std::shared_ptr<OperationQuery> complete() = 0;

    /**TODO */
    virtual std::shared_ptr<OperationQuery> partial() = 0;

    /**
     * Execute query to retrieve operations.
     * @param callback, if execute method succeed, ListCallback object returning a List of Operation objects
     */
    virtual void execute(const std::shared_ptr<OperationListCallback> & callback) = 0;
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_OPERATIONQUERY_HPP
