// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from validators.djinni

#ifndef DJINNI_GENERATED_COSMOSLIKEVALIDATORSIGNINGINFORMATION_HPP
#define DJINNI_GENERATED_COSMOSLIKEVALIDATORSIGNINGINFORMATION_HPP

#include <chrono>
#include <cstdint>
#include <iostream>
#include <utility>

namespace ledger { namespace core { namespace api {

/** Slashing data for a Validator */
struct CosmosLikeValidatorSigningInformation final {
    /** Height at which Validator was first a candidate OR was unjailed */
    int64_t startHeight;
    /** Index offset into the signed block bit array */
    int64_t indexOffset;
    /** Timestamp Validator cannot be unjailed until. (epoch for pristine validators) */
    std::chrono::system_clock::time_point jailedUntil;
    /** Whether or not Validator has been tombstoned (killed out of validator set) */
    bool tombstoned;
    /** Missed block counter in the monitored window of last blocks (size chosen at protocol level) */
    int32_t missedBlocksCounter;

    CosmosLikeValidatorSigningInformation(int64_t startHeight_,
                                          int64_t indexOffset_,
                                          std::chrono::system_clock::time_point jailedUntil_,
                                          bool tombstoned_,
                                          int32_t missedBlocksCounter_)
    : startHeight(std::move(startHeight_))
    , indexOffset(std::move(indexOffset_))
    , jailedUntil(std::move(jailedUntil_))
    , tombstoned(std::move(tombstoned_))
    , missedBlocksCounter(std::move(missedBlocksCounter_))
    {}

    CosmosLikeValidatorSigningInformation(const CosmosLikeValidatorSigningInformation& cpy) {
       this->startHeight = cpy.startHeight;
       this->indexOffset = cpy.indexOffset;
       this->jailedUntil = cpy.jailedUntil;
       this->tombstoned = cpy.tombstoned;
       this->missedBlocksCounter = cpy.missedBlocksCounter;
    }

    CosmosLikeValidatorSigningInformation() = default;


    CosmosLikeValidatorSigningInformation& operator=(const CosmosLikeValidatorSigningInformation& cpy) {
       this->startHeight = cpy.startHeight;
       this->indexOffset = cpy.indexOffset;
       this->jailedUntil = cpy.jailedUntil;
       this->tombstoned = cpy.tombstoned;
       this->missedBlocksCounter = cpy.missedBlocksCounter;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(startHeight, indexOffset, jailedUntil, tombstoned, missedBlocksCounter);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(startHeight, indexOffset, jailedUntil, tombstoned, missedBlocksCounter);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_COSMOSLIKEVALIDATORSIGNINGINFORMATION_HPP
