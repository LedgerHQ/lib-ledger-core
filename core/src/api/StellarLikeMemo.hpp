// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stellar_like_wallet.djinni

#ifndef DJINNI_GENERATED_STELLARLIKEMEMO_HPP
#define DJINNI_GENERATED_STELLARLIKEMEMO_HPP

#include <cstdint>
#include <memory>
#include <string>
#include <vector>
#ifndef LIBCORE_EXPORT
    #if defined(_MSC_VER)
       #include <libcore_export.h>
    #else
       #define LIBCORE_EXPORT
    #endif
#endif

namespace ledger { namespace core { namespace api {

class BigInt;
enum class StellarLikeMemoType;

class LIBCORE_EXPORT StellarLikeMemo {
public:
    virtual ~StellarLikeMemo() {}

    virtual StellarLikeMemoType getMemoType() = 0;

    /** Get the value of the memo as string. Fail if the memo is not with type MEMO_TEXT */
    virtual std::string getMemoText() = 0;

    /** Get the value of the memo as BigInt. Fail if the memo is not with type MEMO_ID */
    virtual std::shared_ptr<BigInt> getMemoId() = 0;

    /** Get the value of the memo as byte array. Fail if the memo is not with type MEMO_HASH */
    virtual std::vector<uint8_t> getMemoHash() = 0;

    /** Get the value of the memo as byte array. Fail if the memo is not with type MEMO_RETURN */
    virtual std::vector<uint8_t> getMemoReturn() = 0;

    /**
     * Create a string version of the memo, no matter which underlying type it holds.
     * For MEMO_TEXT returns memo value.
     * For MEMO_ID, return a uint64 as string (base 10).
     * For MEMO_HASH, MEMO_RETURN, returns a hex encoded string.
     * For MEMO_NONE, returns an empty string
     */
    virtual std::string memoValuetoString() = 0;
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_STELLARLIKEMEMO_HPP
