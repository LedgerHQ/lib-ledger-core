// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

#ifndef DJINNI_GENERATED_ALGORANDASSETTRANSFERINFO_HPP
#define DJINNI_GENERATED_ALGORANDASSETTRANSFERINFO_HPP

#include "../utils/optional.hpp"
#include <iostream>
#include <string>
#include <utility>

namespace ledger { namespace core { namespace api {

struct AlgorandAssetTransferInfo final {
    /** The unique asset ID. Required to re-configure or destroy the asset, set to zero on asset creation. */
    std::string assetId;
    /** The amount of asset being transferred */
    std::experimental::optional<std::string> amount;
    /** The recipient's address */
    std::string recipientAddress;
    /** The address to send all remaining funds before closing the account */
    std::experimental::optional<std::string> closeAddress;
    /** Sender account on which clawback is used */
    std::experimental::optional<std::string> clawedBackAddress;
    /** The amount sent to closeAddress */
    std::experimental::optional<std::string> closeAmount;

    AlgorandAssetTransferInfo(std::string assetId_,
                              std::experimental::optional<std::string> amount_,
                              std::string recipientAddress_,
                              std::experimental::optional<std::string> closeAddress_,
                              std::experimental::optional<std::string> clawedBackAddress_,
                              std::experimental::optional<std::string> closeAmount_)
    : assetId(std::move(assetId_))
    , amount(std::move(amount_))
    , recipientAddress(std::move(recipientAddress_))
    , closeAddress(std::move(closeAddress_))
    , clawedBackAddress(std::move(clawedBackAddress_))
    , closeAmount(std::move(closeAmount_))
    {}

    AlgorandAssetTransferInfo(const AlgorandAssetTransferInfo& cpy) {
       this->assetId = cpy.assetId;
       this->amount = cpy.amount;
       this->recipientAddress = cpy.recipientAddress;
       this->closeAddress = cpy.closeAddress;
       this->clawedBackAddress = cpy.clawedBackAddress;
       this->closeAmount = cpy.closeAmount;
    }

    AlgorandAssetTransferInfo() = default;


    AlgorandAssetTransferInfo& operator=(const AlgorandAssetTransferInfo& cpy) {
       this->assetId = cpy.assetId;
       this->amount = cpy.amount;
       this->recipientAddress = cpy.recipientAddress;
       this->closeAddress = cpy.closeAddress;
       this->clawedBackAddress = cpy.clawedBackAddress;
       this->closeAmount = cpy.closeAmount;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(assetId, amount, recipientAddress, closeAddress, clawedBackAddress, closeAmount);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(assetId, amount, recipientAddress, closeAddress, clawedBackAddress, closeAmount);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_ALGORANDASSETTRANSFERINFO_HPP
