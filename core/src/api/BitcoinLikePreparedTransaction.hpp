// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#ifndef DJINNI_GENERATED_BITCOINLIKEPREPAREDTRANSACTION_HPP
#define DJINNI_GENERATED_BITCOINLIKEPREPAREDTRANSACTION_HPP

#include <cstdint>
#include <iostream>
#include <memory>
#include <string>
#include <utility>
#include <vector>

namespace ledger { namespace core { namespace api {

class BitcoinLikeOutput;

/** Structure representing a prepared bitcoin transaction (ready to be used with device). */
struct BitcoinLikePreparedTransaction final {
    /** 32-bit integer representing version. */
    int32_t version;
    /** List of BitcoinLikeInput objects, inputs aggregateed by transaction. */
    std::vector<std::shared_ptr<BitcoinLikeOutput>> inputs;
    /** List of stringsm paths to account creating transaction. */
    std::vector<std::string> paths;
    /** List of BitcoinLikeOutput objects, outputs aggregateed by transaction. */
    std::vector<std::shared_ptr<BitcoinLikeOutput>> outputs;
    /** 32-bit integer, block height after which transaction can be accepted. */
    int32_t lockTime;

    BitcoinLikePreparedTransaction(int32_t version_,
                                   std::vector<std::shared_ptr<BitcoinLikeOutput>> inputs_,
                                   std::vector<std::string> paths_,
                                   std::vector<std::shared_ptr<BitcoinLikeOutput>> outputs_,
                                   int32_t lockTime_)
    : version(std::move(version_))
    , inputs(std::move(inputs_))
    , paths(std::move(paths_))
    , outputs(std::move(outputs_))
    , lockTime(std::move(lockTime_))
    {}

    BitcoinLikePreparedTransaction(const BitcoinLikePreparedTransaction& cpy) {
       this->version = cpy.version;
       this->inputs = cpy.inputs;
       this->paths = cpy.paths;
       this->outputs = cpy.outputs;
       this->lockTime = cpy.lockTime;
    }

    BitcoinLikePreparedTransaction() = default;


    BitcoinLikePreparedTransaction& operator=(const BitcoinLikePreparedTransaction& cpy) {
       this->version = cpy.version;
       this->inputs = cpy.inputs;
       this->paths = cpy.paths;
       this->outputs = cpy.outputs;
       this->lockTime = cpy.lockTime;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(version, inputs, paths, outputs, lockTime);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(version, inputs, paths, outputs, lockTime);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_BITCOINLIKEPREPAREDTRANSACTION_HPP
