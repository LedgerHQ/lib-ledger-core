// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

#ifndef DJINNI_GENERATED_ALGORANDPARTICIPATIONINFO_HPP
#define DJINNI_GENERATED_ALGORANDPARTICIPATIONINFO_HPP

#include <iostream>
#include <string>
#include <utility>

namespace ledger { namespace core { namespace api {

struct AlgorandParticipationInfo final {
    /** The root participation public key (if any) currently registered for this round */
    std::string rootPublicKey;
    /** The selection (VRF) public key (if any) currently registered for this round */
    std::string vrfPublicKey;
    /** The number of subkeys for each batch of participation keys */
    std::string voteKeyDilution;
    /** The first round for which this participation is valid */
    std::string voteFirstRound;
    /** The last round for which this participation is valid */
    std::string voteLastRound;

    AlgorandParticipationInfo(std::string rootPublicKey_,
                              std::string vrfPublicKey_,
                              std::string voteKeyDilution_,
                              std::string voteFirstRound_,
                              std::string voteLastRound_)
    : rootPublicKey(std::move(rootPublicKey_))
    , vrfPublicKey(std::move(vrfPublicKey_))
    , voteKeyDilution(std::move(voteKeyDilution_))
    , voteFirstRound(std::move(voteFirstRound_))
    , voteLastRound(std::move(voteLastRound_))
    {}

    AlgorandParticipationInfo(const AlgorandParticipationInfo& cpy) {
       this->rootPublicKey = cpy.rootPublicKey;
       this->vrfPublicKey = cpy.vrfPublicKey;
       this->voteKeyDilution = cpy.voteKeyDilution;
       this->voteFirstRound = cpy.voteFirstRound;
       this->voteLastRound = cpy.voteLastRound;
    }

    AlgorandParticipationInfo() = default;


    AlgorandParticipationInfo& operator=(const AlgorandParticipationInfo& cpy) {
       this->rootPublicKey = cpy.rootPublicKey;
       this->vrfPublicKey = cpy.vrfPublicKey;
       this->voteKeyDilution = cpy.voteKeyDilution;
       this->voteFirstRound = cpy.voteFirstRound;
       this->voteLastRound = cpy.voteLastRound;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(rootPublicKey, vrfPublicKey, voteKeyDilution, voteFirstRound, voteLastRound);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(rootPublicKey, vrfPublicKey, voteKeyDilution, voteFirstRound, voteLastRound);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_ALGORANDPARTICIPATIONINFO_HPP
