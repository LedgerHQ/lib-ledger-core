// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

#ifndef DJINNI_GENERATED_ALGORANDTRANSACTION_HPP
#define DJINNI_GENERATED_ALGORANDTRANSACTION_HPP

#include <cstdint>
#include <string>
#include <vector>
#ifndef LIBCORE_EXPORT
    #if defined(_MSC_VER)
       #include <libcore_export.h>
    #else
       #define LIBCORE_EXPORT
    #endif
#endif

namespace ledger { namespace core { namespace api {

struct AlgorandAssetConfigurationInfo;
struct AlgorandAssetFreezeInfo;
struct AlgorandAssetTransferInfo;
struct AlgorandParticipationInfo;
struct AlgorandPaymentInfo;

class LIBCORE_EXPORT AlgorandTransaction {
public:
    virtual ~AlgorandTransaction() {}

    virtual std::string getId() const = 0;

    virtual std::string getType() const = 0;

    virtual std::string getSender() const = 0;

    virtual std::string getFee() const = 0;

    virtual std::string getNote() const = 0;

    virtual std::string getRound() const = 0;

    virtual std::string getSenderRewards() const = 0;

    virtual std::string getReceiverRewards() const = 0;

    virtual std::string getCloseRewards() const = 0;

    virtual void setSender(const std::string & sender) = 0;

    virtual void setFee(const std::string & fee) = 0;

    virtual void setNote(const std::string & note) = 0;

    virtual void setPaymentInfo(const AlgorandPaymentInfo & info) = 0;

    virtual AlgorandPaymentInfo getPaymentInfo() const = 0;

    virtual void setParticipationInfo(const AlgorandParticipationInfo & info) = 0;

    virtual AlgorandParticipationInfo getParticipationInfo() const = 0;

    virtual void setAssetConfigurationInfo(const AlgorandAssetConfigurationInfo & info) = 0;

    virtual AlgorandAssetConfigurationInfo getAssetConfigurationInfo() const = 0;

    virtual void setAssetTransferInfo(const AlgorandAssetTransferInfo & info) = 0;

    virtual AlgorandAssetTransferInfo getAssetTransferInfo() const = 0;

    virtual void setAssetFreezeInfo(const AlgorandAssetFreezeInfo & info) = 0;

    virtual AlgorandAssetFreezeInfo getAssetFreezeInfo() const = 0;

    /** Serialize the transaction in MsgPack format */
    virtual std::vector<uint8_t> serialize() const = 0;

    virtual void setSignature(const std::vector<uint8_t> & signature) = 0;
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_ALGORANDTRANSACTION_HPP
