// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from tracing.djinni

#include "Span.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

Span::Span() : ::djinni::JniInterface<::ledger::core::api::Span, Span>() {}

Span::~Span() = default;

Span::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

Span::JavaProxy::~JavaProxy() = default;

void Span::JavaProxy::setTagStr(const std::string & c_name, const std::string & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::Span>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setTagStr,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void Span::JavaProxy::setTagInt(const std::string & c_name, int32_t c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::Span>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setTagInt,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)),
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void Span::JavaProxy::setTagDouble(const std::string & c_name, double c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::Span>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setTagDouble,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)),
                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void Span::JavaProxy::setTagBool(const std::string & c_name, bool c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::Span>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setTagBool,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)),
                           ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void Span::JavaProxy::close() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::Span>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_close);
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
