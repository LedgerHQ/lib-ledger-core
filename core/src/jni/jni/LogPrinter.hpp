// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from logger.djinni

#ifndef DJINNI_GENERATED_LOGPRINTER_HPP_JNI_
#define DJINNI_GENERATED_LOGPRINTER_HPP_JNI_

#include "../../api/LogPrinter.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class LogPrinter final : ::djinni::JniInterface<::ledger::core::api::LogPrinter, LogPrinter> {
public:
    using CppType = std::shared_ptr<::ledger::core::api::LogPrinter>;
    using CppOptType = std::shared_ptr<::ledger::core::api::LogPrinter>;
    using JniType = jobject;

    using Boxed = LogPrinter;

    ~LogPrinter();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<LogPrinter>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<LogPrinter>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    LogPrinter();
    friend ::djinni::JniClass<LogPrinter>;
    friend ::djinni::JniInterface<::ledger::core::api::LogPrinter, LogPrinter>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ledger::core::api::LogPrinter
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void printError(const std::string & message) override;
        void printInfo(const std::string & message) override;
        void printDebug(const std::string & message) override;
        void printWarning(const std::string & message) override;
        void printApdu(const std::string & message) override;
        void printCriticalError(const std::string & message) override;
        std::shared_ptr<::ledger::core::api::ExecutionContext> getContext() override;

    private:
        friend ::djinni::JniInterface<::ledger::core::api::LogPrinter, ::djinni_generated::LogPrinter>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("LogPrinter") };
    const jmethodID method_printError { ::djinni::jniGetMethodID(clazz.get(), "printError", "(Ljava/lang/String;)V") };
    const jmethodID method_printInfo { ::djinni::jniGetMethodID(clazz.get(), "printInfo", "(Ljava/lang/String;)V") };
    const jmethodID method_printDebug { ::djinni::jniGetMethodID(clazz.get(), "printDebug", "(Ljava/lang/String;)V") };
    const jmethodID method_printWarning { ::djinni::jniGetMethodID(clazz.get(), "printWarning", "(Ljava/lang/String;)V") };
    const jmethodID method_printApdu { ::djinni::jniGetMethodID(clazz.get(), "printApdu", "(Ljava/lang/String;)V") };
    const jmethodID method_printCriticalError { ::djinni::jniGetMethodID(clazz.get(), "printCriticalError", "(Ljava/lang/String;)V") };
    const jmethodID method_getContext { ::djinni::jniGetMethodID(clazz.get(), "getContext", "()LExecutionContext;") };
};

}  // namespace djinni_generated
#endif //DJINNI_GENERATED_LOGPRINTER_HPP_JNI_
