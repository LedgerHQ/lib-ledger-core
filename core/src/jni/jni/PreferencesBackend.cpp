// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from preferences.djinni

#include "PreferencesBackend.hpp"  // my header
#include "Marshal.hpp"
#include "PreferencesChange.hpp"
#include "RandomNumberGenerator.hpp"

namespace djinni_generated {

PreferencesBackend::PreferencesBackend() : ::djinni::JniInterface<::ledger::core::api::PreferencesBackend, PreferencesBackend>() {}

PreferencesBackend::~PreferencesBackend() = default;

PreferencesBackend::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

PreferencesBackend::JavaProxy::~JavaProxy() = default;

std::experimental::optional<std::vector<uint8_t>> PreferencesBackend::JavaProxy::get(const std::vector<uint8_t> & c_key) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::PreferencesBackend>::get();
    auto jret = (jbyteArray)jniEnv->CallObjectMethod(Handle::get().get(), data.method_get,
                                                     ::djinni::get(::djinni::Binary::fromCpp(jniEnv, c_key)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Optional<std::experimental::optional, ::djinni::Binary>::toCpp(jniEnv, jret);
}
bool PreferencesBackend::JavaProxy::commit(const std::vector<::ledger::core::api::PreferencesChange> & c_changes) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::PreferencesBackend>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_commit,
                                          ::djinni::get(::djinni::List<::djinni_generated::PreferencesChange>::fromCpp(jniEnv, c_changes)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
void PreferencesBackend::JavaProxy::setEncryption(const std::shared_ptr<::ledger::core::api::RandomNumberGenerator> & c_rng, const std::string & c_password) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::PreferencesBackend>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setEncryption,
                           ::djinni::get(::djinni_generated::RandomNumberGenerator::fromCpp(jniEnv, c_rng)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_password)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void PreferencesBackend::JavaProxy::unsetEncryption() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::PreferencesBackend>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_unsetEncryption);
    ::djinni::jniExceptionCheck(jniEnv);
}
bool PreferencesBackend::JavaProxy::resetEncryption(const std::shared_ptr<::ledger::core::api::RandomNumberGenerator> & c_rng, const std::string & c_oldPassword, const std::string & c_newPassword) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::PreferencesBackend>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_resetEncryption,
                                          ::djinni::get(::djinni_generated::RandomNumberGenerator::fromCpp(jniEnv, c_rng)),
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_oldPassword)),
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_newPassword)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
std::string PreferencesBackend::JavaProxy::getEncryptionSalt() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::PreferencesBackend>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getEncryptionSalt);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
void PreferencesBackend::JavaProxy::clear() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::PreferencesBackend>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_clear);
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
