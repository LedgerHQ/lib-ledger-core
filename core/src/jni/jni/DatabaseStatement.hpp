// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#ifndef DJINNI_GENERATED_DATABASESTATEMENT_HPP_JNI_
#define DJINNI_GENERATED_DATABASESTATEMENT_HPP_JNI_

#include "../../api/DatabaseStatement.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class DatabaseStatement final : ::djinni::JniInterface<::ledger::core::api::DatabaseStatement, DatabaseStatement> {
public:
    using CppType = std::shared_ptr<::ledger::core::api::DatabaseStatement>;
    using CppOptType = std::shared_ptr<::ledger::core::api::DatabaseStatement>;
    using JniType = jobject;

    using Boxed = DatabaseStatement;

    ~DatabaseStatement();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<DatabaseStatement>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<DatabaseStatement>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    DatabaseStatement();
    friend ::djinni::JniClass<DatabaseStatement>;
    friend ::djinni::JniInterface<::ledger::core::api::DatabaseStatement, DatabaseStatement>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ledger::core::api::DatabaseStatement
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void bindShort(int32_t pos, int16_t value) override;
        void bindInt(int32_t pos, int32_t value) override;
        void bindLong(int32_t pos, int64_t value) override;
        void bindFloat(int32_t pos, float value) override;
        void bindDouble(int32_t pos, double value) override;
        void bindString(int32_t pos, const std::string & value) override;
        void bindBlob(int32_t pos, const std::shared_ptr<::ledger::core::api::DatabaseBlob> & value) override;
        void bindNull(int32_t pos) override;
        std::shared_ptr<::ledger::core::api::DatabaseColumn> describeColumn(int32_t colNum) override;
        int32_t getColumnCount() override;
        std::shared_ptr<::ledger::core::api::DatabaseResultSet> execute() override;
        void reset() override;
        void close() override;

    private:
        friend ::djinni::JniInterface<::ledger::core::api::DatabaseStatement, ::djinni_generated::DatabaseStatement>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("DatabaseStatement") };
    const jmethodID method_bindShort { ::djinni::jniGetMethodID(clazz.get(), "bindShort", "(IS)V") };
    const jmethodID method_bindInt { ::djinni::jniGetMethodID(clazz.get(), "bindInt", "(II)V") };
    const jmethodID method_bindLong { ::djinni::jniGetMethodID(clazz.get(), "bindLong", "(IJ)V") };
    const jmethodID method_bindFloat { ::djinni::jniGetMethodID(clazz.get(), "bindFloat", "(IF)V") };
    const jmethodID method_bindDouble { ::djinni::jniGetMethodID(clazz.get(), "bindDouble", "(ID)V") };
    const jmethodID method_bindString { ::djinni::jniGetMethodID(clazz.get(), "bindString", "(ILjava/lang/String;)V") };
    const jmethodID method_bindBlob { ::djinni::jniGetMethodID(clazz.get(), "bindBlob", "(ILDatabaseBlob;)V") };
    const jmethodID method_bindNull { ::djinni::jniGetMethodID(clazz.get(), "bindNull", "(I)V") };
    const jmethodID method_describeColumn { ::djinni::jniGetMethodID(clazz.get(), "describeColumn", "(I)LDatabaseColumn;") };
    const jmethodID method_getColumnCount { ::djinni::jniGetMethodID(clazz.get(), "getColumnCount", "()I") };
    const jmethodID method_execute { ::djinni::jniGetMethodID(clazz.get(), "execute", "()LDatabaseResultSet;") };
    const jmethodID method_reset { ::djinni::jniGetMethodID(clazz.get(), "reset", "()V") };
    const jmethodID method_close { ::djinni::jniGetMethodID(clazz.get(), "close", "()V") };
};

}  // namespace djinni_generated
#endif //DJINNI_GENERATED_DATABASESTATEMENT_HPP_JNI_
