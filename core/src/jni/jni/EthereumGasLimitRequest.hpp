// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

#ifndef DJINNI_GENERATED_ETHEREUMGASLIMITREQUEST_HPP_JNI_
#define DJINNI_GENERATED_ETHEREUMGASLIMITREQUEST_HPP_JNI_

#include "../../api/EthereumGasLimitRequest.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class EthereumGasLimitRequest final {
public:
    using CppType = ::ledger::core::api::EthereumGasLimitRequest;
    using JniType = jobject;

    using Boxed = EthereumGasLimitRequest;

    ~EthereumGasLimitRequest();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    EthereumGasLimitRequest();
    friend ::djinni::JniClass<EthereumGasLimitRequest>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("co/ledger/core/EthereumGasLimitRequest") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Double;)V") };
    const jfieldID field_from { ::djinni::jniGetFieldID(clazz.get(), "from", "Ljava/lang/String;") };
    const jfieldID field_to { ::djinni::jniGetFieldID(clazz.get(), "to", "Ljava/lang/String;") };
    const jfieldID field_value { ::djinni::jniGetFieldID(clazz.get(), "value", "Ljava/lang/String;") };
    const jfieldID field_data { ::djinni::jniGetFieldID(clazz.get(), "data", "Ljava/lang/String;") };
    const jfieldID field_gas { ::djinni::jniGetFieldID(clazz.get(), "gas", "Ljava/lang/String;") };
    const jfieldID field_gasPrice { ::djinni::jniGetFieldID(clazz.get(), "gasPrice", "Ljava/lang/String;") };
    const jfieldID field_amplifier { ::djinni::jniGetFieldID(clazz.get(), "amplifier", "Ljava/lang/Double;") };
};

}  // namespace djinni_generated
#endif //DJINNI_GENERATED_ETHEREUMGASLIMITREQUEST_HPP_JNI_
