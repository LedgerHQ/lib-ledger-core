// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

#include "AlgorandAddress.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

AlgorandAddress::AlgorandAddress() : ::djinni::JniInterface<::ledger::core::api::AlgorandAddress, AlgorandAddress>("co/ledger/core/AlgorandAddress$CppProxy") {}

AlgorandAddress::~AlgorandAddress() = default;


CJNIEXPORT void JNICALL Java_co_ledger_core_AlgorandAddress_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ledger::core::api::AlgorandAddress>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_AlgorandAddress_fromPublicKey(JNIEnv* jniEnv, jobject /*this*/, jbyteArray j_pubkey)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ledger::core::api::AlgorandAddress::fromPublicKey(::djinni::Binary::toCpp(jniEnv, j_pubkey));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_co_ledger_core_AlgorandAddress_toPublicKey(JNIEnv* jniEnv, jobject /*this*/, jstring j_address)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ledger::core::api::AlgorandAddress::toPublicKey(::djinni::String::toCpp(jniEnv, j_address));
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
