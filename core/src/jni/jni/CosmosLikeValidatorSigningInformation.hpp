// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from validators.djinni

#ifndef DJINNI_GENERATED_COSMOSLIKEVALIDATORSIGNINGINFORMATION_HPP_JNI_
#define DJINNI_GENERATED_COSMOSLIKEVALIDATORSIGNINGINFORMATION_HPP_JNI_

#include "../../api/CosmosLikeValidatorSigningInformation.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class CosmosLikeValidatorSigningInformation final {
public:
    using CppType = ::ledger::core::api::CosmosLikeValidatorSigningInformation;
    using JniType = jobject;

    using Boxed = CosmosLikeValidatorSigningInformation;

    ~CosmosLikeValidatorSigningInformation();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    CosmosLikeValidatorSigningInformation();
    friend ::djinni::JniClass<CosmosLikeValidatorSigningInformation>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("co/ledger/core/CosmosLikeValidatorSigningInformation") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(JJLjava/util/Date;ZI)V") };
    const jfieldID field_startHeight { ::djinni::jniGetFieldID(clazz.get(), "startHeight", "J") };
    const jfieldID field_indexOffset { ::djinni::jniGetFieldID(clazz.get(), "indexOffset", "J") };
    const jfieldID field_jailedUntil { ::djinni::jniGetFieldID(clazz.get(), "jailedUntil", "Ljava/util/Date;") };
    const jfieldID field_tombstoned { ::djinni::jniGetFieldID(clazz.get(), "tombstoned", "Z") };
    const jfieldID field_missedBlocksCounter { ::djinni::jniGetFieldID(clazz.get(), "missedBlocksCounter", "I") };
};

}  // namespace djinni_generated
#endif //DJINNI_GENERATED_COSMOSLIKEVALIDATORSIGNINGINFORMATION_HPP_JNI_
