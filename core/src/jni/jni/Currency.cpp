// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from currency.djinni

#include "Currency.hpp"  // my header
#include "BitcoinLikeNetworkParameters.hpp"
#include "CurrencyUnit.hpp"
#include "EthereumLikeNetworkParameters.hpp"
#include "Marshal.hpp"
#include "RippleLikeNetworkParameters.hpp"
#include "TezosLikeNetworkParameters.hpp"
#include "WalletType.hpp"

namespace djinni_generated {

Currency::Currency() = default;

Currency::~Currency() = default;

auto Currency::fromCpp(JNIEnv* jniEnv, const CppType& c) -> ::djinni::LocalRef<JniType> {
    const auto& data = ::djinni::JniClass<Currency>::get();
    auto r = ::djinni::LocalRef<JniType>{jniEnv->NewObject(data.clazz.get(), data.jconstructor,
                                                           ::djinni::get(::djinni_generated::WalletType::fromCpp(jniEnv, c.walletType)),
                                                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c.name)),
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.bip44CoinType)),
                                                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c.paymentUriScheme)),
                                                           ::djinni::get(::djinni::List<::djinni_generated::CurrencyUnit>::fromCpp(jniEnv, c.units)),
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni_generated::BitcoinLikeNetworkParameters>::fromCpp(jniEnv, c.bitcoinLikeNetworkParameters)),
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni_generated::EthereumLikeNetworkParameters>::fromCpp(jniEnv, c.ethereumLikeNetworkParameters)),
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni_generated::RippleLikeNetworkParameters>::fromCpp(jniEnv, c.rippleLikeNetworkParameters)),
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni_generated::TezosLikeNetworkParameters>::fromCpp(jniEnv, c.tezosLikeNetworkParameters)))};
    ::djinni::jniExceptionCheck(jniEnv);
    return r;
}

auto Currency::toCpp(JNIEnv* jniEnv, JniType j) -> CppType {
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    assert(j != nullptr);
    const auto& data = ::djinni::JniClass<Currency>::get();
    return {::djinni_generated::WalletType::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_walletType)),
            ::djinni::String::toCpp(jniEnv, (jstring)jniEnv->GetObjectField(j, data.field_name)),
            ::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_bip44CoinType)),
            ::djinni::String::toCpp(jniEnv, (jstring)jniEnv->GetObjectField(j, data.field_paymentUriScheme)),
            ::djinni::List<::djinni_generated::CurrencyUnit>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_units)),
            ::djinni::Optional<std::experimental::optional, ::djinni_generated::BitcoinLikeNetworkParameters>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_bitcoinLikeNetworkParameters)),
            ::djinni::Optional<std::experimental::optional, ::djinni_generated::EthereumLikeNetworkParameters>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_ethereumLikeNetworkParameters)),
            ::djinni::Optional<std::experimental::optional, ::djinni_generated::RippleLikeNetworkParameters>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_rippleLikeNetworkParameters)),
            ::djinni::Optional<std::experimental::optional, ::djinni_generated::TezosLikeNetworkParameters>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_tezosLikeNetworkParameters))};
}

}  // namespace djinni_generated
