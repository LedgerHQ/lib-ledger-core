// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from tracing.djinni

#ifndef DJINNI_GENERATED_CORETRACER_HPP_JNI_
#define DJINNI_GENERATED_CORETRACER_HPP_JNI_

#include "../../api/CoreTracer.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class CoreTracer final : ::djinni::JniInterface<::ledger::core::api::CoreTracer, CoreTracer> {
public:
    using CppType = std::shared_ptr<::ledger::core::api::CoreTracer>;
    using CppOptType = std::shared_ptr<::ledger::core::api::CoreTracer>;
    using JniType = jobject;

    using Boxed = CoreTracer;

    ~CoreTracer();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<CoreTracer>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<CoreTracer>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    CoreTracer();
    friend ::djinni::JniClass<CoreTracer>;
    friend ::djinni::JniInterface<::ledger::core::api::CoreTracer, CoreTracer>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ledger::core::api::CoreTracer
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::shared_ptr<::ledger::core::api::Span> startSpan(const std::string & name) override;

    private:
        friend ::djinni::JniInterface<::ledger::core::api::CoreTracer, ::djinni_generated::CoreTracer>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("co/ledger/core/CoreTracer") };
    const jmethodID method_startSpan { ::djinni::jniGetMethodID(clazz.get(), "startSpan", "(Ljava/lang/String;)Lco/ledger/core/Span;") };
};

}  // namespace djinni_generated
#endif //DJINNI_GENERATED_CORETRACER_HPP_JNI_
