// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from big_int.djinni

#include "BigInt.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

BigInt::BigInt() : ::djinni::JniInterface<::ledger::core::api::BigInt, BigInt>("co/ledger/core/BigInt$CppProxy") {}

BigInt::~BigInt() = default;


CJNIEXPORT void JNICALL Java_co_ledger_core_BigInt_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ledger::core::api::BigInt>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_BigInt_00024CppProxy_native_1add(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_i)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BigInt>(nativeRef);
        auto r = ref->add(::djinni_generated::BigInt::toCpp(jniEnv, j_i));
        return ::djinni::release(::djinni_generated::BigInt::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_BigInt_00024CppProxy_native_1subtract(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_i)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BigInt>(nativeRef);
        auto r = ref->subtract(::djinni_generated::BigInt::toCpp(jniEnv, j_i));
        return ::djinni::release(::djinni_generated::BigInt::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_BigInt_00024CppProxy_native_1multiply(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_i)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BigInt>(nativeRef);
        auto r = ref->multiply(::djinni_generated::BigInt::toCpp(jniEnv, j_i));
        return ::djinni::release(::djinni_generated::BigInt::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_BigInt_00024CppProxy_native_1divide(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_i)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BigInt>(nativeRef);
        auto r = ref->divide(::djinni_generated::BigInt::toCpp(jniEnv, j_i));
        return ::djinni::release(::djinni_generated::BigInt::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_BigInt_00024CppProxy_native_1divideAndRemainder(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_i)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BigInt>(nativeRef);
        auto r = ref->divideAndRemainder(::djinni_generated::BigInt::toCpp(jniEnv, j_i));
        return ::djinni::release(::djinni::List<::djinni_generated::BigInt>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_BigInt_00024CppProxy_native_1pow(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_exponent)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BigInt>(nativeRef);
        auto r = ref->pow(::djinni::I32::toCpp(jniEnv, j_exponent));
        return ::djinni::release(::djinni_generated::BigInt::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_BigInt_00024CppProxy_native_1toDecimalString(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_precision, jstring j_decimalSeparator, jstring j_thousandSeparator)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BigInt>(nativeRef);
        auto r = ref->toDecimalString(::djinni::I32::toCpp(jniEnv, j_precision),
                                      ::djinni::String::toCpp(jniEnv, j_decimalSeparator),
                                      ::djinni::String::toCpp(jniEnv, j_thousandSeparator));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_BigInt_00024CppProxy_native_1toString(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_radix)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BigInt>(nativeRef);
        auto r = ref->toString(::djinni::I32::toCpp(jniEnv, j_radix));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_co_ledger_core_BigInt_00024CppProxy_native_1intValue(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BigInt>(nativeRef);
        auto r = ref->intValue();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_co_ledger_core_BigInt_00024CppProxy_native_1compare(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_i)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BigInt>(nativeRef);
        auto r = ref->compare(::djinni_generated::BigInt::toCpp(jniEnv, j_i));
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_BigInt_fromDecimalString(JNIEnv* jniEnv, jobject /*this*/, jstring j_s, jint j_precision, jstring j_decimalSeparator)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ledger::core::api::BigInt::fromDecimalString(::djinni::String::toCpp(jniEnv, j_s),
                                                                ::djinni::I32::toCpp(jniEnv, j_precision),
                                                                ::djinni::String::toCpp(jniEnv, j_decimalSeparator));
        return ::djinni::release(::djinni_generated::BigInt::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_BigInt_fromIntegerString(JNIEnv* jniEnv, jobject /*this*/, jstring j_s, jint j_radix)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ledger::core::api::BigInt::fromIntegerString(::djinni::String::toCpp(jniEnv, j_s),
                                                                ::djinni::I32::toCpp(jniEnv, j_radix));
        return ::djinni::release(::djinni_generated::BigInt::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_BigInt_fromLong(JNIEnv* jniEnv, jobject /*this*/, jlong j_l)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ledger::core::api::BigInt::fromLong(::djinni::I64::toCpp(jniEnv, j_l));
        return ::djinni::release(::djinni_generated::BigInt::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
