// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from thread_dispatcher.djinni

#ifndef DJINNI_GENERATED_THREADDISPATCHER_HPP_JNI_
#define DJINNI_GENERATED_THREADDISPATCHER_HPP_JNI_

#include "../../api/ThreadDispatcher.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class ThreadDispatcher final : ::djinni::JniInterface<::ledger::core::api::ThreadDispatcher, ThreadDispatcher> {
public:
    using CppType = std::shared_ptr<::ledger::core::api::ThreadDispatcher>;
    using CppOptType = std::shared_ptr<::ledger::core::api::ThreadDispatcher>;
    using JniType = jobject;

    using Boxed = ThreadDispatcher;

    ~ThreadDispatcher();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<ThreadDispatcher>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<ThreadDispatcher>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    ThreadDispatcher();
    friend ::djinni::JniClass<ThreadDispatcher>;
    friend ::djinni::JniInterface<::ledger::core::api::ThreadDispatcher, ThreadDispatcher>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ledger::core::api::ThreadDispatcher
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::shared_ptr<::ledger::core::api::ExecutionContext> getSerialExecutionContext(const std::string & name) override;
        std::shared_ptr<::ledger::core::api::ExecutionContext> getThreadPoolExecutionContext(const std::string & name) override;
        std::shared_ptr<::ledger::core::api::ExecutionContext> getMainExecutionContext() override;
        std::shared_ptr<::ledger::core::api::Lock> newLock() override;

    private:
        friend ::djinni::JniInterface<::ledger::core::api::ThreadDispatcher, ::djinni_generated::ThreadDispatcher>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("ThreadDispatcher") };
    const jmethodID method_getSerialExecutionContext { ::djinni::jniGetMethodID(clazz.get(), "getSerialExecutionContext", "(Ljava/lang/String;)LExecutionContext;") };
    const jmethodID method_getThreadPoolExecutionContext { ::djinni::jniGetMethodID(clazz.get(), "getThreadPoolExecutionContext", "(Ljava/lang/String;)LExecutionContext;") };
    const jmethodID method_getMainExecutionContext { ::djinni::jniGetMethodID(clazz.get(), "getMainExecutionContext", "()LExecutionContext;") };
    const jmethodID method_newLock { ::djinni::jniGetMethodID(clazz.get(), "newLock", "()LLock;") };
};

}  // namespace djinni_generated
#endif //DJINNI_GENERATED_THREADDISPATCHER_HPP_JNI_
