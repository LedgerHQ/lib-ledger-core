// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from logger.djinni

#include "Logger.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

Logger::Logger() : ::djinni::JniInterface<::ledger::core::api::Logger, Logger>("Logger$CppProxy") {}

Logger::~Logger() = default;


CJNIEXPORT void JNICALL Java_Logger_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ledger::core::api::Logger>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_Logger_00024CppProxy_native_1d(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_tag, jstring j_message)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::Logger>(nativeRef);
        ref->d(::djinni::String::toCpp(jniEnv, j_tag),
               ::djinni::String::toCpp(jniEnv, j_message));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_Logger_00024CppProxy_native_1i(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_tag, jstring j_message)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::Logger>(nativeRef);
        ref->i(::djinni::String::toCpp(jniEnv, j_tag),
               ::djinni::String::toCpp(jniEnv, j_message));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_Logger_00024CppProxy_native_1e(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_tag, jstring j_message)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::Logger>(nativeRef);
        ref->e(::djinni::String::toCpp(jniEnv, j_tag),
               ::djinni::String::toCpp(jniEnv, j_message));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_Logger_00024CppProxy_native_1w(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_tag, jstring j_message)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::Logger>(nativeRef);
        ref->w(::djinni::String::toCpp(jniEnv, j_tag),
               ::djinni::String::toCpp(jniEnv, j_message));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_Logger_00024CppProxy_native_1c(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_tag, jstring j_message)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::Logger>(nativeRef);
        ref->c(::djinni::String::toCpp(jniEnv, j_tag),
               ::djinni::String::toCpp(jniEnv, j_message));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
