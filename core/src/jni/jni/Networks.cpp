// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from networks.djinni

#include "Networks.hpp"  // my header
#include "BitcoinLikeNetworkParameters.hpp"
#include "EthereumLikeNetworkParameters.hpp"

namespace djinni_generated {

Networks::Networks() : ::djinni::JniInterface<::ledger::core::api::Networks, Networks>("co/ledger/core/Networks$CppProxy") {}

Networks::~Networks() = default;


CJNIEXPORT void JNICALL Java_co_ledger_core_Networks_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ledger::core::api::Networks>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_Networks_bitcoin(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ledger::core::api::Networks::bitcoin();
        return ::djinni::release(::djinni_generated::BitcoinLikeNetworkParameters::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_Networks_ethereum(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ledger::core::api::Networks::ethereum();
        return ::djinni::release(::djinni_generated::EthereumLikeNetworkParameters::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
