// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#include "OperationQuery.hpp"  // my header
#include "Marshal.hpp"
#include "OperationListCallback.hpp"
#include "OperationOrderKey.hpp"
#include "QueryFilter.hpp"

namespace djinni_generated {

OperationQuery::OperationQuery() : ::djinni::JniInterface<::ledger::core::api::OperationQuery, OperationQuery>("OperationQuery$CppProxy") {}

OperationQuery::~OperationQuery() = default;


CJNIEXPORT void JNICALL Java_OperationQuery_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ledger::core::api::OperationQuery>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_OperationQuery_00024CppProxy_native_1addOrder(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_key, jboolean j_descending)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::OperationQuery>(nativeRef);
        auto r = ref->addOrder(::djinni_generated::OperationOrderKey::toCpp(jniEnv, j_key),
                               ::djinni::Bool::toCpp(jniEnv, j_descending));
        return ::djinni::release(::djinni_generated::OperationQuery::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_OperationQuery_00024CppProxy_native_1filter(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::OperationQuery>(nativeRef);
        auto r = ref->filter();
        return ::djinni::release(::djinni_generated::QueryFilter::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_OperationQuery_00024CppProxy_native_1offset(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_from)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::OperationQuery>(nativeRef);
        auto r = ref->offset(::djinni::I32::toCpp(jniEnv, j_from));
        return ::djinni::release(::djinni_generated::OperationQuery::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_OperationQuery_00024CppProxy_native_1limit(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_count)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::OperationQuery>(nativeRef);
        auto r = ref->limit(::djinni::I32::toCpp(jniEnv, j_count));
        return ::djinni::release(::djinni_generated::OperationQuery::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_OperationQuery_00024CppProxy_native_1complete(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::OperationQuery>(nativeRef);
        auto r = ref->complete();
        return ::djinni::release(::djinni_generated::OperationQuery::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_OperationQuery_00024CppProxy_native_1partial(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::OperationQuery>(nativeRef);
        auto r = ref->partial();
        return ::djinni::release(::djinni_generated::OperationQuery::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_OperationQuery_00024CppProxy_native_1execute(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_callback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::OperationQuery>(nativeRef);
        ref->execute(::djinni_generated::OperationListCallback::toCpp(jniEnv, j_callback));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
