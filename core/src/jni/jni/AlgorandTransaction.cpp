// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

#include "AlgorandTransaction.hpp"  // my header
#include "AlgorandAssetConfigurationInfo.hpp"
#include "AlgorandAssetFreezeInfo.hpp"
#include "AlgorandAssetTransferInfo.hpp"
#include "AlgorandParticipationInfo.hpp"
#include "AlgorandPaymentInfo.hpp"
#include "Marshal.hpp"

namespace djinni_generated {

AlgorandTransaction::AlgorandTransaction() : ::djinni::JniInterface<::ledger::core::api::AlgorandTransaction, AlgorandTransaction>("co/ledger/core/AlgorandTransaction$CppProxy") {}

AlgorandTransaction::~AlgorandTransaction() = default;


CJNIEXPORT void JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ledger::core::api::AlgorandTransaction>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getId(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getId();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getType(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getType();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getSender(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getSender();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getFee(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getFee();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getNote(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getNote();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getRound(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getRound();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getSenderRewards(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getSenderRewards();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getReceiverRewards(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getReceiverRewards();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getCloseRewards(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getCloseRewards();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1setSender(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_sender)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        ref->setSender(::djinni::String::toCpp(jniEnv, j_sender));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1setFee(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_fee)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        ref->setFee(::djinni::String::toCpp(jniEnv, j_fee));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1setNote(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_note)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        ref->setNote(::djinni::String::toCpp(jniEnv, j_note));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1setPaymentInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_info)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        ref->setPaymentInfo(::djinni_generated::AlgorandPaymentInfo::toCpp(jniEnv, j_info));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getPaymentInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getPaymentInfo();
        return ::djinni::release(::djinni_generated::AlgorandPaymentInfo::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1setParticipationInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_info)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        ref->setParticipationInfo(::djinni_generated::AlgorandParticipationInfo::toCpp(jniEnv, j_info));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getParticipationInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getParticipationInfo();
        return ::djinni::release(::djinni_generated::AlgorandParticipationInfo::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1setAssetConfigurationInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_info)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        ref->setAssetConfigurationInfo(::djinni_generated::AlgorandAssetConfigurationInfo::toCpp(jniEnv, j_info));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getAssetConfigurationInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getAssetConfigurationInfo();
        return ::djinni::release(::djinni_generated::AlgorandAssetConfigurationInfo::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1setAssetTransferInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_info)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        ref->setAssetTransferInfo(::djinni_generated::AlgorandAssetTransferInfo::toCpp(jniEnv, j_info));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getAssetTransferInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getAssetTransferInfo();
        return ::djinni::release(::djinni_generated::AlgorandAssetTransferInfo::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1setAssetFreezeInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_info)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        ref->setAssetFreezeInfo(::djinni_generated::AlgorandAssetFreezeInfo::toCpp(jniEnv, j_info));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1getAssetFreezeInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->getAssetFreezeInfo();
        return ::djinni::release(::djinni_generated::AlgorandAssetFreezeInfo::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1serialize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        auto r = ref->serialize();
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_ledger_core_AlgorandTransaction_00024CppProxy_native_1setSignature(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_signature)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::AlgorandTransaction>(nativeRef);
        ref->setSignature(::djinni::Binary::toCpp(jniEnv, j_signature));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
