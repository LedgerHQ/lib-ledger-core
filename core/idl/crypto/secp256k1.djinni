#Class implementing secp256k1 used in Bitcoin
Secp256k1 = interface +c {
    # Create an instance of Secp256k1
    # @return Secp256k1 instance
    static createInstance(): Secp256k1;
    # Generates public key from private key.
    # @param privKey 32 byte private key
    # @param compress get compressed (35 bytes) or uncompressed (65 bytes)
    # @return public key can be compressed (35 bytes starting with 02 or 03) or un compressed (65 bytes starting with 04)
    computePubKey(privKey: binary, compress: bool): binary;
    # Generates uncompressed public key from compressed public key.
    # @param pubKey 33 byte private key (starting with 02 or 03)
    # @return uncompressed public key (65 bytes starting with 04)
    computeUncompressedPubKey(pubKey: binary): binary;
    # Signs message using a given private key
    # @param privKey 32 bytes private key
    # @param data 32 bytes message to sign
    # @return 32 bytes signed message
    sign(privKey: binary, data: binary): binary;
    # Check if message was signed with given signature and public key
    # @param data 32 bytes signed message
    # @param signature 32 bytes signature (generated from private key)
    # @param oubkey 32 bytes public key
    # @return true if message was signed with signature and public key (both issued from same private key)
    verify(data: binary, signature: binary, pubKey: binary): bool;
    static newInstance(): Secp256k1;
}