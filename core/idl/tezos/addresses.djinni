@import "../math/big_int.djinni"

TezosLikeNetworkParameters = record {
	# Name of the network.
	Identifier: string;
	# Constant prefix to prepend all signature messages.
	MessagePrefix: string;
	# Version of the Extended Public Key standard.
	XPUBVersion: binary;
	# Addition TIPs enabled for this network.
	AdditionalTIPs: list<string>;
	# Delay applied to all timestamps. Used to debounce transactions.
	TimestampDelay: i64;
}

# Helper class for manipulating Tezos like addresses.
TezosLikeAddress = interface +c {
	# Gets the version of the address.
	# @return The version of the address
	getVersion(): binary;
	# Gets the raw hash160 of the public key
	# @return The 20 bytes of the public key hash160
	getHash160(): binary;
	# Gets the network parameters used for serializing the address.
	# @return The network parameters of the address
	getNetworkParameters(): TezosLikeNetworkParameters;
	# Encodes to Base58.
	# @return The Base58 encoding
	toBase58(): string;
}

# The xPUB definition for Tezos.
TezosLikeExtendedPublicKey = interface +c {
    # Derive an address from an xPUB and a path.
	derive(path: string): TezosLikeAddress;
    # Derive a public key from an xPUB and a path.
	derivePublicKey(path: string): binary;
    # Derive a shorten version of a public key (SHA256 + RIPEMD160) from an xPUB and a path.
	deriveHash160(path: string): binary;
    # Get the xPUB in base 58.
	toBase58(): string;
    # Get the root path of the xPUB.
	getRootPath(): string;
}
