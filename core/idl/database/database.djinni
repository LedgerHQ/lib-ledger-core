# An enum representing a SQL type.
DatabaseValueType = enum {
    string; date; double; integer; long_long; unsigned_long_long; blob;
}

# Wrapper class around errors.
DatabaseError = interface +j +n +o {
    # Get a human readable error message.
    # @return The error message.
    getMessage(): string;
}

# A wrapper around SQL blob type. BLOB (Binary Large Object) is a builtin SQL type to store bytes.
DatabaseBlob = interface +j +n +o {
    # Reads bytes from the blob at the given offset and of the a given length and return them in a byte array.
    # @param offset Start to read bytes from the blob at offset value.
    # @param length Maximum number of byte read from the blob
    read(offset: i64, length: i64): binary;
    # Write the given bytes at the given offset in the BLOB.
    # @return The number of written bytes
    write(offset: i64, data: binary): i64;
    # Append the given bytes to the BLOB.
    # @param The data to append to the BLOB
    # @return the number of bytes written
    append(data: binary): i64;

    # Truncate the BLOB to the length given by the newLen parameter (in bytes).
    # @param newLen The final size of the BLOB
    # @return The number of byte truncated
    trim(newLen: i64): i64;

    # Get the size of the BLOB.
    # @return the size of the BLOB in bytes.
    size(): i64;
}

# An object holding metadata information about a single SQL column (type, name...).
DatabaseColumn = interface +j +n +o {
  # Get the type of the underlying SQL value.
  # @return The type of th
  getType(): DatabaseValueType;
  getName(): string;
}

# A table of data representing a database query result, which is usually generated by executing a statement that queries the database.
# DatabaseResultRow instances are not expected to live once DatabaseResultSet::next has been called on its parent result set.
DatabaseResultRow = interface +j +n +o {
    # Check if the value is NULL at the given position.
    # @return true if the value is NULL, false otherwise.
    isNullAtPos(pos: i32): bool;

    # Get the column name at the given position.
    # @return the column name.
    getColumnName(pos: i32): string;

    # Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
    # @return the value at the given position.
    getShortByPos(pos: i32): i16;

    # Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
    # @return the value at the given position.
    getIntByPos(pos: i32): i32;

    # Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
    # @return the value at the given position.
    getFloatByPos(pos: i32): f32;

    # Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
    # @return the value at the given position.
    getDoubleByPos(pos: i32): f64;

    # Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
    # @return the value at the given position.
    getLongByPos(pos: i32): i64;

    # Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
    # @return the value at the given position.
    getStringByPos(pos: i32): string;

    # Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
    # @return the value at the given position.
    getBlobByPos(pos: i32): DatabaseBlob;
}

# ResultSet is a cursor over a query result. It allows user to iterate through query rows. When you start iterating through
# result the cursor is placed before the first element of the set.
DatabaseResultSet = interface +j +n +o {
    # Retrieve the current row pointed by the DatabaseResultSet. Return null if there is no row to retrieve.
    # @return The current row
    getRow(): DatabaseResultRow;

    # Get the number of rows updated by the query (UPDATE, INSERT, DELETE...)
    getUpdateCount(): i32;

    # Returns true if the result set has at least one remaining row to get.
    # @return true if the result set has at least one remaining row to get, false otherwise.
    hasNext(): bool;

    # Returns the number of remaining rows before the result set needs to load more rows
    # @return The number of remaining rows before the result set needs to load more rows.
    available(): i32;

    # Internally move the result set to the next available row. This method may fail if there is no further row to fetch.
    # @return Return a result set pointing to the next row.
    next();

    # Close the result set.
    close();

    # Get the last error that occured on the database.
    getError(): DatabaseError;

}

# A wrapper object around prepared SQL statements. lib-ledger-core will use placeholders when it needs to pass
# parameters to a query. It will then  bind each parameter at a given position to a given value.
DatabaseStatement = interface +j +n +o {
    # Bind the designated parameter to the given 16bit integer value.
    # @param pos The position of the parameter in the query
    # @param value The value to bind
    bindShort(pos: i32, value: i16);

    # Bind the designated parameter to the given 32bit integer value.
    # @param pos The position of the parameter in the query
    # @param value The value to bind
    bindInt(pos: i32, value: i32);

    # Bind the designated parameter to the given 64bit integer value.
    # @param pos The position of the parameter in the query
    # @param value The value to bind
    bindLong(pos: i32, value: i64);

    # Bind the designated parameter to the given 32bit floating point number value.
    # @param pos The position of the parameter in the query
    # @param value The value to bind
    bindFloat(pos: i32, value: f32);

    # Bind the designated parameter to the given 64bit floating point number value.
    # @param pos The position of the parameter in the query
    # @param value The value to bind
    bindDouble(pos: i32, value: f64);

    # Bind the designated parameter to the given string.
    # @param pos The position of the parameter in the query
    # @param value The value to bind
    bindString(pos: i32, value: string);

    # Bind the designated parameter to the given BLOB.
    # @param pos The position of the parameter in the query
    # @param value The value to bind
    bindBlob(pos: i32, value: DatabaseBlob);

    # Bind the designated parameter to the NULL value in SQL.
    # @param pos The position of the parameter in the query
    # @param value The value to bind
    bindNull(pos: i32);

    # Describe the metadata attached to the designated column (e.g. data type, column name...)
    # @return Column metadata descriptor
    describeColumn(colNum: i32): DatabaseColumn;

    # Get the number of column that will be available into the result row (e.g. "SELECT name, age FROM USERS"
    # would return 2).
    # @return The number of the columns available in the result
    getColumnCount(): i32;

    # Execute the statement with the past bound values.
    # @return The result of the execution of the statement on the database.
    execute(): DatabaseResultSet;

    # Reset all bindings. This call is used before reusing a statement instance in order to repeat it multiple time.
    reset();

    # Close the statement and release all allocated resources. The statement shouldn't be used after this call.
    close();
}

# An active connection to a database. This API is fully synchronous and all objects created by this interface need to
# return synchronously. A connection is used to prepare statements, managing transactions and creating abstractions of
# database objects.
DatabaseConnection = interface +j +n +o {
    # Prepare a statement object using the given SQL query. The statement object will then be responsible of executing
    # the query and handle results. Statement objects may be reused over time if their `repeatable` flag is set to true.
    # @param query A SQL query to execute (e.g. "SELECT * FROM users WHERE name = 'Joe'")
    # @param repeatable A flag to indicate whether or not the statement is repeatable
    prepareStatement(query: string, repeatable: bool): DatabaseStatement;

    # Begin a SQL transaction on this connection.
    begin();

    # End the current transaction and rollback all changes that occurred between the call of `begin` and `rollback`.
    rollback();

    # End the current transaction and persist all changes that occurred between the call of `begin` and `commit`.
    commit();

    # Close the current connection. After this call the connection should never be called again.
    close();

    # Create a new empty blob.
    # @return An empty blob
    newBlob(): DatabaseBlob;
}

# A pool of connections to a single database.
DatabaseConnectionPool = interface +j +n +o {
    # Get a connection to the database. This method won't be called more than the engine pool size return
    # by DatabaseEngine::getPoolSize.
    # @return A connection to the database
    getConnection(): DatabaseConnection;
}

# An interface to implement a custom SQL backend on host side instead of using a native backend.
DatabaseEngine = interface +j +n +o {
    # Open a connection to a database using the given database name.
    # @params databaseName The name of the database to open
    # @return A connection pool to the given database
    connect(databaseName: string): DatabaseConnectionPool;
    # Get the maximum number of concurrent connection on a single database.
    # @return the maximum number of concurrent connection that the engine is able to open on a single database.
    getPoolSize(): i32;
}

#Class representing a database backend.
DatabaseBackend = interface +c {
    # Get the maximum number of concurrent connection that the backend is able to open on a single database.
    # @return the size of the connection pool.
    getConnectionPoolSize(): i32;

    # Enable or disable query logging. By default logging is disabled. Query logging will record every SQL query in log streams.
    # @return this database backend (to chain configuration calls)
    enableQueryLogging(enable: bool): DatabaseBackend;

    # Return true if query logging is enabled.
    # @return trye if query logging is enabled, false otherwise.
    isLoggingEnabled(): bool;

    # Create an instance of SQLite3 database.
    # @return DatabaseBackend object
    static getSqlite3Backend(): DatabaseBackend;

    # Create a database backend instance from the given DatabaseEngine implementation.
    static createBackendFromEngine(engine: DatabaseEngine): DatabaseBackend;
}
