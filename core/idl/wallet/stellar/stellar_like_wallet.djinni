@import "../amount.djinni"

StellarLikeOperationType = enum {
    create_account; payment; path_payment; manage_offer; create_passive_offer; set_optionals;
    change_trust; allow_trust; account_merge; inflation; manage_data; bump_sequence;
}


StellarLikeBlock = interface +c {

}

StellarLikeTransaction = interface +c {
    toRawTransaction(): binary;
}

StellarLikeTransactionBuilder = interface +c {
    addNativePayment(address: string, amount: Amount): StellarLikeTransactionBuilder;
    addCreateAccount(address: string, amount: Amount): StellarLikeTransactionBuilder;
    setBaseFee(baseFee: Amount): StellarLikeTransactionBuilder;
    build(callback: Callback<StellarLikeTransaction>);
}

StellarLikeAsset = record {
    type: string;
    code: optional<string>;
    issuer: optional<string>;
}

StellarLikeOperationRecord = record {
    hash: string;
    successful: bool;
    operationType: StellarLikeOperationType;
    transactionHash: string;
    asset: StellarLikeAsset;
    sourceAsset: optional<StellarLikeAsset>;
    sourceAmount: optional<Amount>;
}

StellarLikeOperation = interface +c {
    getRecord(): StellarLikeOperationRecord;
}

StellarLikeAccount = interface +c {
    # Checks if the current account exists on the stellar Network. If it doesn't the account needs to be activated by
    # sending an account creation operation with an amount of at least the base reserve.
    # @return Callback with a boolean indicating if the account exists on the Stellar network or not.
    exists(callback: Callback<bool>);

    # Create a new transaction builder to create new transaction
    # @return The transaction builder
    buildTransaction(): StellarLikeTransactionBuilder;

    # Broadcast the given raw transaction to the network.
    broadcastRawTransaction(tx: binary, callback: Callback<string>);
}

StellarLikeWallet = interface +c {
    exists(address: string, callback: Callback<bool>);
}