@import "../../errors.djinni"
@import "../amount.djinni"
@import "../../tezos/addresses.djinni"

TezosOperationTag = enum {
	OPERATION_TAG_NONE;
	OPERATION_TAG_NONE1;
	OPERATION_TAG_NONE2;
	OPERATION_TAG_GENERIC;
	OPERATION_TAG_NONE4;
	OPERATION_TAG_PROPOSAL;
	OPERATION_TAG_BALLOT;
	OPERATION_TAG_REVEAL;
	OPERATION_TAG_TRANSACTION;
	OPERATION_TAG_ORIGINATION;
	OPERATION_TAG_DELEGATION;
}

#Class representing a Tezos transaction
TezosLikeTransaction = interface +c {
	# Get type of operation (transaction, reveal ... cf TezosOperationTag)
	getType(): TezosOperationTag;
	# Get the hash of the transaction.
	getHash(): string;
	# Get Fees (in drop)
	getFees(): Amount;
	# Get destination XTZ. address
	getReceiver(): optional<TezosLikeAddress>;
	# Get XTZ. sender address
	getSender(): TezosLikeAddress;
	# Get amount of XTZ to send
	getValue(): optional<Amount>;
	# Serialize the transaction to its raw format.
	serialize(): binary;
	# Set signature of transaction, when a signature is set serialize method gives back serialized Tx
	setSignature(signature: binary);
	# Get the time when the transaction was issued or the time of the block including
	# this transaction
	getDate(): date;
	# Get Signing public Key
	getSigningPubKey(): binary;
	getCounter(): BigInt;
	getGasLimit(): Amount;
	getStorageLimit(): BigInt;
	# Get hash of block in which tx is included
	getBlockHash(): optional<string>;
	# Get status of transaction: equals to 1 if succeeded, 0 otherwise
	getStatus(): i32;
}

#Class representing a Tezos Operation
TezosLikeOperation = interface +c {
	#Get operation's transaction
	#@return TezosLikeTransaction object
	getTransaction(): TezosLikeTransaction;
}

#Class representing Bitcoin block
TezosLikeBlock = interface +c {
	#Hash of block
	#@return string representing hash of this block
	getHash(): string;
	#Height of block in blockchain
	#@return 64 bits integer, height of block
	getHeight(): i64;
	#Timestamp when block was mined
	#@return Date object, date when block was appended to blockchain
	getTime(): date;
}

TezosLikeTransactionBuilder = interface +c {

	# Set type of operation (transaction, origination, reveal ...)
	# Default operation is "transaction" type
	setType(type: TezosOperationTag): TezosLikeTransactionBuilder;
	# Send funds to the given address. This method can be called multiple times to send to multiple addresses.
	# @param amount The value to send
	# @param address Address of the recipient
	# @return A reference on the same builder in order to chain calls.
	sendToAddress(amount: Amount, address: string): TezosLikeTransactionBuilder;

	# Send all available funds to the given address.
	# @param address Address of the recipient
	# @return A reference on the same builder in order to chain calls.
	wipeToAddress(address: string): TezosLikeTransactionBuilder;

	# Set fees (in drop) the originator is willing to pay
	# @return A reference on the same builder in order to chain calls.
	setFees(fees: Amount): TezosLikeTransactionBuilder;
	# Set gas limit the originator is not willing to exceed.
	# @return A reference on the same builder in order to chain calls.
	setGasLimit(gasLimit: Amount): TezosLikeTransactionBuilder;
	# Set storage limit the originator is not willing to exceed.
	# Reference : https://tezos.gitlab.io/zeronet/whitedoc/michelson.html
	# @return A reference on the same builder in order to chain calls.
	setStorageLimit(storageLimit: BigInt): TezosLikeTransactionBuilder;

	# Build a transaction from the given builder parameters.
	build(callback: Callback<TezosLikeTransaction>);

	# Creates a clone of this builder.
	# @return A copy of the current builder instance.
	clone(): TezosLikeTransactionBuilder;

	# Reset the current instance to its initial state
	reset();

	static parseRawUnsignedTransaction(currency: Currency, rawTransaction: binary): TezosLikeTransaction;
	static parseRawSignedTransaction(currency: Currency, rawTransaction: binary): TezosLikeTransaction;
}

#Class representing a Tezos account
TezosLikeAccount = interface +c {
	broadcastRawTransaction(transaction: binary, callback: Callback<string>);
	broadcastTransaction(transaction: TezosLikeTransaction, callback: Callback<string>);
	buildTransaction(): TezosLikeTransactionBuilder;
	# Get needed storage to proceed a tx
	# @param address to which we want to send tx
	# @return needed storage to interact with address/contract
	# Note: same note as for getGasPrice method on EthereumLikeAccount
	getStorage(address: string, callback: Callback<BigInt>);
	# Get estimated gas limit to set so the transaction will succeed
	# The passed address could be implicit address or contract
	# This estimation is based on X last incoming txs (to address) that succeeded
	# Note: same note as for getFees method on BitcoinLikeAccount
	getEstimatedGasLimit(address: string, callback: Callback<BigInt>);
	# Get fees from network
	getFees(callback: Callback<BigInt>);
	# Get originated accounts by current account
	getOriginatedAccounts(): list<TezosLikeOriginatedAccount>;
}

# Class representing originated accounts
TezosLikeOriginatedAccount = interface +c {
	# Get address of originated account (prefixed with KT)
	getAddress(): string;
	# Get publicKey of originated account
	# Could be empty if not yet revealed
	getPublicKey(): optional<string>;
	# Get balance of originated account
	getBalance(callback: Callback<Amount>);
	# Get balance history of originated account
	getBalanceHistory(start: date, end: date, period: TimePeriod, callback: ListCallback<Amount>);
	# Know if possible to spend from this account
	# By default originations from libcore set it to true
	isSpendable(): bool;
	# Know if possible to delegate from this account
	# By default originations from libcore set it to true
	isDelegatable(): bool;
	# Get related operations to account
	queryOperations(): OperationQuery;
	# Get builder to construct transaction on originated account
	buildTransaction(): TezosLikeTransactionBuilder;
}

TezosConfiguration = interface +c {
  	const TEZOS_XPUB_CURVE: string = "TEZOS_XPUB_CURVE";
	const TEZOS_PROTOCOL_UPDATE: string = "TEZOS_PROTOCOL_UPDATE";
	const TEZOS_NODE: string = "TEZOS_NODE";
}

TezosConfigurationDefaults = interface +c {
	const TEZOS_DEFAULT_API_ENDPOINT: string = "https://explorers.api.live.ledger.com";
	const TEZOS_DEFAULT_API_VERSION: string = "v3";
	const TZSTATS_API_ENDPOINT: string = "https://api.tzstats.com/explorer";
	const TEZOS_DEFAULT_NODE: string = "https://mainnet.tezrpc.me";
	const TEZOS_OBSERVER_NODE_ENDPOINT_S3: string = "https://s3.tezos.com";
	const TEZOS_OBSERVER_WS_ENDPOINT_S2: string = "wss://s2.tezos.com";
	const TEZOS_OBSERVER_WS_ENDPOINT_S3: string = "wss://s3.tezos.com";
  	const TEZOS_XPUB_CURVE_ED25519: string = "ED25519";
  	const TEZOS_XPUB_CURVE_SECP256K1: string = "SECP256K1";
	const TEZOS_XPUB_CURVE_P256: string = "P256";
	# Taken from some existing XTZ wallets
	# http://tezos.gitlab.io/protocols/005_babylon.html#gas-cost-changes
	const TEZOS_DEFAULT_FEES: string = "5000";
	const TEZOS_DEFAULT_MAX_FEES: string = "30000";
	const TEZOS_DEFAULT_GAS_LIMIT: string = "18000";
	const TEZOS_DEFAULT_STORAGE_LIMIT: string = "300";
	const TEZOS_PROTOCOL_UPDATE_BABYLON: string = "TEZOS_PROTOCOL_UPDATE_BABYLON";
}
