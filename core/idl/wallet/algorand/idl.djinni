@import "../amount.djinni"

@import "configuration.djinni"

AlgorandNetworkParameters = record {
    # Name of the network
    genesisID: string;
    # Hash of the network
    genesisHash: string;
}

AlgorandOperationType = enum {
    PAYMENT;
    ACCOUNT_CLOSE;
    ACCOUNT_REGISTER_ONLINE;
    ACCOUNT_REGISTER_OFFLINE;
    ASSET_CREATE;
    ASSET_RECONFIGURE;
    ASSET_DESTROY;
    ASSET_OPT_IN;
    ASSET_OPT_OUT;
    ASSET_TRANSFER;
    ASSET_REVOKE;
    ASSET_FREEZE;
    UNSUPPORTED;
}

AlgorandAssetParams = record {
    # The unique asset identifier
    assetId: optional<string>;
    # The name of this asset, as supplied by the creator
    assetName: optional<string>;
    # The name of a unit of this asset, as supplied by the creator
    unitName: optional<string>;
    # A URL where more information about the asset can be retrieved
    url: optional<string>;
    # Specifies whether holdings in this asset are frozen by default
    defaultFrozen: bool;

    # The total number of units of this asset
    total: optional<string>;
    # The number of digits to use after the decimal point when displaying this asset
    decimals: optional<string>;

    # The address that created this asset.
    creatorAddress: optional<string>;
    # The address used to manage the keys of this asset and to destroy it
    managerAddress: optional<string>;
    # The address used to freeze holdings of this asset. If empty, freezing is not permitted.
    freezeAddress: optional<string>;
    # The address used to clawback holdings of this asset. If empty, clawback is not permitted.
    clawbackAddress: optional<string>;
    # The address holding reserve (non-minted) units of this asset
    reserveAddress: optional<string>;
    # Some unspecified asset metadata (32 bytes in Base64)
    metadataHash: optional<string>;
}

AlgorandAssetAmount = record {
    # The address that created the asset
    creatorAddress: string;
    # The amount of asset
    amount: string;
    # Whether this amount is frozen
    frozen: bool;
    # The id of the asset
    assetId: string;
}

AlgorandPaymentInfo = record {
    # The recipient's address
    recipientAddress: string;
    # The amount of MicroAlgos being transferred
    amount: string;
    # The address to send all remaining funds before closing the account
    closeAddress: optional<string>;

    # The amount sent to CloseRemainderTo, for committed transaction
    closeAmount: optional<string>;
}

AlgorandParticipationInfo = record {
    # The root participation public key (if any) currently registered for this round
    rootPublicKey: string;
    # The selection (VRF) public key (if any) currently registered for this round
    vrfPublicKey: string;

    # The number of subkeys for each batch of participation keys
    voteKeyDilution: string;
    # The first round for which this participation is valid
    voteFirstRound: string;
    # The last round for which this participation is valid
    voteLastRound: string;
}

AlgorandAssetConfigurationInfo = record {
    # The unique asset ID. Required to re-configure or destroy the asset, set to zero on asset creation.
    assetId: optional<string>;
    # The asset configuration options. Empty when destroying the asset.
    assetParams: optional<AlgorandAssetParams>;
}

AlgorandAssetTransferInfo = record {
    # The unique asset ID. Required to re-configure or destroy the asset, set to zero on asset creation.
    assetId: string;
    # The amount of asset being transferred
    amount: optional<string>;
    # The recipient's address
    recipientAddress: string;
    # The address to send all remaining funds before closing the account
    closeAddress: optional<string>;
    # Sender account on which clawback is used
    clawedBackAddress: optional<string>;
    # The amount sent to closeAddress
    closeAmount: optional<string>;
}

AlgorandAssetFreezeInfo = record {
    # The unique ID of the asset being (un)frozen
    assetId: string;
    # The account whose asset is being (un)frozen
    frozenAddress: string;
    # The new freeze status
    frozen: bool;
}

AlgorandTransaction = interface +c {
    const getId(): string;
    const getType(): string;
    const getSender(): string;
    const getFee(): string;
    const getNote(): string;
    const getRound(): string;
    const getSenderRewards(): string;
    const getReceiverRewards(): string;
    const getCloseRewards(): string;

    setSender(sender: string);
    setFee(fee: string);
    setNote(note: string);

    setPaymentInfo(info: AlgorandPaymentInfo);
    const getPaymentInfo(): AlgorandPaymentInfo;

    setParticipationInfo(info: AlgorandParticipationInfo);
    const getParticipationInfo(): AlgorandParticipationInfo;

    setAssetConfigurationInfo(info: AlgorandAssetConfigurationInfo);
    const getAssetConfigurationInfo(): AlgorandAssetConfigurationInfo;

    setAssetTransferInfo(info: AlgorandAssetTransferInfo);
    const getAssetTransferInfo(): AlgorandAssetTransferInfo;

    setAssetFreezeInfo(info: AlgorandAssetFreezeInfo);
    const getAssetFreezeInfo(): AlgorandAssetFreezeInfo;

    # Serialize the transaction in MsgPack format
    const serialize(): binary;

    setSignature(signature: binary);
}

AlgorandOperation = interface +c {
    const getTransaction(): AlgorandTransaction;
    const getAlgorandOperationType(): AlgorandOperationType;
    const getRewards(): string;
    const getAssetAmount(): string;
}

AlgorandAddress = interface +c {
    static fromPublicKey(pubkey: binary) : string;
    static toPublicKey(address: string) : binary;
}

AlgorandAccount = interface +c {
    # Get the maximum amount spendable in one transaction
    # @param callback, Callback returning the maximum amount spendable
    # @param operationType, the type of the operation
    const getSpendableBalance(
        operationType: AlgorandOperationType,
        callback: Callback<Amount>
    );

    # Get information about a specific asset
    # @param assetId, the unique identifier of the asset to look for
    # @param callback, Callback returning the information about the queried asset
    const getAsset(
        assetId: string,
        callback: Callback<AlgorandAssetParams>
    );

    # Check if address has a specific asset
    # @param address, the address to check
    # @param assetId, the unique identifier of the asset to look for
    # @param callback, Callback returning the true if the address hold the asset
    const hasAsset(
        address : string,
        assetId: string,
        callback: Callback<bool>
    );

    # Check if address can receive the given amount:
    # it may not be enough to reach the minimum balance, if the account has 0 ALGO
    # @param address, the address to check
    # @param amount, the amount to test
    # @param callback, Callback returning the true if the address hold the asset
    const isAmountValid(
        address : string,
        amount: string,
        callback: Callback<bool>
    );

    # Get balance of account for a particular asset.
    # @param assetId, the unique identifier of the asset on the algorand network
    # @param callback, if getAssetBalance succeeds, Callback returning an Amount object which represents account's balance
    const getAssetBalance(
        assetId: string,
        callback: Callback<AlgorandAssetAmount>
    );

    # Get balance of account for a particular asset at a precise interval with a certain granularity
    # @param assetId, the unique identifier of the asset on the algorand network
    # @param start, lower bound of search range
    # @param end, upper bound of search range
    # @param precision, granularity at which we want results
    # @param callback, ListCallback returning a list of Amount objects which represents account's balance
    const getAssetBalanceHistory(
        assetId: string,
        start: string,
        end: string,
        period: TimePeriod,
        callback: ListCallback<AlgorandAssetAmount>
    );

    # Get balances of all assets to which account is registered
    # @param callback, ListCallback returning a list of AlgorandAssetAmount objects representing the different balances
    const getAssetsBalances(callback: ListCallback<AlgorandAssetAmount>);

    # Get information about the assets created by account
    # @param callback, ListCallback returning a list of AlgorandAssetParams objects representing the assets created by account
    const getCreatedAssets(callback: ListCallback<AlgorandAssetParams>);

    # Get the pending rewards for account
    # @param callback, Callback returning the amount of pending rewards in MicroAlgos
    const getPendingRewards(callback: Callback<Amount>);

    # Get the total rewards of MicroAlgos account has received, including pending rewards.
    # @param callback, Callback returning the total rewards in MicroAlgos.
    const getTotalRewards(callback: Callback<Amount>);

    # Get an estimation (in MicroAlgos) of the fees needed to broadcast a given transaction to the algorand network
    # @param transaction, the transaction for which fees are estimated
    # @param callback, Callback returning the fees in MicroAlgos for the specified transaction
    const getFeeEstimate(transaction: AlgorandTransaction, callback: Callback<Amount>);

    # Build a raw signed transaction from a raw unsigned transaction and the signature
    # @param rawUnsignedTransaction, the msgpack-encoded unsigned transaction
    # @param signature, the signature of the transaction
    # @return binary, the msgpack-encoded signed transaction
    const buildRawSignedTransaction(
        rawUnsignedTransaction: binary,
        signature: binary
    ): binary;

    # Broadcast a raw transaction to the algorand network
    # @param transaction, the msgpack-encoded transaction
    # @param callback, Callback returning the id of the transaction in case of success, an error message otherwise
    const broadcastRawTransaction(
        transaction: binary,
        callback: Callback<string>
    );

    # Broadcast an AlgorandTransaction object to the algorand network
    # @param transaction, the transaction to broadcast
    # @param callback, Callback returning the fees in MicroAlgos for the specified transaction
    const broadcastTransaction(
        transaction: AlgorandTransaction,
        callback: Callback<string>
    );

    # Create a new transaction
    # @param callback, The new transaction
    const createTransaction(
        callback: Callback<AlgorandTransaction>
    );
}

AlgorandWallet = interface +c {

}
