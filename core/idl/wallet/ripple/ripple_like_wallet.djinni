@import "../../errors.djinni"
@import "../amount.djinni"
@import "../../ripple/addresses.djinni"
@import "../../ripple/memo.djinni"

# TODO: to be more accurate, all RippleLikeBlock classes should be renamed as RippleLikeLedger,
# since there is an analogy between block and ledger concepts it's ok for the moment ...

#Class representing a Ripple transaction
RippleLikeTransaction = interface +c {
    # Get the hash of the transaction.
    getHash(): string;
    # Get Fees (in drop)
    getFees(): Amount;
    # Get destination XRP address
    getReceiver(): RippleLikeAddress;
    # Get XRP sender address
    getSender(): RippleLikeAddress;
    # Get amount of XRP to send
    getValue(): Amount;
    # Serialize the transaction to its raw format.
    serialize(): binary;
    # Set signature of transaction, when a signature is set serialize method gives back serialized Tx
    setSignature(rSignature: binary, sSignature: binary);
    setDERSignature(signature: binary);
    # Get the time when the transaction was issued or the time of the block including
    # this transaction
    getDate(): date;
    # Get block to which transaction belongs (was mined in)
    #getBlock(): optional<RippleLikeBlock>;
    # Get sequence of an account when tx was built (number of sent transactions from an account)
    getSequence(): BigInt;
    # Get Ledger's sequence in which the tx was included
    getLedgerSequence(): BigInt;
    # Get Signing public Key
    getSigningPubKey(): binary;
    # Get all memos associated with the transaction.
    getMemos(): list<RippleLikeMemo>;
    # Add a memo to a transaction.
    addMemo(memo: RippleLikeMemo);
    # An arbitrary unsigned 32-bit integer that identifies a reason for payment or a non-Ripple account
    getDestinationTag(): optional<i64>;
}

#Class representing a Ripple Operation
RippleLikeOperation = interface +c {
    #Get operation's transaction
    #@return RippleLikeTransaction object
    getTransaction(): RippleLikeTransaction;
}

#Class representing Ripple block
RippleLikeBlock = interface +c {
    #Hash of block
    #@return string representing hash of this block
    getHash(): string;
    #Height of block in blockchain
    #@return 64 bits integer, height of block
    getHeight(): i64;
    #Timestamp when block was mined
    #@return Date object, date when block was appended to blockchain
    getTime(): date;
}

RippleLikeTransactionBuilder = interface +c {

    # Send funds to the given address. This method can be called multiple times to send to multiple addresses.
    # @param amount The value to send
    # @param address Address of the recipient
    # @return A reference on the same builder in order to chain calls.
    sendToAddress(amount: Amount, address: string): RippleLikeTransactionBuilder;

    # Send all available funds to the given address.
    # @param address Address of the recipient
    # @return A reference on the same builder in order to chain calls.
    wipeToAddress(address: string): RippleLikeTransactionBuilder;

    # Set fees (in drop) the originator is willing to pay
    # @return A reference on the same builder in order to chain calls.
    setFees(fees: Amount): RippleLikeTransactionBuilder;

    # Add a memo.
    # @return A reference on the same builder in order to chain calls.
    addMemo(memo: RippleLikeMemo): RippleLikeTransactionBuilder;

    # An arbitrary unsigned 32-bit integer that identifies a reason for payment or a non-Ripple account
    setDestinationTag(tag: i64): RippleLikeTransactionBuilder;

    # Build a transaction from the given builder parameters.
    build(callback: Callback<RippleLikeTransaction>);

    # Creates a clone of this builder.
    # @return A copy of the current builder instance.
    clone(): RippleLikeTransactionBuilder;

    # Reset the current instance to its initial state
    reset();

    static parseRawUnsignedTransaction(currency: Currency, rawTransaction: binary): RippleLikeTransaction;
    static parseRawSignedTransaction(currency: Currency, rawTransaction: binary): RippleLikeTransaction;
}

#Class representing a Ripple account
RippleLikeAccount = interface +c {
    broadcastRawTransaction(transaction: binary, callback: Callback<string>);
    broadcastTransaction(transaction: RippleLikeTransaction, callback: Callback<string>);
    buildTransaction(): RippleLikeTransactionBuilder;
    # Get fees from network
    # Note: it would have been better to have this method on RippleLikeWallet
    # but since RippleLikeWallet is not used anywhere, it's better to keep all
    # specific methods under the same specific class so it will be easy to segratate
    # when the right time comes !
    getFees(callback: Callback<Amount>);
    # Get base reserve (dust to leave on an XRP account) from network
    # Note: same note as above
    getBaseReserve(callback: Callback<Amount>);
    # Check whether an account has been activated or not
    # Here activation, means that the XRP account received a first transaction with a minimum amount
    # greater or equal to XRP base reserve
    # @param: address to check
    # @return: true if valid address and has been activated, false otherwise
    isAddressActivated(address: string, isActivated: Callback<bool>);
}

RippleConfiguration = interface +c {
    const RIPPLE_LAST_LEDGER_SEQUENCE_OFFSET: string = "RIPPLE_LAST_LEDGER_SEQUENCE_OFFSET";
}

RippleConfigurationDefaults = interface +c {
    const RIPPLE_DEFAULT_API_ENDPOINT: string = "https://data.ripple.com";
    const RIPPLE_OBSERVER_NODE_ENDPOINT_S2: string = "https://s2.ripple.com";
    const RIPPLE_OBSERVER_NODE_ENDPOINT_S3: string = "https://s3.ripple.com";
    const RIPPLE_OBSERVER_WS_ENDPOINT_S2: string = "wss://s2.ripple.com";
    const RIPPLE_OBSERVER_WS_ENDPOINT_S3: string = "wss://s3.ripple.com";
    const RIPPLE_DEFAULT_PORT: string = "51234";
    const RIPPLE_DEFAULT_LAST_LEDGER_SEQUENCE_OFFSET: i32 = 4;
}
