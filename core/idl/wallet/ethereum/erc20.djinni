@import "../../math/big_int.djinni"
@import "../../ethereum/addresses.djinni"

# Representation of ERC20Tokens.
ERC20Token = record {
    # Name of the currency.
    name: string;
    # Symbol representation of the currency.
    symbol: string;
    # Address of the smart contract for this ERC20.
    contractAddress: string;
    # Maximum number of decimals (used to show the human representation of the currency).
    numberOfDecimal: i32;
}

# ERC20-like accounts class.
ERC20LikeAccount = interface +c {
    # Key of the ERC20LikeAccount UID in the new erc20 operation event payload.
    # The value is stored in a string.
    const EV_NEW_OP_ERC20_ACCOUNT_UID: string = "EV_NEW_OP_ERC20_ACCOUNT_UID";

    # Get uid
    getUid(): string;
    # Get an ERC20 token.
    getToken(): ERC20Token;
    # Get the address of this ERC20 account.
    getAddress(): string;
    # Get the current balance of this ERC20 account.
    getBalance(callback: Callback<BigInt>);
    # Get the balance history of this ERC20 account from a starting date (included) to an ending
    # date (included).
    getBalanceHistoryFor(start: date, end: date, period: TimePeriod): list<BigInt>;
    # Get the list of operations performed on this ERC20 account.
    getOperations(): list<ERC20LikeOperation>;
    # Get ERC20 operation by uid
    getOperation(uid: string, callback: Callback<ERC20LikeOperation>);
    # Get all ERC20 operations
    getAllOperations(from: i32, to: i32, ascending: bool, callback: ListCallback<ERC20LikeOperation>);
    # Get ERC20 operations from a given block height (included), it also returns mempool operations
    getOperationsFromBlockHeight(from: i32, to: i32, fromBlockHeight: i64, callback: ListCallback<ERC20LikeOperation>);
    # Retrieve raw data concerning a transaction of a given amount to a given address.
    getTransferToAddressData(amount: BigInt, address: string, data: Callback<binary>);
    queryOperations(): OperationQuery;
}

# Class representing a Ethereum transaction.
ERC20LikeOperation = interface +c {
    # Get the hash of the transaction.
    getHash(): string;
    # Get the nonce of the transaction : sequence number issued by originating EOA.
    getNonce(): BigInt;
    # Get Gas price (in wei).
    getGasPrice(): BigInt;
    # Get start gas (in wei) : maximum amount of gas the originator is willing to pay.
    getGasLimit(): BigInt;
    # Used gas (in wei) : used gas during this transaction:
    getUsedGas(): BigInt;
    # Get source ETH address.
    getSender(): string;
    # Get destination ETH address.
    getReceiver(): string;
    # Get amount of ether to send.
    getValue(): BigInt;
    # Get binary data payload.
    getData(): binary;
    # Get the time when the transaction was issued or the time of the block including this
    # this transaction.
    getTime(): date;
    # Get operation type : whether it is a SEND or RECEIVE.
    getOperationType(): OperationType;
    # Get opration status : pending or confirmed.
    getStatus(): i32;
    # Get block height on which operation was included.
    # @return Optional 64-bit integer, height of block in which operation was validated
    getBlockHeight(): optional<i64>;
    # Get parent ETH operation uid
    getETHOperationUid(): string;
    # Get ERC20 operation uid
    getOperationUid(): string;
}
