@import "../../events/emitter.djinni"
@import "../../utils/callback.djinni"
@import "../amount.djinni"
@import "../../preferences/preferences.djinni"
@import "../../debug/logger.djinni"
@import "../bitcoin/bitcoin_like_wallet.djinni"
@import "../cosmos/wallet.djinni"
@import "../ethereum/ethereum_like_wallet.djinni"
@import "../../bitcoin/addresses.djinni"
@import "../../cosmos/addresses.djinni"
@import "../algorand/idl.djinni"
@import "currency.djinni"
@import "../../collections/dynamic.djinni"

@import "../stellar/network.djinni"
@import "../stellar/addresses.djinni"
@import "../stellar/stellar_like_wallet.djinni"

# Class of synchronization status constants.
SynchronizationStatus = interface +c {
    const STATUS_DONE: i32 = 1;
    const STATUS_ERROR: i32 = 2;
    const STATUS_DONE_SYNCHRONIZE_NEXT_ACCOUNT: i32 = 3;
}

DerivationPath = interface +c {
    # Get the number of element in this path.
    getDepth(): i32;
    # Get the child num at the given index in the path.
    getChildNum(index: i32): i32;
    # Get the child num at the given index in the path. If the child num is hardened, returns it
    # without the hardened marker bit.
    getUnhardenedChildNum(index: i32): i32;
    # Return true if the given index in the path is an hardened child num.
    isHardened(index: i32): bool;
    # Serialize the given path to a human readable string like "44'/0'/0'/0/0".
    toString(): string;
    # Return a derivation path without the last element, e.g. the parent of "44'/0'/0'/0/0" is
    # "44'/0'/0'/0".
    getParent(): DerivationPath;
    # Return an array where which item is a child num of the path.
    toArray(): list<i32>;

    static parse(path: string): DerivationPath;
}

# Type of operation.
#
# It’s possible to either
# send funds (getAmount() returns the sent amount),
# receive funds (getAmount() returns the sent amount),
# delegate funds (getAmount() returns the *delegated* amount) ; only getFees() are part of balanceHistory
# undelegate funds (getAmount() returns the *undelegated* amount) ; only getFees() are part of balanceHistory
# claim rewards (getAmount() returns 0 or the known amount of claimed rewards) ; only getFees() are part of balanceHistory
#
# *other* : None operation type should be used when the operation is not expected to affect the balanceHistory of the
#           account. Otherwise, this is a free for all. Clients can use the inflated Operation currency-specific
#           API to correctly interpret the operation in the context of an account.
#
# The last 3 operations should not expect to change balanceHistory with their amount, but only their fees.
OperationType = enum {
    send;
    receive;
    delegate;
    undelegate;
    rewards;
    none;
}

# Level of trust for transactions.
#
# A transaction is pending when it’s not mined yet.
#
# A transaction is unstrusted when it belongs to a block that is not 5-block old yet (0—4).
#
# A transaction is trusted when it belongs to a block that is at least 5-block old.
#
# A transaction is dropped when it has been removed from the block it was originally in. That might
# happen if the block was dropped by peers while a reorganization was happening, for instance.
TrustLevel = enum {
    trusted;
    pending;
    untrusted;
    dropped;
}

# The trust indicator of an operation.
TrustIndicator = interface +c {
    getTrustWeight(): i32;
    getTrustLevel(): TrustLevel;
    getConflictingOperationUids(): list<string>;
    getOrigin(): string;
}

# Structure of a block in the blockchain.
Block = record {
    # String, block's hash.
    blockHash: string;
    # String, id of block (usually height of block).
    uid: string;
    # Date on which block was mined.
    time: date;
    # String, currency's name of blockchain the block belongs to.
    currencyName: string;
    # 64-bit integer, height of block in the blockchain.
    height: i64;
}

# Class representing an operation.
Operation = interface +c {
    # Get id's operation.
    # @return string
    getUid(): string;
    # Get account's index in user's wallet.
    # @return 32-bit integer
    getAccountIndex(): i32;
    # Get type of operation.
    # @return OperationType object (for more details refer to OperationType)
    getOperationType(): OperationType;
    # Return date on which operation was issued.
    # @return date object
    getDate(): date;
    # Get senders of operation.
    # @return List of string, list of all senders
    getSenders(): list<string>;
    # Get recipients of operation.
    # @return List of string, list of all recipients
    getRecipients(): list<string>;
    # Get account-filtered recipients list associated with the operation.
    #
    # This function will filter recipients to retain only the ones that are owned by the current
    # account.
    getSelfRecipients(): list<string>;
    # Get amount of operation.
    # @return Amount object
    getAmount(): Amount;
    # Get fees of operation.
    # @return Optional Amount object
    getFees(): optional<Amount>;
    # Get preferences of operation.
    # @return Prefences object
    getPreferences(): Preferences;
    # Get trust indicator of operation.
    # @return TrustIndicator object
    getTrust(): TrustIndicator;
    # Get block height on which operation was included.
    # @return Optional 64-bit integer, height of block in which operation was validated
    getBlockHeight(): optional<i64>;
    # Convert operation as Bitcoin operation.
    # @return BitcoinLikeOperation object
    asBitcoinLikeOperation(): BitcoinLikeOperation;
    # Convert operation as Cosmos operation.
    # @return CosmosLikeOperation object
    asCosmosLikeOperation(): CosmosLikeOperation;
    # Convert operation as Ethereum operation.
    # @return EthereumLikeOperation object
    asEthereumLikeOperation(): EthereumLikeOperation;
    #Convert operation as Ripple operation
    #@return RippleLikeOperation object
    asRippleLikeOperation(): RippleLikeOperation;
    #Convert operation as Tezos operation
    #@return TezosLikeOperation object
    asTezosLikeOperation(): TezosLikeOperation;
    # Same as isInstanceOfBitcoinLikeOperation for bitcoin.
    # Convert operation as Stellar operation.
    # @return StellarLikeOperation object
    asStellarLikeOperation(): StellarLikeOperation;
    # Same as isInstanceOfBitcoinLikeOperation for bitcoin.
    # Convert operation as Algorand operation.
    # @return AlgorandOperation object
    asAlgorandOperation(): AlgorandOperation;
    # Is this an instance of a Bitcoin-like operation?
    isInstanceOfBitcoinLikeOperation(): bool;
    # Same as isInstanceOfCosmosLikeOperation for cosmos.
    isInstanceOfCosmosLikeOperation(): bool;
    # Same as isInstanceOfEthereumLikeOperation for ethereum.
    isInstanceOfEthereumLikeOperation(): bool;
    # Same as isInstanceOfRippleLikeOperation for ripple.
    isInstanceOfRippleLikeOperation(): bool;
    # Same as isInstanceOfTezosLikeOperation for tezos.
    isInstanceOfTezosLikeOperation(): bool;
    # Same as isInstanceOfBitcoinLikeOperation for ripple.
    const isInstanceOfStellarLikeOperation(): bool;

    # Tells if the operation is complete.
    # @return boolean
    isComplete(): bool;
    # Get type of wallet from which operation was issued.
    # @return WalletType object
    getWalletType(): WalletType;
    # Get the currency this operation is about.
    getCurrency(): Currency;
}

OperationOrderKey = enum {
    date; amount; senders; recipients; type; currency_name; fees; block_height;
}

#TODO
QueryFilter = interface +c {
    static accountEq(accountUid: string): QueryFilter;
    static accountNeq(accountUid: string): QueryFilter;
    static dateLte(time: date): QueryFilter;
    static dateLt(time: date): QueryFilter;
    static dateGt(time: date): QueryFilter;
    static dateGte(time: date): QueryFilter;
    static dateEq(time: date): QueryFilter;
    static dateNeq(time: date): QueryFilter;
    static containsRecipient(recipientAddress: string): QueryFilter;
    static containsSender(senderAddress: string): QueryFilter;
    static currencyEq(currencyName: string): QueryFilter;
    static operationUidEq(operationUid: string): QueryFilter;
    static operationUidNeq(operationUid: string): QueryFilter;
    static trustEq(trust: TrustLevel): QueryFilter;
    static trustNeq(trust: TrustLevel): QueryFilter;
    static feesEq(amount: Amount): QueryFilter;
    static feesNeq(amount: Amount): QueryFilter;
    static feesGte(amount: Amount): QueryFilter;
    static feesGt(amount: Amount): QueryFilter;
    static feesLte(amount: Amount): QueryFilter;
    static feesLt(amount: Amount): QueryFilter;
    static amountEq(amount: Amount): QueryFilter;
    static amountNeq(amount: Amount): QueryFilter;
    static amountGte(amount: Amount): QueryFilter;
    static amountGt(amount: Amount): QueryFilter;
    static amountLte(amount: Amount): QueryFilter;
    static amountLt(amount: Amount): QueryFilter;
    static blockHeightEq(blockHeight: i64): QueryFilter;
    static blockHeightNeq(blockHeight: i64): QueryFilter;
    static blockHeightGte(blockHeight: i64): QueryFilter;
    static blockHeightGt(blockHeight: i64): QueryFilter;
    static blockHeightLte(blockHeight: i64): QueryFilter;
    static blockHeightLt(blockHeight: i64): QueryFilter;
    static blockHeightIsNull(): QueryFilter;
    static operationTypeEq(operationType: OperationType): QueryFilter;
    static operationTypeNeq(operationType: OperationType): QueryFilter;

    op_and(filter: QueryFilter): QueryFilter;
    op_or(filter: QueryFilter): QueryFilter;
    op_and_not(filter: QueryFilter): QueryFilter;
    op_or_not(filter: QueryFilter): QueryFilter;
}

# Class respresenting a query for a set of operations.
OperationQuery = interface +c {
    # Apply given order to query's operation.
    # @param key, OperationOrderKey object which defines order
    # @param descending, bool
    # @return OperationQuery object, new ordered operation
    addOrder(key: OperationOrderKey, descending: bool): OperationQuery;
    # Get applied filter on operation query.
    # @return QueryFilter object
    filter(): QueryFilter;
    # Add offset to the operation query.
    # @param from, 32-bit integer
    offset(from: i32): OperationQuery;
    # Add limit to the operation query results.
    # @param count, 32-bit integer
    limit(count: i32): OperationQuery;
    #TODO
    # Complete the operation query.
    complete(): OperationQuery;
    #TODO
    partial(): OperationQuery;
    # Execute query to retrieve operations.
    # @param callback, if execute method succeed, ListCallback object returning a List of Operation objects
    execute(callback: ListCallback<Operation>);
}

# Structure of informations needed for account creation.
AccountCreationInfo = record {
    # 32-bit integer, index of account in user's wallet.
    index: i32;
    # List of string, account's owners.
    owners: list<string>;
    # List of string, list of account's derivations.
    derivations: list<string>;
    # List of 32 bytes, list of public keys owning the account.
    publicKeys: list<binary>;
    #TODO
    chainCodes: list<binary>;
}

#TODO
ExtendedKeyAccountCreationInfo = record {
    index: i32;
    owners: list<string>;
    derivations: list<string>;
    extendedKeys: list<string>;
}

Address = interface +c {
    # Gets an optional derivation path (if the address is owned by an account).
    # @return The derivation path of the address
    getDerivationPath(): optional<string>;
    # Serialize the address to a string. The serialization method depends of the underlying currency and
    # format (Base58, Bech32, Ethereum...).
    toString(): string;
    asBitcoinLikeAddress(): optional<BitcoinLikeAddress>;
    isInstanceOfBitcoinLikeAddress(): bool;

    # Cast the address to a stellar like one
    asStellarLikeAddress(): optional<StellarLikeAddress>;
    const isInstanceOfStellarLikeAddress(): bool;

    getCurrency(): Currency;

    # Attempt to parse a string address. If the address can be parse return it otherwise return a NONE
    # (depending on you host this may be a null, nil, None...).
    # @param address The string to parse
    # @param currency The currency used to parse the address
    # @return If successful returns the address object otherwise null.
    static parse(address: string, currency: Currency): optional<Address>;

    # Checks if the given string formatted address is valid or not.
    # @param address The string to parse
    # @param currency The currency used to parse the address
    # @return If successful returns true, false otherwise.
    static isValid(address: string, currency: Currency): bool;
}

# Keychain abstraction.
#
# A keychain can be seen as an address database that can be queried to get lists of addresses,
# ask whether an address is contained, or generate new addresses.
Keychain = interface +c {
    # Check whether an address is contained.
    const contains(address: string): bool;
}

TimePeriod = enum {
    hour;
    day;
    week;
    month;
}

# Class representing an account.
Account = interface +c {
    # Key of the synchronization duration time in the synchronize event payload.
    # The value is stored in a int64 time expressed in miliseconds.
    const EV_SYNC_DURATION_MS: string = "EV_SYNC_DURATION_MS";
    # Indicates the last block height fetch during synchronization
    # The value is stored as a int32
    const EV_SYNC_LAST_BLOCK_HEIGHT: string = "EV_SYNC_LAST_BLOCK_HEIGHT";
    # Indicates the number of new operations during the synchronization
    # The value is stored as a int32
    const EV_SYNC_NEW_OPERATIONS: string = "EV_SYNC_NEW_OPERATIONS";
    # Indicates the first valid block height before the reorganization during the synchronization
    # The valie is stored as a int32
    const EV_SYNC_REORG_BLOCK_HEIGHT: string = "EV_SYNC_REORG_BLOCK_HEIGHT";
    # Key of the synchronization error code. The code is a stringified version of the value in the ErrorCode enum.
    const EV_SYNC_ERROR_CODE: string = "EV_SYNC_ERROR_CODE";
    const EV_SYNC_ERROR_CODE_INT: string = "EV_SYNC_ERROR_CODE_INT";
    # Key of the synchronization error message. The message is stored as a string.
    const EV_SYNC_ERROR_MESSAGE: string = "EV_SYNC_ERROR_MESSAGE";
    #TODO
    const EV_NEW_BLOCK_CURRENCY_NAME: string = "EV_NEW_BLOCK_CURRENCY_NAME";
    const EV_NEW_BLOCK_HASH: string = "EV_NEW_BLOCK_HASH";
    const EV_NEW_BLOCK_HEIGHT: string = "EV_NEW_BLOCK_HEIGHT";
    #TODO
    const EV_NEW_OP_WALLET_NAME: string = "EV_NEW_OP_WALLET_NAME";
    const EV_NEW_OP_ACCOUNT_INDEX: string = "EV_NEW_OP_ACCOUNT_INDEX";
    const EV_NEW_OP_UID: string = "EV_NEW_OP_UID";

    # Returned flag when a transaction is put in DB
    # Some of those are unrelevant for specific coins
    # but for the sake of generic mechanism we put all those
    # flags together
    const FLAG_TRANSACTION_IGNORED: i32 = 0;
    const FLAG_NEW_TRANSACTION: i32 = 1;
    const FLAG_TRANSACTION_UPDATED: i32 = 2;
    const FLAG_TRANSACTION_ON_PREVIOUSLY_EMPTY_ADDRESS: i32 = 4;
    const FLAG_TRANSACTION_ON_USED_ADDRESS: i32 = 8;
    const FLAG_TRANSACTION_CREATED_SENDING_OPERATION: i32 = 16;
    const FLAG_TRANSACTION_CREATED_RECEPTION_OPERATION: i32 = 32;
    const FLAG_TRANSACTION_CREATED_EXTERNAL_OPERATION: i32 = 64;

    # Get index of account in user's wallet
    # 32-bit integer
    getIndex(): i32;
    # Get the list of all operations.
    queryOperations(): OperationQuery;
    # Get balance of account.
    # @param callback, if getBalacne, Callback returning an Amount object which represents account's balance
    getBalance(callback: Callback<Amount>);
    # Get balance of account at a precise interval with a certain granularity.
    # @param start, lower bound of search range
    # @param end, upper bound of search range
    # @param precision, granularity at which we want results
    # @param callback, ListCallback returning a list of Amount object which represents account's balance
    getBalanceHistory(start: string, end: string, period: TimePeriod, callback: ListCallback<Amount>);
    # Get synchronization status of account.
    # @return bool
    isSynchronizing(): bool;
    # Start synchronization of account.
    # @return EventBus, handler will be notified of synchronization outcome
    synchronize(): EventBus;
    # Return account's preferences.
    # @return Preferences object
    getPreferences(): Preferences;
    # Return account's logger which provides all needed (e.g. database) logs.
    # @return Logger Object
    getLogger(): Logger;
    # Return operation for a specific operation.
    # @param uid, string of operation id
    getOperationPreferences(uid: string): Preferences;
    # Turn the account into an Bitcoin one, allowing operations to be performed on the Bitcoin
    # network.
    asBitcoinLikeAccount() : BitcoinLikeAccount;
    # Turn the account into an Cosmos one, allowing operations to be performed on the Cosmos
    # network.
    asCosmosLikeAccount() : CosmosLikeAccount;
    # Turn the account into an Ethereum one, allowing operations to be performrd on the Ethereum
    # network.
    asEthereumLikeAccount() : EthereumLikeAccount;

    # Turn the account into a Ripple one, allowing operations to be performed on the Ripple network.
    asRippleLikeAccount(): RippleLikeAccount;
    # Turn the account into a Tezos one, allowing operations to be performed on the Tezos network.
    asTezosLikeAccount(): TezosLikeAccount;
    # Turn the account into an Algorand one, allowing operations to be performed on the Algorand network.
    asAlgorandAccount(): AlgorandAccount;

    # Turn the account into a Stellar one, allowing operations to be performerd on the Stellar
    # network.
    asStellarLikeAccount() : StellarLikeAccount;

    # Check if account is a Bitcoin one.
    # @return bool
    isInstanceOfBitcoinLikeAccount(): bool;
    # Check if account is a Cosmos one.
    # @return bool
    isInstanceOfCosmosLikeAccount(): bool;
    # Check if account is an Ethereum one.
    # @return bool
    isInstanceOfEthereumLikeAccount(): bool;
    # Check if account is a Stellar one.
    # @return bool
    const isInstanceOfStellarLikeAccount(): bool;
    # Check if account is a Ripple one.
    # @return bool
    isInstanceOfRippleLikeAccount(): bool;
    #TODO
    getFreshPublicAddresses(callback: ListCallback<Address>);
    # Get type of wallet to which account belongs.
    # @return WalletType object
    getWalletType(): WalletType;
    # Get event bus through which account is notified on synchronization status.
    # @return EventBus object
    getEventBus(): EventBus;
    # Start observing blockchain on which account synchronizes and send/receive transactions.
    startBlockchainObservation();
    # Stop observing blockchain.
    stopBlockchainObservation();
    # Get account's observation status.
    # @return boolean
    isObservingBlockchain(): bool;
    # Get Last block of blockchain on which account operates.
    # @param callback, Callback returning, if getLastBlock succeeds, a Block object
    getLastBlock(callback: Callback<Block>);

    # Get the key used to generate the account.
    getRestoreKey(): string;
    # Erase data (in user's DB) relative to wallet since given date.
    # @param date, start date of data deletion
    eraseDataSince(date: date, callback: Callback<ErrorCode>);

    # Access to underlying keychain.
    getAccountKeychain(): Keychain;
}

# Class representing a wallet.
Wallet = interface +c {
    # Get name of wallet.
    # @return string
    getName(): string;
    # Get account with specific index.
    # @param index, 32-bit integer, index of account in wallet
    # @param callback, Callback returning, if getAccount succeed, an Account object with given index
    getAccount(index: i32, callback: Callback<Account>);
    # Get number of accounts instanciated under wallet.
    # @param callback, Callback returning, if getAccountCount succeed, a 32-bit integer representing number of accounts
    getAccountCount(callback: Callback<i32>);
    # Get list of accounts instanciated under wallet in a given range.
    # @param offset, 32-bit integer from which we retrieve accounts
    # @param count, 32-bit integer, number of accounts to retrieve
    # @param callback, ListCallback returning, if getAccounts succeed, list of Accounts object
    getAccounts(offset: i32, count: i32, callback: ListCallback<Account>);
    # Get index of next account to create.
    # @return callback, Callback returning a 32-bit integer
    getNextAccountIndex(callback: Callback<i32>);
    # Return event bus through which wallet synchronizes it's accounts and interact with blockchain.
    # @return EventBus object
    getEventBus(): EventBus;
    # Return synchronization status wallet, true if at least one of accounts is synchronizing.
    # @return bool
    isSynchronizing(): bool;
    # Start synchronization of all accounts under wallet.
    # @return EventBus object through which wallet get notified of account's synchronization status
    synchronize(): EventBus;
    # Get wallet preferences.
    # @return Preferences object
    getPreferences(): Preferences;
    # Return account's logger which provides all needed (e.g. database) logs.
    # @return Logger Object
    getLogger(): Logger;
    # Get preferences of specific account.
    # @param index, 32-bit integer, account's index
    # @return Preferences object
    getAccountPreferences(index: i32): Preferences;
    # Convert wallet to a Bitcoin one.
    # @return BitcoinWallet object
    asBitcoinLikeWallet(): BitcoinLikeWallet;
    # Convert wallet to a Cosmos one.
    # @return CosmosWallet object
    asCosmosLikeWallet(): CosmosLikeWallet;
    # Get currency of wallet.
    # @return Currency object
    getCurrency(): Currency;
    # Tell whether wallet is a Bitcoin one.
    # @return bool
    isInstanceOfBitcoinLikeWallet(): bool;
    # Tell whether wallet is an Algorand one.
    # @return bool
    isInstanceOfAlgorandLikeWallet(): bool;
    # Tell whether wallet is a Cosmos one.
    # @return bool
    isInstanceOfCosmosLikeWallet(): bool;
    # Tell whether wallet is a Ethereum one.
    # @return bool
    isInstanceOfEthereumLikeWallet(): bool;
    # Tell whether wallet is a Ripple one.
    # @return bool
    isInstanceOfRippleLikeWallet(): bool;
    # Tell whether wallet is a Stellar one.
    # @return bool
    const isInstanceOfStellarLikeWallet(): bool;
    # Cast the instance to StellarLIkeWallet
    asStellarLikeWallet(): StellarLikeWallet;
    # Get wallet type.
    # @return WalletType object
    getWalletType(): WalletType;
    # Get last block of blockchain the wallet operates on.
    # @param callback, Callback returning a Block object
    getLastBlock(callback: Callback<Block>);
    # Return infos about the creation of specific account.
    # @param accountIndex, 32-bit account, index of account in wallet
    # @param callback, Callback returning an AccountCreationInfo
    getAccountCreationInfo(accountIndex: i32, callback: Callback<AccountCreationInfo>);
    #TODO
    getExtendedKeyAccountCreationInfo(accountIndex: i32, callback: Callback<ExtendedKeyAccountCreationInfo>);
    # Return infos about the next created account.
    # @param callback, Callback returning an AccountCreationInfo
    getNextAccountCreationInfo(callback: Callback<AccountCreationInfo>);
    #TODO
    getNextExtendedKeyAccountCreationInfo(callback: Callback<ExtendedKeyAccountCreationInfo>);
    # Get account from given account creation infos.
    # @param accountCreationInfo, AccountCreationInfo object
    # @param callback, Callback returning an Account object with given creation infos
    newAccountWithInfo(accountCreationInfo: AccountCreationInfo, callback: Callback<Account>);
    #TODO
    newAccountWithExtendedKeyInfo(extendedKeyAccountCreationInfo: ExtendedKeyAccountCreationInfo, callback: Callback<Account>);
    # Erase data (in user's DB) relative to wallet since given date.
    # @param date, start date of data deletion
    eraseDataSince(date: date, callback: Callback<ErrorCode>);
    # Return wallet's configuration
    getConfiguration(): DynamicObject;
}
