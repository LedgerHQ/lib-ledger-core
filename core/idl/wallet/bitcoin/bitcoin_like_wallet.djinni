@import "../../errors.djinni"
@import "../../preferences/preferences.djinni"
@import "../amount.djinni"
@import "../../bitcoin/addresses.djinni"
@import "./bitcoin_script.djinni"
@import "../../utils/tuples.djinni"

# Class of constants to set Bitcoin like wallet configurations.
BitcoinLikeWalletConfiguration = interface +c {
    # String keychain's name.
    const KEYCHAIN: string = "keychain";
    # String observer's name.
    const OBSERVER: string = "observer";
    # String explorer's name.
    const EXPLORER: string = "explorer";
    # String synchronizer's name.
    const SYNCHRONIZER: string = "synchronizer";
    # String with Payment Script type and BIP on which hierarchical wallet is based.
    const KEYCHAIN_P2PKH_BIP44: string = "p2pkh_bip44";
    # String websocket on which observer receives notifications from explorer.
    const OBSERVER_LEDGER_WEBSOCKET: string = "ledger_websocket";
    # String explorer api.
    const EXPLORER_LEDGER_API: string = "ledger_api";
    # String synchronizer by default.
    const SYNCHRONIZER_DEFAULT: string = "default";
}

# Class representing Bitcoin inputs.
BitcoinLikeInput = interface +c {
    # Returns the address of the input (if an address can be computed).
    getAddress(): optional<string>;
    # Returns the public associated with the address. This value can be NULL if you are building a transaction with an
    # address which does not belong to your wallet.
    getPublicKeys(): list<binary>;
    # Returns the derivation path of this input if the address is owned by the wallet.
    getDerivationPath(): list<DerivationPath>;
    # Returns the value of the amount. Depending on the backend this value may not exist if the input is not owned by
    # the wallet.
    getValue(): optional<Amount>;
    # Get the transaction hash of the output spent by this input. The result can be NULL if the output is not owned by
    # the wallet.
    getPreviousTxHash(): optional<string>;
    # Check whether input is for a coinbase.
    # @return Boolean, true if input belongs to coinbase transaction (reward for mining a block)
    isCoinbase(): bool;
    # Stored data cointained in coinbase.
    # @return Optional String
    getCoinbase(): optional<string>;
    # Get output index, it identifies which UTXO from tht transaction to spend.
    # @return Optional 32 bits integer, index of previous transaction
    getPreviousOutputIndex(): optional<i32>;
    # Retrieve the output spent by this input. Depending on the implementation this method may
    # use a lock to fetch data from a database. Therefore it may have poor performance, use with
    # caution.
    # @return The output spent by this input.
    getPreviousOuput(): BitcoinLikeOutput;
    # Get ScriptSig of this input. The scriptsig is the first half of a script necessary to spend a previous output.
    getScriptSig(): binary;
    # Parse the script sig to a [[BitcoinLikeScript]].
    parseScriptSig(): BitcoinLikeScript;

    # Set the ScriptS to the given value.
    # @param scriptSig The ScriptSig to use for this input
    setScriptSig(scriptSig: binary);
    # Push data to the end of the current ScriptSig.
    pushToScriptSig(data: binary);

    # Set the sequence number of this input.
    setSequence(sequence: i32);
    # Get the sequence number of this input.
    getSequence(): i64;

    # Get the previous transaction associated with the input.
    getPreviousTransaction(callback: Callback<binary>);

    # Easy way to set the P2PKH script signature. Shorthand for input.pushToScriptSig(input.getPublicKeys()[0], signature).
    setP2PKHSigScript(signature: binary);
}

# Class representing Bitcoin outputs.
BitcoinLikeOutput = interface +c {
    # Get transaction hash in which output was 'created'.
    # @return String, transaction hash containing output
    getTransactionHash(): string;
    # Get index of output in list of all outputs contained in same transaction.
    # @return 32 bits integer, index of output
    getOutputIndex(): i32;
    # Get amount of output.
    # @return Amount object, amount of output
    getValue(): Amount;
    # Get script (witness script) cryptographic puzzle that determines the conditions to spend the output.
    # @return in Bytes (variable size depending on type of script P2PKH, P2SH), locking script to spend UTXO
    getScript(): binary;
    parseScript(): BitcoinLikeScript;
    # Get address that spent the output.
    # @return Optional String, address that spent
    getAddress(): optional<string>;
    getDerivationPath(): optional<DerivationPath>;
    getBlockHeight(): optional<i64>;
}

# Class representing Bitcoin block
BitcoinLikeBlock = interface +c {
    # Hash of block.
    # @return string representing hash of this block
    getHash(): string;
    # Height of block in blockchain.
    # @return 64 bits integer, height of block
    getHeight(): i64;
    # Timestamp when block was mined.
    # @return Date object, date when block was appended to blockchain
    getTime(): date;
}

# Structure representing DER encoded signature
# DER format :
# - DER prefix
# - Length of rest of signature
# - Marker for r value
# - Length of r value
# - r value, Big Endian
# - Marker for s value
# - Length of s value
# - s value, Big Endian
# - SIGHASH byte (ALL, NONE, SINGLE)
BitcoinLikeSignature = record {
    # r data
    r: binary;
    # s data
    s: binary;
    # Ignored attribute
    v: binary;
}

BitcoinLikeSignatureState = enum {
    ALREADY_SIGNED;
    MISSING_DATA;
    SIGNING_SUCCEED;
}

# Class representing a Bitcoin transaction.
BitcoinLikeTransaction = interface +c {
    # Get the hash of the transaction.
    getHash(): string;
    # Get the input of the transaction.
    getInputs(): list<BitcoinLikeInput>;
    # Get the output of the transaction.
    getOutputs(): list<BitcoinLikeOutput>;
    # Get the block in which the transaction is inserted if the transaction is confirmed.
    getBlock(): optional<BitcoinLikeBlock>;
    # Get the lock time of the transaction.
    getLockTime(): i64;
    # Get the amount of fees of the transaction.
    getFees(): Amount;
    # Get the time when the transaction was issued or the time of the block including
    # this transaction.
    getTime(): date;
    # Get the timestamps serialized in the raw transaction if the underlying currency handles it.
    getTimestamp(): optional<i32>;
    # Get Transaction version.
    getVersion(): i32;
    # Serialize the transaction to its raw format.
    serialize(): binary;
    # Serialize outputs of the raw transaction into a byte array using the bitcoin transaction format.
    serializeOutputs(): binary;
    # Get the witness if the underlying transaction is a segwit transaction.
    getWitness(): optional<binary>;
    # Estimate the size of the raw transaction in bytes. This method returns a minimum estimated size and a maximum estimated
    # size.
    getEstimatedSize(): EstimatedSize;
    # Sign all inputs for given transaction. 
    # Build DER encoded signature from RSV data.
    # @return SIGNING_SUCCEED if succeed case else refers to BitcoinLikeSignatureState enumeration
    setSignatures(signatures: list<BitcoinLikeSignature>, override: bool): BitcoinLikeSignatureState;
    # Sign all inputs for given transaction. 
    # @return SIGNING_SUCCEED if succeed case else refers to BitcoinLikeSignatureState enumeration
    setDERSignatures(signatures: list<binary>, override: bool): BitcoinLikeSignatureState;
}

# Class representing a Bitcoin Operation.
BitcoinLikeOperation = interface +c {
    # Get operation's transaction.
    # @return BitcoinLikeTransaction object
    getTransaction(): BitcoinLikeTransaction;
}

# Structure representing a bitcoin transaction request.
BitcoinLikeTransactionRequest = record {
    # List of BitcoinLikeOutput objects, UTXO (Unspent Transaction Outputs) consumed by transaction's inputs.
    utxo: list<BitcoinLikeOutput>;
    # List of BitcoinLikeOutput objects, transaction's output.
    outputs: list<BitcoinLikeOutput>;
    # Optional Amount object, amount of base fees.
    baseFees: optional<Amount>;
    # Optional Amount object, amount of total fees.
    totalFees: optional<Amount>;
    # Optional 32 bits integer, transaction's lock time (refer to BitcoinLikeTransaction class).
    lockTime: optional<i32>;
}

# Structure representing a prepared bitcoin transaction (ready to be used with device).
BitcoinLikePreparedTransaction = record {
    # 32-bit integer representing version.
    version: i32;
    # List of BitcoinLikeInput objects, inputs aggregateed by transaction.
    inputs: list<BitcoinLikeOutput>;
    # List of stringsm paths to account creating transaction.
    paths: list<string>;
    # List of BitcoinLikeOutput objects, outputs aggregateed by transaction.
    outputs: list<BitcoinLikeOutput>;
    # 32-bit integer, block height after which transaction can be accepted.
    lockTime: i32;
}

# Enum of picking strategies.
BitcoinLikePickingStrategy = enum {
    deep_outputs_first;
    optimize_size;
    merge_outputs;
}

BitcoinLikeTransactionBuilder = interface +c {
    # Add the given input to the final transaction.
    # @param transactionhash The hash of the transaction in where the UTXO can be located.
    # @params index Index of the UTXO in the previous transaction
    # @params sequence Sequence number to add at the end of the input serialization. This can be used for RBF transaction
    # @return A reference on the same builder in order to chain calls.
    addInput(transactionHash: string, index: i32, sequence: i32): BitcoinLikeTransactionBuilder;

    # Add the given output to the final transaction.
    # @return A reference on the same builder in order to chain calls.
    addOutput(amount: Amount, script: BitcoinLikeScript): BitcoinLikeTransactionBuilder;

    # If needed the transaction will send its change to the given path. It is possible to add multiple change path.
    # @return A reference on the same builder in order to chain calls.
    addChangePath(path: string): BitcoinLikeTransactionBuilder;

    # Exclude UTXO from the coin selection (alias UTXO picking). You can call this method multiple times to exclude multiple
    # UTXO.
    # @param transactionHash The hash of the transaction in which this UTXO can be found.
    # @param outputIndex The position of the output in the previous transaction,
    # @return A reference on the same builder in order to chain calls.
    excludeUtxo(transactionHash: string, outputIndex: i32): BitcoinLikeTransactionBuilder;

    # Set the the number of change addresses in the transaction builder.
    # @return A reference on the same builder in order to chain calls.
    setNumberOfChangeAddresses(count: i32): BitcoinLikeTransactionBuilder;

    # Set the maximum amount per change output. By default there is no max amount.
    # @return A reference on the same builder in order to chain calls.
    setMaxAmountOnChange(amount: Amount): BitcoinLikeTransactionBuilder;

    # Set the minimum amount per change output. By default this value is the dust value of the currency.
    # @return A reference on the same builder in order to chain calls.
    setMinAmountOnChange(amount: Amount): BitcoinLikeTransactionBuilder;

    # Set the UTXO picking strategy (see [[BitcoinLikePickingStrategy]]).
    # @param strategy The strategy to adopt in order to select which input to use in the transaction.
    # @param sequence The sequence value serialized at the end of the raw transaction. If you don't know what to put here
    # just use 0xFFFFFF
    # @return A reference on the same builder in order to chain calls.
    pickInputs(strategy: BitcoinLikePickingStrategy, sequence: i32): BitcoinLikeTransactionBuilder;

    # Send funds to the given address. This method can be called multiple times to send to multiple addresses.
    # @param amount The value to send
    # @param address Address of the recipient
    # @return A reference on the same builder in order to chain calls.
    sendToAddress(amount: Amount, address: string): BitcoinLikeTransactionBuilder;

    # Send all available funds to the given address.
    # @param address Address of the recipient
    # @return A reference on the same builder in order to chain calls.
    wipeToAddress(address: string): BitcoinLikeTransactionBuilder;

    # Set the amount of fees per byte (of the raw transaction).
    # @return A reference on the same builder in order to chain calls.
    setFeesPerByte(fees: Amount): BitcoinLikeTransactionBuilder;

    # Build a transaction from the given builder parameters.
    build(callback: Callback<BitcoinLikeTransaction>);

    # Creates a clone of this builder.
    # @return A copy of the current builder instance.
    clone(): BitcoinLikeTransactionBuilder;

    # Reset the current instance to its initial state.
    reset();

    # Parsing unsigned transaction.
    # parsing a tx might change depending on block height we are on (if an update is effective starting from a given hight)
    static parseRawUnsignedTransaction(currency: Currency, rawTransaction: binary, currentBlockHeight: optional<i32>): BitcoinLikeTransaction;
}

# Class representing a Bitcoin account.
BitcoinLikeAccount = interface +c {
    # Get UTXOs of account in a given range.
    # @param from, integer, lower bound for account's UTXO's index
    # @param to, integer, upper bound for account's UTXO's index
    # @param callback, ListCallback object which returns a list of BitcoinLikeOutput if getUTXO succeed
    getUTXO(from: i32, to: i32, callback: ListCallback<BitcoinLikeOutput>);
    # Get UTXOs count of account.
    # @param callback, Callback object which returns number of UTXO owned by this account
    getUTXOCount(callback: Callback<i32>);
    broadcastRawTransaction(transaction: binary, callback: Callback<string>);
    broadcastTransaction(transaction: BitcoinLikeTransaction, callback: Callback<string>);
    buildTransaction(partial: optional<bool>): BitcoinLikeTransactionBuilder;
    # Get fees from network, fees are ordered in descending order (i.e. fastest to slowest confirmation)
    # Note: it would have been better to have this method on BitcoinLikeWallet
    # but since BitcoinLikeWallet is not used anywhere, it's better to keep all
    # specific methods under the same specific class so it will be easy to segratate
    # when the right time comes !
    getFees(callback: ListCallback<BigInt>);
    # Get addresses given a range of indices
    # Note: this will return public and change addresses
    getAddresses(from: i64, to: i64, callback: ListCallback<Address>);
}

# A bitcoin-like wallet.
BitcoinLikeWallet = interface +c {

}
