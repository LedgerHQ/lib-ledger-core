@import "../errors.djinni"

# Enumeration of available http methods.
HttpMethod = enum {
    GET;
    POST;
    PUT;
    DEL;
}

# Structure representing Http response body.
HttpReadBodyResult = record {
    # Optional Error structure, error in case of http request failure.
    error: optional<Error>;
    # Optional binary, data returned by http request in case of success.
    data: optional<binary>;
}

# Class representing an Http connection.
HttpUrlConnection = interface +j +o +n {
    # Gets the HTTP response status code.
    # @return The HTTP response status code
    getStatusCode(): i32;
    # Gets the HTTP response status text.
    # @return The HTTP response status text
    getStatusText(): string;
    # Gets the HTTP response headers.
    # @return The HTTP response headers
    getHeaders(): map<string, string>;
    # Reads available HTTP response body. This method will be called multiple times until it returns a empty bytes array.
    # @returns A chunk of the body data wrapped into a HttpReadBodyResult (for error management)
    readBody(): HttpReadBodyResult;
}

# Class representing an Http request.
HttpRequest = interface +c {
    # Get method of request.
    # @return HttpMethod enum entry
    getMethod(): HttpMethod;
    # Get headers set in the request.
    # @return Map with key and value of type string
    getHeaders(): map<string, string>;
    # Get body of request.
    # @return binary
    getBody(): binary;
    # Get Url of request.
    # @return string
    getUrl(): string;
    # Method called when request is completed.
    # @param response, Optional HttpUrlConnection object, response of request if succeed
    # @param error, optional Error structure, error returned in case of request failure
    complete(response: optional<HttpUrlConnection>, error: optional<Error>);
}

# Class representing the http client performing the http requests.
HttpClient = interface +j +o +n {
    # Execute a giver Http request.
    # @param request, HttpRequest object, requestr to execute
    execute(request: HttpRequest);
}
