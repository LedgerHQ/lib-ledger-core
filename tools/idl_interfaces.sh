#!/usr/bin/env bash
#
# Generate library API with djinni.
# Invocate with TRACE=1 as environment variable to set debug compilation.

set -e

if [[ $TRACE ]] ; then
    echo "Debug compilation enabled"
    trace="true";
else
    trace="false";
fi

function generate_core_interface {
    CORE_DIR=$1 # Ledger Core library directory
    CORE_IDL_DIR=$CORE_DIR/idl
    CORE_API_DIR=$CORE_DIR/inc/core/api

    echo -e "Generating ledger-core API"

    # recreate API directory
    rm -rf $CORE_API_DIR
    mkdir -p $CORE_API_DIR

    ./djinni/src/run \
        --idl $CORE_IDL_DIR/core.djinni \
        --cpp-out $CORE_API_DIR \
        --cpp-namespace ledger::core::api \
        --cpp-optional-template std::experimental::optional \
        --cpp-optional-header "<core/utils/optional.hpp>" \
        --export-header-name libcore_export \
        --yaml-out $CORE_IDL_DIR \
        --yaml-out-file core.yaml \
        --trace $trace
}

function generate_subcore_interface {
    CORE_DIR=$1 # Ledger Core library directory
    SUBCORE_DIR=$2 # Sub Core library directory
    SUBCORE_NAME=$(basename $2)
    SUBCORE_API_DIR=$SUBCORE_DIR/inc/api

    echo -e "Generating $SUBCORE_NAME API"

    # recreate API directory
    rm -rf $SUBCORE_API_DIR
    mkdir -p $SUBCORE_API_DIR

    # export-header-name is the name of header generated by CMake command
    # "generate_export_header", it allows to export global data symbols in dlls.
    # This option is MANDATORY in case of msvc (2015) build.
    # This option will be the name of the imported header and the correponding variable (defined
    # by EXPORT_MACRO_NAME option) should be exactly same name in upper case

    ./djinni/src/run \
        --idl $SUBCORE_DIR/idl/idl.djinni \
        --cpp-out $SUBCORE_API_DIR \
        --cpp-namespace ledger::core::api \
        --cpp-optional-template std::experimental::optional \
        --cpp-optional-header "<core/utils/optional.hpp>" \
        --export-header-name libcore_export \
        --trace $trace
}

case "$#" in
    "1")
        generate_core_interface $1
        ;;

    "2")
        generate_subcore_interface $1 $2
        ;;

    *)
        echo "Wrong number of arguments; please provide 1 to 2."
        exit 1
        ;;
esac
