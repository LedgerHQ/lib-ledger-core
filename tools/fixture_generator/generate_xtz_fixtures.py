#!/usr/bin/env python3

import sys
import requests
import json
import time

if len(sys.argv) < 4:
    print("Should have at least two params <name> <address>")
    sys.exit(-1)

path = "../../core/test/fixtures/"

arguments = sys.argv[1:]
namespace = str(arguments[0])
address = (arguments[1])
pubKey = (arguments[2])
chainCode = (arguments[3])

def getHashs(txsHash):
    # Explorers:
    #   https://api.alphanet.tzscan.io/
    #   https://api6.tzscan.io/v3
    # Node: mainnet-node.tzscan.io

    #   https://api6.tzscan.io/v3/operations/tz1TRspM5SeZpaQUhzByXbEvqKF1vnCM2YTK?type=Transaction
    syncUrl = "https://api6.tzscan.io/v3/operations/" + address + "?type=Transaction"

    #Get txs related to address
    call = requests.post(syncUrl)
    bytes = call.content
    text = bytes.decode('utf8')
    transactions = json.loads(text)
    for i in range(len(transactions)) :
        hash = transactions[i]['hash']
        txsHash.append(hash)

    return txsHash

def getTxs(hashs):
    #https://api6.tzscan.io/v3/operation/opTKKomay8tM3PDm3EGm9poSRkhGb7WVv67uFFWyfFEG4KUDG1o
    txs = []
    url = "https://api6.tzscan.io/v3/operation/"
    for i in range(len(hashs)):
        bytes = requests.post(url + hashs[i]).content
        text = bytes.decode('utf8')
        tx = json.loads(text)
        txs.append(tx)
    return txs

start = time.time()

classPrefix = 'Tezos'
extension = '.h'
parser = 'TezosLikeTransactionParser'

def makeH(namespace, txs):
    data = ['// This file was GENERATED by command:\n', '//     generate_fixtures.py\n', '// DO NOT EDIT BY HAND!!!\n', '#ifndef LEDGER_FIXTURES_TOTO_H\n', '#define LEDGER_FIXTURES_TOTO_H\n', '#include <gtest/gtest.h>\n', '#include <async/QtThreadDispatcher.hpp>\n', '#include <src/database/DatabaseSessionPool.hpp>\n', '#include <NativePathResolver.hpp>\n', '#include <unordered_set>\n', '#include <src/wallet/pool/WalletPool.hpp>\n', '#include <CoutLogPrinter.hpp>\n', '#include <src/api/DynamicObject.hpp>\n', '#include <wallet/common/CurrencyBuilder.hpp>\n', '#include <wallet/'+ classPrefix.lower()+'/explorers/api/'+parser+'.h>\n' , '#include <wallet/'+ classPrefix.lower()+'/'+classPrefix+'LikeWallet'+extension+'>\n', '#include <wallet/'+ classPrefix.lower() +'/database/'+ classPrefix +'LikeTransactionDatabaseHelper.h>\n', '#include <wallet/common/database/AccountDatabaseHelper.h>\n', '#include <wallet/pool/database/PoolDatabaseHelper.hpp>\n', '#include <utils/JSONUtils.h>\n', '#include <async/async_wait.h>\n', '#include <wallet/'+ classPrefix.lower() +'/'+classPrefix+'LikeAccount'+extension+'>\n', '#include <api/'+classPrefix+'LikeOperation.hpp>\n', '#include <api/'+classPrefix+'LikeTransaction.hpp>\n', '#include <api/BigInt.hpp>\n', '#include <net/QtHttpClient.hpp>\n', '#include <events/LambdaEventReceiver.hpp>\n', '#include <soci.h>\n', '#include <utils/hex.h>\n', '#include <api/Account.hpp>\n', '#include <api/'+classPrefix+'LikeAccount.hpp>\n']
    externs = []
    externs.append("\t\t\textern core::api::AccountCreationInfo XPUB_INFO;\n")
    for i in range(len(txs)):
        externs.append("\t\t\textern const std::string TX_"+str(i+1)+";\n")
    externs.append("\n")
    externs.append("\t\t\tstd::shared_ptr<core::"+classPrefix+"LikeAccount> inflate(const std::shared_ptr<core::WalletPool>& pool, const std::shared_ptr<core::AbstractWallet>& wallet);\n")
    newLines = ["namespace ledger {\n","\tnamespace testing {\n","\t\tnamespace "+namespace+" {\n"]+externs+["\t\t}\n","\t}\n", "}\n"]
    result = data+["\n"]+newLines+["\n"]
    result[3] = "#ifndef LEDGER_FIXTURES_"+namespace.upper()+"\n"
    result[4] = "#define LEDGER_FIXTURES_"+namespace.upper()+"\n"
    result.append("#endif // LEDGER_FIXTURES_"+namespace.upper()+"\n")

    with open(path+namespace+'_fixtures.h', 'w+') as file:
        file.writelines(result)
        file.close()



def makeCPP(namespace, txs):
    data = [
        "// This file was GENERATED by command:\n",
        "//     generate_fixtures.py\n",
        "// DO NOT EDIT BY HAND!!!\n"
    ]
    newLines = []
    newLines.append("#include \""+namespace+'_fixtures.h'+"\"\n")
    newLines.append("\n")
    newLines.append("namespace ledger {\n")
    newLines.append("\tnamespace testing {\n")
    newLines.append("\t\tnamespace "+namespace+" {\n")
    apiCalls = []
    apiCalls.append("core::api::AccountCreationInfo XPUB_INFO(\n")
    apiCalls.append('        0, {"xtz"}, {"44\'/1729\'/0\'"}, \n')
    apiCalls.append('{ledger::core::hex::toByteArray("' + pubKey + '")} , {ledger::core::hex::toByteArray("' + chainCode + '")}\n')
    apiCalls.append(');\n')
    apiCalls.append("std::shared_ptr<core::"+classPrefix+"LikeAccount> inflate(const std::shared_ptr<core::WalletPool>& pool, const std::shared_ptr<core::AbstractWallet>& wallet) {\n")
    apiCalls.append("\tauto account = std::dynamic_pointer_cast<core::"+classPrefix+"LikeAccount>(wait(wallet->newAccountWithInfo(XPUB_INFO)));\n")
    apiCalls.append("\tsoci::session sql(pool->getDatabaseSessionPool()->getPool());\n")
    apiCalls.append("\tsql.begin();")
    for i,tx in enumerate(txs):
        apiCalls.append("\taccount->putTransaction(sql, *core::JSONUtils::parse<core::"+parser+">(TX_" + str(i+1) + "));\n")
    apiCalls.append("\tsql.commit();\n")
    apiCalls.append("\treturn account;\n")
    apiCalls.append("}\n")
    txLines = []
    for i,tx in enumerate(txs):
        txLines.append(('const std::string TX_'+str(i+1)+' = "'+json.dumps(tx).replace('"','\\"')+'";\n'))
    namespacedLines = apiCalls+txLines
    for idx, line in enumerate(namespacedLines):
        namespacedLines[idx] = "\t\t\t"+line
    newLines += namespacedLines + ["\t\t}\n","\t}\n", "}\n"]
    result = data+newLines
    with open(path+namespace+'_fixtures.cpp', 'w+') as file:
        file.writelines(result)
        file.close()


makeH(namespace, getTxs(getHashs([])))

end = time.time()

print("make H over after "+str(end-start))

makeCPP(namespace, getTxs(getHashs([])))

end2 = time.time()

print("make cpp over after "+str(end2-start))