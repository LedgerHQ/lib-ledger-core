version: 2
general:
dependencies:
  cache_directories:
    - ~/cmake-3.12.3
jobs:
  build_linux_release:
    docker:
      - image: debian:stretch
    working_directory: ~/lib-ledger-core
    steps:
      - run:
          command: |
            apt-get update
            apt-get -y install git ssh
      - checkout
      - run:
          name: Setup
          command: |
            . .circleci/setup_debian.sh Release
      - run:
          name: Submodule_Initialization
          command: |
            . .circleci/init_submodules.sh
      - run:
          name: CMake_Install
          command: |
            . .circleci/cmake-install.sh
      - run:
          name: Build_Library
          command: |
            . .circleci/build_lib.sh Release
      - run:
          name: Build_Module
          command: |
            . .circleci/build_node_module.sh
      - run:
          name: Copy_Artifacts
          command: |
            . .circleci/copy_artifacts.sh
      - run:
          name: Build_Library_jni
          command: |
            . .circleci/build_lib.sh target_jni Release
      - run:
          name: Copy_Artifacts_jni
          command: |
            . .circleci/copy_artifacts.sh target_jni
      - run:
          name: Setup NDK
          command: |
            apt-get install -y zip unzip
            wget --quiet https://dl.google.com/android/repository/android-ndk-r18b-linux-x86_64.zip
            unzip -q android-ndk-r18b-linux-x86_64.zip -d /home/circleci
            ls -la /home/circleci/android-ndk-r18b
      - run:
          name: Build_Library_android
          command: |
            . .circleci/build_lib.sh android
      - run:
          name: Copy_Artifacts_Android
          command: |
            . .circleci/copy_artifacts.sh android
      - run:
          name: Build_Library_android_x86_64
          command: |
            . .circleci/build_lib.sh android x86_64
      - run:
          name: Copy_Artifacts_Android_x86_64
          command: |
            . .circleci/copy_artifacts.sh android x86_64
      - run:
          name: Build_Library_android_armeabi-v7a
          command: |
            . .circleci/build_lib.sh android armeabi-v7a
      - run:
          name: Copy_Artifacts_Android_armeabi-v7a
          command: |
            . .circleci/copy_artifacts.sh android armeabi-v7a
      - run:
          name: Build_Library_android_arm64-v8a
          command: |
            . .circleci/build_lib.sh android arm64-v8a
      - run:
          name: Copy_Artifacts_Android_arm64-v8a
          command: |
            . .circleci/copy_artifacts.sh android arm64-v8a
      - persist_to_workspace:
          root: ~/lib-ledger-core-artifacts
          paths:
            - linux/jni/libledger-core_jni.so
      - deploy:
          name: Deploy_Artifacts
          command: |
            . .circleci/deploy.sh
  build_linux_debug:
      docker:
        - image: debian:stretch
      working_directory: ~/lib-ledger-core
      steps:
        - run:
            command: |
              apt-get update
              apt-get -y install git ssh
        - checkout
        - run:
            name: Setup
            command: |
              . .circleci/setup_debian.sh Debug
        - run:
            name: Submodule_Initialization
            command: |
              . .circleci/init_submodules.sh
        - run:
            name: CMake_Install
            command: |
              . .circleci/cmake-install.sh
        - run:
            name: Build_Library
            command: |
              . .circleci/build_lib.sh Debug
        - run:
            name: Build_Module
            command: |
              . .circleci/build_node_module.sh
        - run:
            name: Run_Tests
            command: |
                cd ../lib-ledger-core-build
                ~/cmake-3.13.3-Linux-x86_64/bin/ctest -VV -timeout 60
  build_macos_release:
    macos:
      xcode: "10.0.0"
    working_directory: ~/lib-ledger-core
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            . .circleci/setup_macos.sh Release
      - run:
          name: Submodule_Initialization
          command: |
            . .circleci/init_submodules.sh
      - run:
          name: Build_Library
          command: |
            . .circleci/build_lib.sh Release
      - run:
          name: Build_Module
          command: |
            . .circleci/build_node_module.sh
      - run:
          name: Copy_Artifacts
          command: |
            . .circleci/copy_artifacts.sh
      - run:
          name: Build_Library_jni
          command: |
            . .circleci/build_lib.sh target_jni Release
      - run:
          name: Copy_Artifacts_jni
          command: |
            . .circleci/copy_artifacts.sh target_jni
      - run:
          name: Build_Library_ios_x86
          command: |
            . .circleci/build_lib.sh ios
      - run:
          name: Copy_Artifacts_ios_x86
          command: |
            . .circleci/copy_artifacts.sh ios
      - run:
          name: Build_Library_ios_armv7
          command: |
            . .circleci/build_lib.sh ios armv7
      - run:
          name: Copy_Artifacts_ios_armv7
          command: |
            . .circleci/copy_artifacts.sh ios armv7
      - run:
          name: Build_Library_ios_arm64
          command: |
            . .circleci/build_lib.sh ios arm64
      - run:
          name: Copy_Artifacts_ios_arm64
          command: |
            . .circleci/copy_artifacts.sh ios arm64
      - persist_to_workspace:
          root: ~/lib-ledger-core-artifacts
          paths:
            - macos/jni/libledger-core_jni.dylib
      - deploy:
          name: Deploy_Artifacts
          command: |
            . .circleci/deploy.sh
            . .circleci/deploy_fat_lib.sh
  build_macos_debug:
    macos:
      xcode: "10.0.0"
    working_directory: ~/lib-ledger-core
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            . .circleci/setup_macos.sh Debug
      - run:
          name: Submodule_Initialization
          command: |
            . .circleci/init_submodules.sh
      - run:
          name: Build_Library
          command: |
            . .circleci/build_lib.sh Debug
      - run:
          name: Build_Module
          command: |
            . .circleci/build_node_module.sh
      - run:
          name: Run_Tests
          command: |
              cd ../lib-ledger-core-build
              ctest -VV -timeout 60
  publish_jar:
    macos:
      xcode: "10.0.0"
    working_directory: ~/lib-ledger-core
    steps:
    - attach_workspace:
        at: ~/lib-ledger-core-artifacts
    - checkout
    - run:
        name: Setup
        command: |
          . .circleci/setup_macos.sh Release
    - run:
        name: Submodule_Initialization
        command: |
          . .circleci/init_submodules.sh
    - run:
        name: Publish_jar
        command: |
          . .circleci/publish_jar.sh
  generate_doc:
      docker:
        - image: circleci/buildpack-deps:stretch
      working_directory: ~/build
      steps:
        - checkout
        - run:
            name: "Pull Submodules"
            command: |
              git submodule init
              git submodule update --remote
        - run:
            name: Install dependencies
            command: |
              sudo apt-get update -q=2
              sudo apt-get install -qy doxygen graphviz
        - run:
            command: doxygen Doxyfile
            working_directory: ~/build/doc
        - run:
            name: Check that the index file is present
            command: test -f doc/html/index.html      
        - persist_to_workspace:
            root: ~/build/doc
            paths: html
    deploy_doc:
        docker:
          - image: node:8.10.0
        steps:
          - add_ssh_keys:
              fingerprints:
                - "b5:9d:98:49:ce:f3:cf:88:58:79:06:e1:1c:4d:03:f5"
          - checkout
          - attach_workspace:
              at: doc
          - run:
              name: Install and configure dependencies
              command: |
                npm install -g --silent gh-pages@2.0.1
                git config --global user.email "deploy-bot@ledger.fr"
                git config --global user.name "Deploy Bot"
          - run:
              name: Deploy docs to gh-pages branch
              command: gh-pages --dist doc/html
          - run:
              name: Create CNAME file
              command: echo "docs.libcore.ledger.com" > doc/html/CNAME

workflows:
  version: 2
  build:
    jobs:
      - build_linux_release:
          filters:
            tags:
              only: /.*/
      - build_macos_release:
          filters:
            tags:
              only: /.*/
      - build_linux_debug
      - build_macos_debug
      - publish_jar:
          requires:
            - build_linux_release
            - build_macos_release
          filters:
            tags:
              only: /.*/
  documentation:
    jobs:
      - generate_doc:
          filters:
            # tags:
            #   only: /.+/
            branches:
              only: master
      - deploy_doc:
          requires:
            - generate_doc
          filters:
            branches:
              only: master
